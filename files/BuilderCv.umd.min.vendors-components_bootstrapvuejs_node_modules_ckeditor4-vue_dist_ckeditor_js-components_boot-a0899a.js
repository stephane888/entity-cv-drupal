((typeof self !== 'undefined' ? self : this)["webpackChunkBuilderCv"] = (typeof self !== 'undefined' ? self : this)["webpackChunkBuilderCv"] || []).push([["vendors-components_bootstrapvuejs_node_modules_ckeditor4-vue_dist_ckeditor_js-components_boot-a0899a"],{

/***/ "../components_bootstrapvuejs/node_modules/ckeditor4-vue/dist/ckeditor.js":
/*!********************************************************************************!*\
  !*** ../components_bootstrapvuejs/node_modules/ckeditor4-vue/dist/ckeditor.js ***!
  \********************************************************************************/
/***/ (function(module) {

/*! For license information please see ckeditor.js.LICENSE.txt */
/*!*
 * @license Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md.
 */
!function (t, e) {
   true ? module.exports = e() : 0;
}(window, function () {
  return function (t) {
    var e = {};
    function n(i) {
      if (e[i]) return e[i].exports;
      var r = e[i] = {
        i: i,
        l: !1,
        exports: {}
      };
      return t[i].call(r.exports, r, r.exports, n), r.l = !0, r.exports;
    }
    return n.m = t, n.c = e, n.d = function (t, e, i) {
      n.o(t, e) || Object.defineProperty(t, e, {
        enumerable: !0,
        get: i
      });
    }, n.r = function (t) {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, {
        value: "Module"
      }), Object.defineProperty(t, "__esModule", {
        value: !0
      });
    }, n.t = function (t, e) {
      if (1 & e && (t = n(t)), 8 & e) return t;
      if (4 & e && "object" == typeof t && t && t.__esModule) return t;
      var i = Object.create(null);
      if (n.r(i), Object.defineProperty(i, "default", {
        enumerable: !0,
        value: t
      }), 2 & e && "string" != typeof t) for (var r in t) n.d(i, r, function (e) {
        return t[e];
      }.bind(null, r));
      return i;
    }, n.n = function (t) {
      var e = t && t.__esModule ? function () {
        return t.default;
      } : function () {
        return t;
      };
      return n.d(e, "a", e), e;
    }, n.o = function (t, e) {
      return Object.prototype.hasOwnProperty.call(t, e);
    }, n.p = "", n(n.s = 0);
  }([function (t, e, n) {
    t.exports = n(1);
  }, function (t, e, n) {
    "use strict";

    function i(t, e) {
      t.onload = function () {
        this.onerror = this.onload = null, e(null, t);
      }, t.onerror = function () {
        this.onerror = this.onload = null, e(new Error("Failed to load " + this.src), t);
      };
    }
    function r(t, e) {
      t.onreadystatechange = function () {
        "complete" != this.readyState && "loaded" != this.readyState || (this.onreadystatechange = null, e(null, t));
      };
    }
    var o;
    function a(t, e) {
      return "CKEDITOR" in window ? Promise.resolve(CKEDITOR) : "string" != typeof t || t.length < 1 ? Promise.reject(new TypeError("CKEditor URL must be a non-empty string.")) : (o || (o = a.scriptLoader(t).then(function (t) {
        return e && e(t), t;
      })), o);
    }
    n.r(e), a.scriptLoader = function (t) {
      return new Promise(function (e, n) {
        !function (t, e, n) {
          var o = document.head || document.getElementsByTagName("head")[0],
            a = document.createElement("script");
          "function" == typeof e && (n = e, e = {}), e = e || {}, n = n || function () {}, a.type = e.type || "text/javascript", a.charset = e.charset || "utf8", a.async = !("async" in e) || !!e.async, a.src = t, e.attrs && function (t, e) {
            for (var n in e) t.setAttribute(n, e[n]);
          }(a, e.attrs), e.text && (a.text = String(e.text)), ("onload" in a ? i : r)(a, n), a.onload || i(a, n), o.appendChild(a);
        }(t, function (t) {
          return o = void 0, t ? n(t) : window.CKEDITOR ? void e(CKEDITOR) : n(new Error("Script loaded from editorUrl doesn't provide CKEDITOR namespace."));
        });
      });
    };
    var s = {
      name: "ckeditor",
      render(t) {
        return t("div", {}, [t(this.tagName)]);
      },
      props: {
        value: {
          type: String,
          default: ""
        },
        type: {
          type: String,
          default: "classic",
          validator: t => ["classic", "inline"].includes(t)
        },
        editorUrl: {
          type: String,
          default: "https://cdn.ckeditor.com/4.20.1/standard-all/ckeditor.js"
        },
        config: {
          type: Object,
          default: () => {}
        },
        tagName: {
          type: String,
          default: "textarea"
        },
        readOnly: {
          type: Boolean,
          default: null
        },
        throttle: {
          type: Number,
          default: 80
        }
      },
      mounted() {
        a(this.editorUrl, t => {
          this.$emit("namespaceloaded", t);
        }).then(() => {
          if (this.$_destroyed) return;
          const t = this.prepareConfig(),
            e = "inline" === this.type ? "inline" : "replace",
            n = this.$el.firstElementChild;
          CKEDITOR[e](n, t);
        });
      },
      beforeDestroy() {
        this.instance && this.instance.destroy(), this.$_destroyed = !0;
      },
      watch: {
        value(t) {
          this.instance && this.instance.getData() !== t && this.instance.setData(t);
        },
        readOnly(t) {
          this.instance && this.instance.setReadOnly(t);
        }
      },
      methods: {
        prepareConfig() {
          const t = this.config || {};
          t.on = t.on || {}, void 0 === t.delayIfDetached && (t.delayIfDetached = !0), null !== this.readOnly && (t.readOnly = this.readOnly);
          const e = t.on.instanceReady;
          return t.on.instanceReady = t => {
            this.instance = t.editor, this.$nextTick().then(() => {
              this.prepareComponentData(), e && e(t);
            });
          }, t;
        },
        prepareComponentData() {
          const t = this.value;
          this.instance.fire("lockSnapshot"), this.instance.setData(t, {
            callback: () => {
              this.$_setUpEditorEvents();
              const e = this.instance.getData();
              t !== e ? (this.$once("input", () => {
                this.$emit("ready", this.instance);
              }), this.$emit("input", e)) : this.$emit("ready", this.instance), this.instance.fire("unlockSnapshot");
            }
          });
        },
        $_setUpEditorEvents() {
          const t = this.instance,
            e = function (t, e) {
              var n,
                i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
              return function () {
                clearTimeout(n);
                for (var r = arguments.length, o = new Array(r), a = 0; a < r; a++) o[a] = arguments[a];
                n = setTimeout(t.bind.apply(t, [i].concat(o)), e);
              };
            }(e => {
              const n = t.getData();
              this.value !== n && this.$emit("input", n, e, t);
            }, this.throttle);
          t.on("change", e), t.on("focus", e => {
            this.$emit("focus", e, t);
          }), t.on("blur", e => {
            this.$emit("blur", e, t);
          });
        }
      }
    };
    const c = {
      install(t) {
        t.component("ckeditor", s);
      },
      component: s
    };
    e.default = c;
  }]).default;
});

/***/ }),

/***/ "../components_bootstrapvuejs/node_modules/sortablejs/modular/sortable.esm.js":
/*!************************************************************************************!*\
  !*** ../components_bootstrapvuejs/node_modules/sortablejs/modular/sortable.esm.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MultiDrag": function() { return /* binding */ MultiDragPlugin; },
/* harmony export */   "Sortable": function() { return /* binding */ Sortable; },
/* harmony export */   "Swap": function() { return /* binding */ SwapPlugin; }
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.push.js */ "../components_bootstrapvuejs/node_modules/core-js/modules/es.array.push.js");
/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__);

/**!
 * Sortable 1.15.0
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }
  return _typeof(obj);
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
var version = "1.15.0";
function userAgent(pattern) {
  if (typeof window !== 'undefined' && window.navigator) {
    return !! /*@__PURE__*/navigator.userAgent.match(pattern);
  }
}
var IE11OrLess = userAgent(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i);
var Edge = userAgent(/Edge/i);
var FireFox = userAgent(/firefox/i);
var Safari = userAgent(/safari/i) && !userAgent(/chrome/i) && !userAgent(/android/i);
var IOS = userAgent(/iP(ad|od|hone)/i);
var ChromeForAndroid = userAgent(/chrome/i) && userAgent(/android/i);
var captureMode = {
  capture: false,
  passive: false
};
function on(el, event, fn) {
  el.addEventListener(event, fn, !IE11OrLess && captureMode);
}
function off(el, event, fn) {
  el.removeEventListener(event, fn, !IE11OrLess && captureMode);
}
function matches( /**HTMLElement*/
el, /**String*/
selector) {
  if (!selector) return;
  selector[0] === '>' && (selector = selector.substring(1));
  if (el) {
    try {
      if (el.matches) {
        return el.matches(selector);
      } else if (el.msMatchesSelector) {
        return el.msMatchesSelector(selector);
      } else if (el.webkitMatchesSelector) {
        return el.webkitMatchesSelector(selector);
      }
    } catch (_) {
      return false;
    }
  }
  return false;
}
function getParentOrHost(el) {
  return el.host && el !== document && el.host.nodeType ? el.host : el.parentNode;
}
function closest( /**HTMLElement*/
el, /**String*/
selector, /**HTMLElement*/
ctx, includeCTX) {
  if (el) {
    ctx = ctx || document;
    do {
      if (selector != null && (selector[0] === '>' ? el.parentNode === ctx && matches(el, selector) : matches(el, selector)) || includeCTX && el === ctx) {
        return el;
      }
      if (el === ctx) break;
      /* jshint boss:true */
    } while (el = getParentOrHost(el));
  }
  return null;
}
var R_SPACE = /\s+/g;
function toggleClass(el, name, state) {
  if (el && name) {
    if (el.classList) {
      el.classList[state ? 'add' : 'remove'](name);
    } else {
      var className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');
      el.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');
    }
  }
}
function css(el, prop, val) {
  var style = el && el.style;
  if (style) {
    if (val === void 0) {
      if (document.defaultView && document.defaultView.getComputedStyle) {
        val = document.defaultView.getComputedStyle(el, '');
      } else if (el.currentStyle) {
        val = el.currentStyle;
      }
      return prop === void 0 ? val : val[prop];
    } else {
      if (!(prop in style) && prop.indexOf('webkit') === -1) {
        prop = '-webkit-' + prop;
      }
      style[prop] = val + (typeof val === 'string' ? '' : 'px');
    }
  }
}
function matrix(el, selfOnly) {
  var appliedTransforms = '';
  if (typeof el === 'string') {
    appliedTransforms = el;
  } else {
    do {
      var transform = css(el, 'transform');
      if (transform && transform !== 'none') {
        appliedTransforms = transform + ' ' + appliedTransforms;
      }
      /* jshint boss:true */
    } while (!selfOnly && (el = el.parentNode));
  }
  var matrixFn = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix || window.MSCSSMatrix;
  /*jshint -W056 */

  return matrixFn && new matrixFn(appliedTransforms);
}
function find(ctx, tagName, iterator) {
  if (ctx) {
    var list = ctx.getElementsByTagName(tagName),
      i = 0,
      n = list.length;
    if (iterator) {
      for (; i < n; i++) {
        iterator(list[i], i);
      }
    }
    return list;
  }
  return [];
}
function getWindowScrollingElement() {
  var scrollingElement = document.scrollingElement;
  if (scrollingElement) {
    return scrollingElement;
  } else {
    return document.documentElement;
  }
}
/**
 * Returns the "bounding client rect" of given element
 * @param  {HTMLElement} el                       The element whose boundingClientRect is wanted
 * @param  {[Boolean]} relativeToContainingBlock  Whether the rect should be relative to the containing block of (including) the container
 * @param  {[Boolean]} relativeToNonStaticParent  Whether the rect should be relative to the relative parent of (including) the contaienr
 * @param  {[Boolean]} undoScale                  Whether the container's scale() should be undone
 * @param  {[HTMLElement]} container              The parent the element will be placed in
 * @return {Object}                               The boundingClientRect of el, with specified adjustments
 */

function getRect(el, relativeToContainingBlock, relativeToNonStaticParent, undoScale, container) {
  if (!el.getBoundingClientRect && el !== window) return;
  var elRect, top, left, bottom, right, height, width;
  if (el !== window && el.parentNode && el !== getWindowScrollingElement()) {
    elRect = el.getBoundingClientRect();
    top = elRect.top;
    left = elRect.left;
    bottom = elRect.bottom;
    right = elRect.right;
    height = elRect.height;
    width = elRect.width;
  } else {
    top = 0;
    left = 0;
    bottom = window.innerHeight;
    right = window.innerWidth;
    height = window.innerHeight;
    width = window.innerWidth;
  }
  if ((relativeToContainingBlock || relativeToNonStaticParent) && el !== window) {
    // Adjust for translate()
    container = container || el.parentNode; // solves #1123 (see: https://stackoverflow.com/a/37953806/6088312)
    // Not needed on <= IE11

    if (!IE11OrLess) {
      do {
        if (container && container.getBoundingClientRect && (css(container, 'transform') !== 'none' || relativeToNonStaticParent && css(container, 'position') !== 'static')) {
          var containerRect = container.getBoundingClientRect(); // Set relative to edges of padding box of container

          top -= containerRect.top + parseInt(css(container, 'border-top-width'));
          left -= containerRect.left + parseInt(css(container, 'border-left-width'));
          bottom = top + elRect.height;
          right = left + elRect.width;
          break;
        }
        /* jshint boss:true */
      } while (container = container.parentNode);
    }
  }
  if (undoScale && el !== window) {
    // Adjust for scale()
    var elMatrix = matrix(container || el),
      scaleX = elMatrix && elMatrix.a,
      scaleY = elMatrix && elMatrix.d;
    if (elMatrix) {
      top /= scaleY;
      left /= scaleX;
      width /= scaleX;
      height /= scaleY;
      bottom = top + height;
      right = left + width;
    }
  }
  return {
    top: top,
    left: left,
    bottom: bottom,
    right: right,
    width: width,
    height: height
  };
}
/**
 * Checks if a side of an element is scrolled past a side of its parents
 * @param  {HTMLElement}  el           The element who's side being scrolled out of view is in question
 * @param  {String}       elSide       Side of the element in question ('top', 'left', 'right', 'bottom')
 * @param  {String}       parentSide   Side of the parent in question ('top', 'left', 'right', 'bottom')
 * @return {HTMLElement}               The parent scroll element that the el's side is scrolled past, or null if there is no such element
 */

function isScrolledPast(el, elSide, parentSide) {
  var parent = getParentAutoScrollElement(el, true),
    elSideVal = getRect(el)[elSide];
  /* jshint boss:true */

  while (parent) {
    var parentSideVal = getRect(parent)[parentSide],
      visible = void 0;
    if (parentSide === 'top' || parentSide === 'left') {
      visible = elSideVal >= parentSideVal;
    } else {
      visible = elSideVal <= parentSideVal;
    }
    if (!visible) return parent;
    if (parent === getWindowScrollingElement()) break;
    parent = getParentAutoScrollElement(parent, false);
  }
  return false;
}
/**
 * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)
 * and non-draggable elements
 * @param  {HTMLElement} el       The parent element
 * @param  {Number} childNum      The index of the child
 * @param  {Object} options       Parent Sortable's options
 * @return {HTMLElement}          The child at index childNum, or null if not found
 */

function getChild(el, childNum, options, includeDragEl) {
  var currentChild = 0,
    i = 0,
    children = el.children;
  while (i < children.length) {
    if (children[i].style.display !== 'none' && children[i] !== Sortable.ghost && (includeDragEl || children[i] !== Sortable.dragged) && closest(children[i], options.draggable, el, false)) {
      if (currentChild === childNum) {
        return children[i];
      }
      currentChild++;
    }
    i++;
  }
  return null;
}
/**
 * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)
 * @param  {HTMLElement} el       Parent element
 * @param  {selector} selector    Any other elements that should be ignored
 * @return {HTMLElement}          The last child, ignoring ghostEl
 */

function lastChild(el, selector) {
  var last = el.lastElementChild;
  while (last && (last === Sortable.ghost || css(last, 'display') === 'none' || selector && !matches(last, selector))) {
    last = last.previousElementSibling;
  }
  return last || null;
}
/**
 * Returns the index of an element within its parent for a selected set of
 * elements
 * @param  {HTMLElement} el
 * @param  {selector} selector
 * @return {number}
 */

function index(el, selector) {
  var index = 0;
  if (!el || !el.parentNode) {
    return -1;
  }
  /* jshint boss:true */

  while (el = el.previousElementSibling) {
    if (el.nodeName.toUpperCase() !== 'TEMPLATE' && el !== Sortable.clone && (!selector || matches(el, selector))) {
      index++;
    }
  }
  return index;
}
/**
 * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.
 * The value is returned in real pixels.
 * @param  {HTMLElement} el
 * @return {Array}             Offsets in the format of [left, top]
 */

function getRelativeScrollOffset(el) {
  var offsetLeft = 0,
    offsetTop = 0,
    winScroller = getWindowScrollingElement();
  if (el) {
    do {
      var elMatrix = matrix(el),
        scaleX = elMatrix.a,
        scaleY = elMatrix.d;
      offsetLeft += el.scrollLeft * scaleX;
      offsetTop += el.scrollTop * scaleY;
    } while (el !== winScroller && (el = el.parentNode));
  }
  return [offsetLeft, offsetTop];
}
/**
 * Returns the index of the object within the given array
 * @param  {Array} arr   Array that may or may not hold the object
 * @param  {Object} obj  An object that has a key-value pair unique to and identical to a key-value pair in the object you want to find
 * @return {Number}      The index of the object in the array, or -1
 */

function indexOfObject(arr, obj) {
  for (var i in arr) {
    if (!arr.hasOwnProperty(i)) continue;
    for (var key in obj) {
      if (obj.hasOwnProperty(key) && obj[key] === arr[i][key]) return Number(i);
    }
  }
  return -1;
}
function getParentAutoScrollElement(el, includeSelf) {
  // skip to window
  if (!el || !el.getBoundingClientRect) return getWindowScrollingElement();
  var elem = el;
  var gotSelf = false;
  do {
    // we don't need to get elem css if it isn't even overflowing in the first place (performance)
    if (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {
      var elemCSS = css(elem);
      if (elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll') || elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')) {
        if (!elem.getBoundingClientRect || elem === document.body) return getWindowScrollingElement();
        if (gotSelf || includeSelf) return elem;
        gotSelf = true;
      }
    }
    /* jshint boss:true */
  } while (elem = elem.parentNode);
  return getWindowScrollingElement();
}
function extend(dst, src) {
  if (dst && src) {
    for (var key in src) {
      if (src.hasOwnProperty(key)) {
        dst[key] = src[key];
      }
    }
  }
  return dst;
}
function isRectEqual(rect1, rect2) {
  return Math.round(rect1.top) === Math.round(rect2.top) && Math.round(rect1.left) === Math.round(rect2.left) && Math.round(rect1.height) === Math.round(rect2.height) && Math.round(rect1.width) === Math.round(rect2.width);
}
var _throttleTimeout;
function throttle(callback, ms) {
  return function () {
    if (!_throttleTimeout) {
      var args = arguments,
        _this = this;
      if (args.length === 1) {
        callback.call(_this, args[0]);
      } else {
        callback.apply(_this, args);
      }
      _throttleTimeout = setTimeout(function () {
        _throttleTimeout = void 0;
      }, ms);
    }
  };
}
function cancelThrottle() {
  clearTimeout(_throttleTimeout);
  _throttleTimeout = void 0;
}
function scrollBy(el, x, y) {
  el.scrollLeft += x;
  el.scrollTop += y;
}
function clone(el) {
  var Polymer = window.Polymer;
  var $ = window.jQuery || window.Zepto;
  if (Polymer && Polymer.dom) {
    return Polymer.dom(el).cloneNode(true);
  } else if ($) {
    return $(el).clone(true)[0];
  } else {
    return el.cloneNode(true);
  }
}
function setRect(el, rect) {
  css(el, 'position', 'absolute');
  css(el, 'top', rect.top);
  css(el, 'left', rect.left);
  css(el, 'width', rect.width);
  css(el, 'height', rect.height);
}
function unsetRect(el) {
  css(el, 'position', '');
  css(el, 'top', '');
  css(el, 'left', '');
  css(el, 'width', '');
  css(el, 'height', '');
}
var expando = 'Sortable' + new Date().getTime();
function AnimationStateManager() {
  var animationStates = [],
    animationCallbackId;
  return {
    captureAnimationState: function captureAnimationState() {
      animationStates = [];
      if (!this.options.animation) return;
      var children = [].slice.call(this.el.children);
      children.forEach(function (child) {
        if (css(child, 'display') === 'none' || child === Sortable.ghost) return;
        animationStates.push({
          target: child,
          rect: getRect(child)
        });
        var fromRect = _objectSpread2({}, animationStates[animationStates.length - 1].rect); // If animating: compensate for current animation

        if (child.thisAnimationDuration) {
          var childMatrix = matrix(child, true);
          if (childMatrix) {
            fromRect.top -= childMatrix.f;
            fromRect.left -= childMatrix.e;
          }
        }
        child.fromRect = fromRect;
      });
    },
    addAnimationState: function addAnimationState(state) {
      animationStates.push(state);
    },
    removeAnimationState: function removeAnimationState(target) {
      animationStates.splice(indexOfObject(animationStates, {
        target: target
      }), 1);
    },
    animateAll: function animateAll(callback) {
      var _this = this;
      if (!this.options.animation) {
        clearTimeout(animationCallbackId);
        if (typeof callback === 'function') callback();
        return;
      }
      var animating = false,
        animationTime = 0;
      animationStates.forEach(function (state) {
        var time = 0,
          target = state.target,
          fromRect = target.fromRect,
          toRect = getRect(target),
          prevFromRect = target.prevFromRect,
          prevToRect = target.prevToRect,
          animatingRect = state.rect,
          targetMatrix = matrix(target, true);
        if (targetMatrix) {
          // Compensate for current animation
          toRect.top -= targetMatrix.f;
          toRect.left -= targetMatrix.e;
        }
        target.toRect = toRect;
        if (target.thisAnimationDuration) {
          // Could also check if animatingRect is between fromRect and toRect
          if (isRectEqual(prevFromRect, toRect) && !isRectEqual(fromRect, toRect) &&
          // Make sure animatingRect is on line between toRect & fromRect
          (animatingRect.top - toRect.top) / (animatingRect.left - toRect.left) === (fromRect.top - toRect.top) / (fromRect.left - toRect.left)) {
            // If returning to same place as started from animation and on same axis
            time = calculateRealTime(animatingRect, prevFromRect, prevToRect, _this.options);
          }
        } // if fromRect != toRect: animate

        if (!isRectEqual(toRect, fromRect)) {
          target.prevFromRect = fromRect;
          target.prevToRect = toRect;
          if (!time) {
            time = _this.options.animation;
          }
          _this.animate(target, animatingRect, toRect, time);
        }
        if (time) {
          animating = true;
          animationTime = Math.max(animationTime, time);
          clearTimeout(target.animationResetTimer);
          target.animationResetTimer = setTimeout(function () {
            target.animationTime = 0;
            target.prevFromRect = null;
            target.fromRect = null;
            target.prevToRect = null;
            target.thisAnimationDuration = null;
          }, time);
          target.thisAnimationDuration = time;
        }
      });
      clearTimeout(animationCallbackId);
      if (!animating) {
        if (typeof callback === 'function') callback();
      } else {
        animationCallbackId = setTimeout(function () {
          if (typeof callback === 'function') callback();
        }, animationTime);
      }
      animationStates = [];
    },
    animate: function animate(target, currentRect, toRect, duration) {
      if (duration) {
        css(target, 'transition', '');
        css(target, 'transform', '');
        var elMatrix = matrix(this.el),
          scaleX = elMatrix && elMatrix.a,
          scaleY = elMatrix && elMatrix.d,
          translateX = (currentRect.left - toRect.left) / (scaleX || 1),
          translateY = (currentRect.top - toRect.top) / (scaleY || 1);
        target.animatingX = !!translateX;
        target.animatingY = !!translateY;
        css(target, 'transform', 'translate3d(' + translateX + 'px,' + translateY + 'px,0)');
        this.forRepaintDummy = repaint(target); // repaint

        css(target, 'transition', 'transform ' + duration + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));
        css(target, 'transform', 'translate3d(0,0,0)');
        typeof target.animated === 'number' && clearTimeout(target.animated);
        target.animated = setTimeout(function () {
          css(target, 'transition', '');
          css(target, 'transform', '');
          target.animated = false;
          target.animatingX = false;
          target.animatingY = false;
        }, duration);
      }
    }
  };
}
function repaint(target) {
  return target.offsetWidth;
}
function calculateRealTime(animatingRect, fromRect, toRect, options) {
  return Math.sqrt(Math.pow(fromRect.top - animatingRect.top, 2) + Math.pow(fromRect.left - animatingRect.left, 2)) / Math.sqrt(Math.pow(fromRect.top - toRect.top, 2) + Math.pow(fromRect.left - toRect.left, 2)) * options.animation;
}
var plugins = [];
var defaults = {
  initializeByDefault: true
};
var PluginManager = {
  mount: function mount(plugin) {
    // Set default static properties
    for (var option in defaults) {
      if (defaults.hasOwnProperty(option) && !(option in plugin)) {
        plugin[option] = defaults[option];
      }
    }
    plugins.forEach(function (p) {
      if (p.pluginName === plugin.pluginName) {
        throw "Sortable: Cannot mount plugin ".concat(plugin.pluginName, " more than once");
      }
    });
    plugins.push(plugin);
  },
  pluginEvent: function pluginEvent(eventName, sortable, evt) {
    var _this = this;
    this.eventCanceled = false;
    evt.cancel = function () {
      _this.eventCanceled = true;
    };
    var eventNameGlobal = eventName + 'Global';
    plugins.forEach(function (plugin) {
      if (!sortable[plugin.pluginName]) return; // Fire global events if it exists in this sortable

      if (sortable[plugin.pluginName][eventNameGlobal]) {
        sortable[plugin.pluginName][eventNameGlobal](_objectSpread2({
          sortable: sortable
        }, evt));
      } // Only fire plugin event if plugin is enabled in this sortable,
      // and plugin has event defined

      if (sortable.options[plugin.pluginName] && sortable[plugin.pluginName][eventName]) {
        sortable[plugin.pluginName][eventName](_objectSpread2({
          sortable: sortable
        }, evt));
      }
    });
  },
  initializePlugins: function initializePlugins(sortable, el, defaults, options) {
    plugins.forEach(function (plugin) {
      var pluginName = plugin.pluginName;
      if (!sortable.options[pluginName] && !plugin.initializeByDefault) return;
      var initialized = new plugin(sortable, el, sortable.options);
      initialized.sortable = sortable;
      initialized.options = sortable.options;
      sortable[pluginName] = initialized; // Add default options from plugin

      _extends(defaults, initialized.defaults);
    });
    for (var option in sortable.options) {
      if (!sortable.options.hasOwnProperty(option)) continue;
      var modified = this.modifyOption(sortable, option, sortable.options[option]);
      if (typeof modified !== 'undefined') {
        sortable.options[option] = modified;
      }
    }
  },
  getEventProperties: function getEventProperties(name, sortable) {
    var eventProperties = {};
    plugins.forEach(function (plugin) {
      if (typeof plugin.eventProperties !== 'function') return;
      _extends(eventProperties, plugin.eventProperties.call(sortable[plugin.pluginName], name));
    });
    return eventProperties;
  },
  modifyOption: function modifyOption(sortable, name, value) {
    var modifiedValue;
    plugins.forEach(function (plugin) {
      // Plugin must exist on the Sortable
      if (!sortable[plugin.pluginName]) return; // If static option listener exists for this option, call in the context of the Sortable's instance of this plugin

      if (plugin.optionListeners && typeof plugin.optionListeners[name] === 'function') {
        modifiedValue = plugin.optionListeners[name].call(sortable[plugin.pluginName], value);
      }
    });
    return modifiedValue;
  }
};
function dispatchEvent(_ref) {
  var sortable = _ref.sortable,
    rootEl = _ref.rootEl,
    name = _ref.name,
    targetEl = _ref.targetEl,
    cloneEl = _ref.cloneEl,
    toEl = _ref.toEl,
    fromEl = _ref.fromEl,
    oldIndex = _ref.oldIndex,
    newIndex = _ref.newIndex,
    oldDraggableIndex = _ref.oldDraggableIndex,
    newDraggableIndex = _ref.newDraggableIndex,
    originalEvent = _ref.originalEvent,
    putSortable = _ref.putSortable,
    extraEventProperties = _ref.extraEventProperties;
  sortable = sortable || rootEl && rootEl[expando];
  if (!sortable) return;
  var evt,
    options = sortable.options,
    onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1); // Support for new CustomEvent feature

  if (window.CustomEvent && !IE11OrLess && !Edge) {
    evt = new CustomEvent(name, {
      bubbles: true,
      cancelable: true
    });
  } else {
    evt = document.createEvent('Event');
    evt.initEvent(name, true, true);
  }
  evt.to = toEl || rootEl;
  evt.from = fromEl || rootEl;
  evt.item = targetEl || rootEl;
  evt.clone = cloneEl;
  evt.oldIndex = oldIndex;
  evt.newIndex = newIndex;
  evt.oldDraggableIndex = oldDraggableIndex;
  evt.newDraggableIndex = newDraggableIndex;
  evt.originalEvent = originalEvent;
  evt.pullMode = putSortable ? putSortable.lastPutMode : undefined;
  var allEventProperties = _objectSpread2(_objectSpread2({}, extraEventProperties), PluginManager.getEventProperties(name, sortable));
  for (var option in allEventProperties) {
    evt[option] = allEventProperties[option];
  }
  if (rootEl) {
    rootEl.dispatchEvent(evt);
  }
  if (options[onName]) {
    options[onName].call(sortable, evt);
  }
}
var _excluded = ["evt"];
var pluginEvent = function pluginEvent(eventName, sortable) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
    originalEvent = _ref.evt,
    data = _objectWithoutProperties(_ref, _excluded);
  PluginManager.pluginEvent.bind(Sortable)(eventName, sortable, _objectSpread2({
    dragEl: dragEl,
    parentEl: parentEl,
    ghostEl: ghostEl,
    rootEl: rootEl,
    nextEl: nextEl,
    lastDownEl: lastDownEl,
    cloneEl: cloneEl,
    cloneHidden: cloneHidden,
    dragStarted: moved,
    putSortable: putSortable,
    activeSortable: Sortable.active,
    originalEvent: originalEvent,
    oldIndex: oldIndex,
    oldDraggableIndex: oldDraggableIndex,
    newIndex: newIndex,
    newDraggableIndex: newDraggableIndex,
    hideGhostForTarget: _hideGhostForTarget,
    unhideGhostForTarget: _unhideGhostForTarget,
    cloneNowHidden: function cloneNowHidden() {
      cloneHidden = true;
    },
    cloneNowShown: function cloneNowShown() {
      cloneHidden = false;
    },
    dispatchSortableEvent: function dispatchSortableEvent(name) {
      _dispatchEvent({
        sortable: sortable,
        name: name,
        originalEvent: originalEvent
      });
    }
  }, data));
};
function _dispatchEvent(info) {
  dispatchEvent(_objectSpread2({
    putSortable: putSortable,
    cloneEl: cloneEl,
    targetEl: dragEl,
    rootEl: rootEl,
    oldIndex: oldIndex,
    oldDraggableIndex: oldDraggableIndex,
    newIndex: newIndex,
    newDraggableIndex: newDraggableIndex
  }, info));
}
var dragEl,
  parentEl,
  ghostEl,
  rootEl,
  nextEl,
  lastDownEl,
  cloneEl,
  cloneHidden,
  oldIndex,
  newIndex,
  oldDraggableIndex,
  newDraggableIndex,
  activeGroup,
  putSortable,
  awaitingDragStarted = false,
  ignoreNextClick = false,
  sortables = [],
  tapEvt,
  touchEvt,
  lastDx,
  lastDy,
  tapDistanceLeft,
  tapDistanceTop,
  moved,
  lastTarget,
  lastDirection,
  pastFirstInvertThresh = false,
  isCircumstantialInvert = false,
  targetMoveDistance,
  // For positioning ghost absolutely
  ghostRelativeParent,
  ghostRelativeParentInitialScroll = [],
  // (left, top)
  _silent = false,
  savedInputChecked = [];
/** @const */

var documentExists = typeof document !== 'undefined',
  PositionGhostAbsolutely = IOS,
  CSSFloatProperty = Edge || IE11OrLess ? 'cssFloat' : 'float',
  // This will not pass for IE9, because IE9 DnD only works on anchors
  supportDraggable = documentExists && !ChromeForAndroid && !IOS && 'draggable' in document.createElement('div'),
  supportCssPointerEvents = function () {
    if (!documentExists) return; // false when <= IE11

    if (IE11OrLess) {
      return false;
    }
    var el = document.createElement('x');
    el.style.cssText = 'pointer-events:auto';
    return el.style.pointerEvents === 'auto';
  }(),
  _detectDirection = function _detectDirection(el, options) {
    var elCSS = css(el),
      elWidth = parseInt(elCSS.width) - parseInt(elCSS.paddingLeft) - parseInt(elCSS.paddingRight) - parseInt(elCSS.borderLeftWidth) - parseInt(elCSS.borderRightWidth),
      child1 = getChild(el, 0, options),
      child2 = getChild(el, 1, options),
      firstChildCSS = child1 && css(child1),
      secondChildCSS = child2 && css(child2),
      firstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + getRect(child1).width,
      secondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + getRect(child2).width;
    if (elCSS.display === 'flex') {
      return elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse' ? 'vertical' : 'horizontal';
    }
    if (elCSS.display === 'grid') {
      return elCSS.gridTemplateColumns.split(' ').length <= 1 ? 'vertical' : 'horizontal';
    }
    if (child1 && firstChildCSS["float"] && firstChildCSS["float"] !== 'none') {
      var touchingSideChild2 = firstChildCSS["float"] === 'left' ? 'left' : 'right';
      return child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ? 'vertical' : 'horizontal';
    }
    return child1 && (firstChildCSS.display === 'block' || firstChildCSS.display === 'flex' || firstChildCSS.display === 'table' || firstChildCSS.display === 'grid' || firstChildWidth >= elWidth && elCSS[CSSFloatProperty] === 'none' || child2 && elCSS[CSSFloatProperty] === 'none' && firstChildWidth + secondChildWidth > elWidth) ? 'vertical' : 'horizontal';
  },
  _dragElInRowColumn = function _dragElInRowColumn(dragRect, targetRect, vertical) {
    var dragElS1Opp = vertical ? dragRect.left : dragRect.top,
      dragElS2Opp = vertical ? dragRect.right : dragRect.bottom,
      dragElOppLength = vertical ? dragRect.width : dragRect.height,
      targetS1Opp = vertical ? targetRect.left : targetRect.top,
      targetS2Opp = vertical ? targetRect.right : targetRect.bottom,
      targetOppLength = vertical ? targetRect.width : targetRect.height;
    return dragElS1Opp === targetS1Opp || dragElS2Opp === targetS2Opp || dragElS1Opp + dragElOppLength / 2 === targetS1Opp + targetOppLength / 2;
  },
  /**
   * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.
   * @param  {Number} x      X position
   * @param  {Number} y      Y position
   * @return {HTMLElement}   Element of the first found nearest Sortable
   */
  _detectNearestEmptySortable = function _detectNearestEmptySortable(x, y) {
    var ret;
    sortables.some(function (sortable) {
      var threshold = sortable[expando].options.emptyInsertThreshold;
      if (!threshold || lastChild(sortable)) return;
      var rect = getRect(sortable),
        insideHorizontally = x >= rect.left - threshold && x <= rect.right + threshold,
        insideVertically = y >= rect.top - threshold && y <= rect.bottom + threshold;
      if (insideHorizontally && insideVertically) {
        return ret = sortable;
      }
    });
    return ret;
  },
  _prepareGroup = function _prepareGroup(options) {
    function toFn(value, pull) {
      return function (to, from, dragEl, evt) {
        var sameGroup = to.options.group.name && from.options.group.name && to.options.group.name === from.options.group.name;
        if (value == null && (pull || sameGroup)) {
          // Default pull value
          // Default pull and put value if same group
          return true;
        } else if (value == null || value === false) {
          return false;
        } else if (pull && value === 'clone') {
          return value;
        } else if (typeof value === 'function') {
          return toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);
        } else {
          var otherGroup = (pull ? to : from).options.group.name;
          return value === true || typeof value === 'string' && value === otherGroup || value.join && value.indexOf(otherGroup) > -1;
        }
      };
    }
    var group = {};
    var originalGroup = options.group;
    if (!originalGroup || _typeof(originalGroup) != 'object') {
      originalGroup = {
        name: originalGroup
      };
    }
    group.name = originalGroup.name;
    group.checkPull = toFn(originalGroup.pull, true);
    group.checkPut = toFn(originalGroup.put);
    group.revertClone = originalGroup.revertClone;
    options.group = group;
  },
  _hideGhostForTarget = function _hideGhostForTarget() {
    if (!supportCssPointerEvents && ghostEl) {
      css(ghostEl, 'display', 'none');
    }
  },
  _unhideGhostForTarget = function _unhideGhostForTarget() {
    if (!supportCssPointerEvents && ghostEl) {
      css(ghostEl, 'display', '');
    }
  }; // #1184 fix - Prevent click event on fallback if dragged but item not changed position

if (documentExists && !ChromeForAndroid) {
  document.addEventListener('click', function (evt) {
    if (ignoreNextClick) {
      evt.preventDefault();
      evt.stopPropagation && evt.stopPropagation();
      evt.stopImmediatePropagation && evt.stopImmediatePropagation();
      ignoreNextClick = false;
      return false;
    }
  }, true);
}
var nearestEmptyInsertDetectEvent = function nearestEmptyInsertDetectEvent(evt) {
  if (dragEl) {
    evt = evt.touches ? evt.touches[0] : evt;
    var nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);
    if (nearest) {
      // Create imitation event
      var event = {};
      for (var i in evt) {
        if (evt.hasOwnProperty(i)) {
          event[i] = evt[i];
        }
      }
      event.target = event.rootEl = nearest;
      event.preventDefault = void 0;
      event.stopPropagation = void 0;
      nearest[expando]._onDragOver(event);
    }
  }
};
var _checkOutsideTargetEl = function _checkOutsideTargetEl(evt) {
  if (dragEl) {
    dragEl.parentNode[expando]._isOutsideThisEl(evt.target);
  }
};
/**
 * @class  Sortable
 * @param  {HTMLElement}  el
 * @param  {Object}       [options]
 */

function Sortable(el, options) {
  if (!(el && el.nodeType && el.nodeType === 1)) {
    throw "Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(el));
  }
  this.el = el; // root element

  this.options = options = _extends({}, options); // Export instance

  el[expando] = this;
  var defaults = {
    group: null,
    sort: true,
    disabled: false,
    store: null,
    handle: null,
    draggable: /^[uo]l$/i.test(el.nodeName) ? '>li' : '>*',
    swapThreshold: 1,
    // percentage; 0 <= x <= 1
    invertSwap: false,
    // invert always
    invertedSwapThreshold: null,
    // will be set to same as swapThreshold if default
    removeCloneOnHide: true,
    direction: function direction() {
      return _detectDirection(el, this.options);
    },
    ghostClass: 'sortable-ghost',
    chosenClass: 'sortable-chosen',
    dragClass: 'sortable-drag',
    ignore: 'a, img',
    filter: null,
    preventOnFilter: true,
    animation: 0,
    easing: null,
    setData: function setData(dataTransfer, dragEl) {
      dataTransfer.setData('Text', dragEl.textContent);
    },
    dropBubble: false,
    dragoverBubble: false,
    dataIdAttr: 'data-id',
    delay: 0,
    delayOnTouchOnly: false,
    touchStartThreshold: (Number.parseInt ? Number : window).parseInt(window.devicePixelRatio, 10) || 1,
    forceFallback: false,
    fallbackClass: 'sortable-fallback',
    fallbackOnBody: false,
    fallbackTolerance: 0,
    fallbackOffset: {
      x: 0,
      y: 0
    },
    supportPointer: Sortable.supportPointer !== false && 'PointerEvent' in window && !Safari,
    emptyInsertThreshold: 5
  };
  PluginManager.initializePlugins(this, el, defaults); // Set default options

  for (var name in defaults) {
    !(name in options) && (options[name] = defaults[name]);
  }
  _prepareGroup(options); // Bind all private methods

  for (var fn in this) {
    if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
      this[fn] = this[fn].bind(this);
    }
  } // Setup drag mode

  this.nativeDraggable = options.forceFallback ? false : supportDraggable;
  if (this.nativeDraggable) {
    // Touch start threshold cannot be greater than the native dragstart threshold
    this.options.touchStartThreshold = 1;
  } // Bind events

  if (options.supportPointer) {
    on(el, 'pointerdown', this._onTapStart);
  } else {
    on(el, 'mousedown', this._onTapStart);
    on(el, 'touchstart', this._onTapStart);
  }
  if (this.nativeDraggable) {
    on(el, 'dragover', this);
    on(el, 'dragenter', this);
  }
  sortables.push(this.el); // Restore sorting

  options.store && options.store.get && this.sort(options.store.get(this) || []); // Add animation state manager

  _extends(this, AnimationStateManager());
}
Sortable.prototype = /** @lends Sortable.prototype */
{
  constructor: Sortable,
  _isOutsideThisEl: function _isOutsideThisEl(target) {
    if (!this.el.contains(target) && target !== this.el) {
      lastTarget = null;
    }
  },
  _getDirection: function _getDirection(evt, target) {
    return typeof this.options.direction === 'function' ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;
  },
  _onTapStart: function _onTapStart( /** Event|TouchEvent */
  evt) {
    if (!evt.cancelable) return;
    var _this = this,
      el = this.el,
      options = this.options,
      preventOnFilter = options.preventOnFilter,
      type = evt.type,
      touch = evt.touches && evt.touches[0] || evt.pointerType && evt.pointerType === 'touch' && evt,
      target = (touch || evt).target,
      originalTarget = evt.target.shadowRoot && (evt.path && evt.path[0] || evt.composedPath && evt.composedPath()[0]) || target,
      filter = options.filter;
    _saveInputCheckedState(el); // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.

    if (dragEl) {
      return;
    }
    if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {
      return; // only left button and enabled
    } // cancel dnd if original target is content editable

    if (originalTarget.isContentEditable) {
      return;
    } // Safari ignores further event handling after mousedown

    if (!this.nativeDraggable && Safari && target && target.tagName.toUpperCase() === 'SELECT') {
      return;
    }
    target = closest(target, options.draggable, el, false);
    if (target && target.animated) {
      return;
    }
    if (lastDownEl === target) {
      // Ignoring duplicate `down`
      return;
    } // Get the index of the dragged element within its parent

    oldIndex = index(target);
    oldDraggableIndex = index(target, options.draggable); // Check filter

    if (typeof filter === 'function') {
      if (filter.call(this, evt, target, this)) {
        _dispatchEvent({
          sortable: _this,
          rootEl: originalTarget,
          name: 'filter',
          targetEl: target,
          toEl: el,
          fromEl: el
        });
        pluginEvent('filter', _this, {
          evt: evt
        });
        preventOnFilter && evt.cancelable && evt.preventDefault();
        return; // cancel dnd
      }
    } else if (filter) {
      filter = filter.split(',').some(function (criteria) {
        criteria = closest(originalTarget, criteria.trim(), el, false);
        if (criteria) {
          _dispatchEvent({
            sortable: _this,
            rootEl: criteria,
            name: 'filter',
            targetEl: target,
            fromEl: el,
            toEl: el
          });
          pluginEvent('filter', _this, {
            evt: evt
          });
          return true;
        }
      });
      if (filter) {
        preventOnFilter && evt.cancelable && evt.preventDefault();
        return; // cancel dnd
      }
    }

    if (options.handle && !closest(originalTarget, options.handle, el, false)) {
      return;
    } // Prepare `dragstart`

    this._prepareDragStart(evt, touch, target);
  },
  _prepareDragStart: function _prepareDragStart( /** Event */
  evt, /** Touch */
  touch, /** HTMLElement */
  target) {
    var _this = this,
      el = _this.el,
      options = _this.options,
      ownerDocument = el.ownerDocument,
      dragStartFn;
    if (target && !dragEl && target.parentNode === el) {
      var dragRect = getRect(target);
      rootEl = el;
      dragEl = target;
      parentEl = dragEl.parentNode;
      nextEl = dragEl.nextSibling;
      lastDownEl = target;
      activeGroup = options.group;
      Sortable.dragged = dragEl;
      tapEvt = {
        target: dragEl,
        clientX: (touch || evt).clientX,
        clientY: (touch || evt).clientY
      };
      tapDistanceLeft = tapEvt.clientX - dragRect.left;
      tapDistanceTop = tapEvt.clientY - dragRect.top;
      this._lastX = (touch || evt).clientX;
      this._lastY = (touch || evt).clientY;
      dragEl.style['will-change'] = 'all';
      dragStartFn = function dragStartFn() {
        pluginEvent('delayEnded', _this, {
          evt: evt
        });
        if (Sortable.eventCanceled) {
          _this._onDrop();
          return;
        } // Delayed drag has been triggered
        // we can re-enable the events: touchmove/mousemove

        _this._disableDelayedDragEvents();
        if (!FireFox && _this.nativeDraggable) {
          dragEl.draggable = true;
        } // Bind the events: dragstart/dragend

        _this._triggerDragStart(evt, touch); // Drag start event

        _dispatchEvent({
          sortable: _this,
          name: 'choose',
          originalEvent: evt
        }); // Chosen item

        toggleClass(dragEl, options.chosenClass, true);
      }; // Disable "draggable"

      options.ignore.split(',').forEach(function (criteria) {
        find(dragEl, criteria.trim(), _disableDraggable);
      });
      on(ownerDocument, 'dragover', nearestEmptyInsertDetectEvent);
      on(ownerDocument, 'mousemove', nearestEmptyInsertDetectEvent);
      on(ownerDocument, 'touchmove', nearestEmptyInsertDetectEvent);
      on(ownerDocument, 'mouseup', _this._onDrop);
      on(ownerDocument, 'touchend', _this._onDrop);
      on(ownerDocument, 'touchcancel', _this._onDrop); // Make dragEl draggable (must be before delay for FireFox)

      if (FireFox && this.nativeDraggable) {
        this.options.touchStartThreshold = 4;
        dragEl.draggable = true;
      }
      pluginEvent('delayStart', this, {
        evt: evt
      }); // Delay is impossible for native DnD in Edge or IE

      if (options.delay && (!options.delayOnTouchOnly || touch) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {
        if (Sortable.eventCanceled) {
          this._onDrop();
          return;
        } // If the user moves the pointer or let go the click or touch
        // before the delay has been reached:
        // disable the delayed drag

        on(ownerDocument, 'mouseup', _this._disableDelayedDrag);
        on(ownerDocument, 'touchend', _this._disableDelayedDrag);
        on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);
        on(ownerDocument, 'mousemove', _this._delayedDragTouchMoveHandler);
        on(ownerDocument, 'touchmove', _this._delayedDragTouchMoveHandler);
        options.supportPointer && on(ownerDocument, 'pointermove', _this._delayedDragTouchMoveHandler);
        _this._dragStartTimer = setTimeout(dragStartFn, options.delay);
      } else {
        dragStartFn();
      }
    }
  },
  _delayedDragTouchMoveHandler: function _delayedDragTouchMoveHandler( /** TouchEvent|PointerEvent **/
  e) {
    var touch = e.touches ? e.touches[0] : e;
    if (Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))) {
      this._disableDelayedDrag();
    }
  },
  _disableDelayedDrag: function _disableDelayedDrag() {
    dragEl && _disableDraggable(dragEl);
    clearTimeout(this._dragStartTimer);
    this._disableDelayedDragEvents();
  },
  _disableDelayedDragEvents: function _disableDelayedDragEvents() {
    var ownerDocument = this.el.ownerDocument;
    off(ownerDocument, 'mouseup', this._disableDelayedDrag);
    off(ownerDocument, 'touchend', this._disableDelayedDrag);
    off(ownerDocument, 'touchcancel', this._disableDelayedDrag);
    off(ownerDocument, 'mousemove', this._delayedDragTouchMoveHandler);
    off(ownerDocument, 'touchmove', this._delayedDragTouchMoveHandler);
    off(ownerDocument, 'pointermove', this._delayedDragTouchMoveHandler);
  },
  _triggerDragStart: function _triggerDragStart( /** Event */
  evt, /** Touch */
  touch) {
    touch = touch || evt.pointerType == 'touch' && evt;
    if (!this.nativeDraggable || touch) {
      if (this.options.supportPointer) {
        on(document, 'pointermove', this._onTouchMove);
      } else if (touch) {
        on(document, 'touchmove', this._onTouchMove);
      } else {
        on(document, 'mousemove', this._onTouchMove);
      }
    } else {
      on(dragEl, 'dragend', this);
      on(rootEl, 'dragstart', this._onDragStart);
    }
    try {
      if (document.selection) {
        // Timeout neccessary for IE9
        _nextTick(function () {
          document.selection.empty();
        });
      } else {
        window.getSelection().removeAllRanges();
      }
    } catch (err) {}
  },
  _dragStarted: function _dragStarted(fallback, evt) {
    awaitingDragStarted = false;
    if (rootEl && dragEl) {
      pluginEvent('dragStarted', this, {
        evt: evt
      });
      if (this.nativeDraggable) {
        on(document, 'dragover', _checkOutsideTargetEl);
      }
      var options = this.options; // Apply effect

      !fallback && toggleClass(dragEl, options.dragClass, false);
      toggleClass(dragEl, options.ghostClass, true);
      Sortable.active = this;
      fallback && this._appendGhost(); // Drag start event

      _dispatchEvent({
        sortable: this,
        name: 'start',
        originalEvent: evt
      });
    } else {
      this._nulling();
    }
  },
  _emulateDragOver: function _emulateDragOver() {
    if (touchEvt) {
      this._lastX = touchEvt.clientX;
      this._lastY = touchEvt.clientY;
      _hideGhostForTarget();
      var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
      var parent = target;
      while (target && target.shadowRoot) {
        target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
        if (target === parent) break;
        parent = target;
      }
      dragEl.parentNode[expando]._isOutsideThisEl(target);
      if (parent) {
        do {
          if (parent[expando]) {
            var inserted = void 0;
            inserted = parent[expando]._onDragOver({
              clientX: touchEvt.clientX,
              clientY: touchEvt.clientY,
              target: target,
              rootEl: parent
            });
            if (inserted && !this.options.dragoverBubble) {
              break;
            }
          }
          target = parent; // store last element
        }
        /* jshint boss:true */ while (parent = parent.parentNode);
      }
      _unhideGhostForTarget();
    }
  },
  _onTouchMove: function _onTouchMove( /**TouchEvent*/
  evt) {
    if (tapEvt) {
      var options = this.options,
        fallbackTolerance = options.fallbackTolerance,
        fallbackOffset = options.fallbackOffset,
        touch = evt.touches ? evt.touches[0] : evt,
        ghostMatrix = ghostEl && matrix(ghostEl, true),
        scaleX = ghostEl && ghostMatrix && ghostMatrix.a,
        scaleY = ghostEl && ghostMatrix && ghostMatrix.d,
        relativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && getRelativeScrollOffset(ghostRelativeParent),
        dx = (touch.clientX - tapEvt.clientX + fallbackOffset.x) / (scaleX || 1) + (relativeScrollOffset ? relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0] : 0) / (scaleX || 1),
        dy = (touch.clientY - tapEvt.clientY + fallbackOffset.y) / (scaleY || 1) + (relativeScrollOffset ? relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1] : 0) / (scaleY || 1); // only set the status to dragging, when we are actually dragging

      if (!Sortable.active && !awaitingDragStarted) {
        if (fallbackTolerance && Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) < fallbackTolerance) {
          return;
        }
        this._onDragStart(evt, true);
      }
      if (ghostEl) {
        if (ghostMatrix) {
          ghostMatrix.e += dx - (lastDx || 0);
          ghostMatrix.f += dy - (lastDy || 0);
        } else {
          ghostMatrix = {
            a: 1,
            b: 0,
            c: 0,
            d: 1,
            e: dx,
            f: dy
          };
        }
        var cssMatrix = "matrix(".concat(ghostMatrix.a, ",").concat(ghostMatrix.b, ",").concat(ghostMatrix.c, ",").concat(ghostMatrix.d, ",").concat(ghostMatrix.e, ",").concat(ghostMatrix.f, ")");
        css(ghostEl, 'webkitTransform', cssMatrix);
        css(ghostEl, 'mozTransform', cssMatrix);
        css(ghostEl, 'msTransform', cssMatrix);
        css(ghostEl, 'transform', cssMatrix);
        lastDx = dx;
        lastDy = dy;
        touchEvt = touch;
      }
      evt.cancelable && evt.preventDefault();
    }
  },
  _appendGhost: function _appendGhost() {
    // Bug if using scale(): https://stackoverflow.com/questions/2637058
    // Not being adjusted for
    if (!ghostEl) {
      var container = this.options.fallbackOnBody ? document.body : rootEl,
        rect = getRect(dragEl, true, PositionGhostAbsolutely, true, container),
        options = this.options; // Position absolutely

      if (PositionGhostAbsolutely) {
        // Get relatively positioned parent
        ghostRelativeParent = container;
        while (css(ghostRelativeParent, 'position') === 'static' && css(ghostRelativeParent, 'transform') === 'none' && ghostRelativeParent !== document) {
          ghostRelativeParent = ghostRelativeParent.parentNode;
        }
        if (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {
          if (ghostRelativeParent === document) ghostRelativeParent = getWindowScrollingElement();
          rect.top += ghostRelativeParent.scrollTop;
          rect.left += ghostRelativeParent.scrollLeft;
        } else {
          ghostRelativeParent = getWindowScrollingElement();
        }
        ghostRelativeParentInitialScroll = getRelativeScrollOffset(ghostRelativeParent);
      }
      ghostEl = dragEl.cloneNode(true);
      toggleClass(ghostEl, options.ghostClass, false);
      toggleClass(ghostEl, options.fallbackClass, true);
      toggleClass(ghostEl, options.dragClass, true);
      css(ghostEl, 'transition', '');
      css(ghostEl, 'transform', '');
      css(ghostEl, 'box-sizing', 'border-box');
      css(ghostEl, 'margin', 0);
      css(ghostEl, 'top', rect.top);
      css(ghostEl, 'left', rect.left);
      css(ghostEl, 'width', rect.width);
      css(ghostEl, 'height', rect.height);
      css(ghostEl, 'opacity', '0.8');
      css(ghostEl, 'position', PositionGhostAbsolutely ? 'absolute' : 'fixed');
      css(ghostEl, 'zIndex', '100000');
      css(ghostEl, 'pointerEvents', 'none');
      Sortable.ghost = ghostEl;
      container.appendChild(ghostEl); // Set transform-origin

      css(ghostEl, 'transform-origin', tapDistanceLeft / parseInt(ghostEl.style.width) * 100 + '% ' + tapDistanceTop / parseInt(ghostEl.style.height) * 100 + '%');
    }
  },
  _onDragStart: function _onDragStart( /**Event*/
  evt, /**boolean*/
  fallback) {
    var _this = this;
    var dataTransfer = evt.dataTransfer;
    var options = _this.options;
    pluginEvent('dragStart', this, {
      evt: evt
    });
    if (Sortable.eventCanceled) {
      this._onDrop();
      return;
    }
    pluginEvent('setupClone', this);
    if (!Sortable.eventCanceled) {
      cloneEl = clone(dragEl);
      cloneEl.removeAttribute("id");
      cloneEl.draggable = false;
      cloneEl.style['will-change'] = '';
      this._hideClone();
      toggleClass(cloneEl, this.options.chosenClass, false);
      Sortable.clone = cloneEl;
    } // #1143: IFrame support workaround

    _this.cloneId = _nextTick(function () {
      pluginEvent('clone', _this);
      if (Sortable.eventCanceled) return;
      if (!_this.options.removeCloneOnHide) {
        rootEl.insertBefore(cloneEl, dragEl);
      }
      _this._hideClone();
      _dispatchEvent({
        sortable: _this,
        name: 'clone'
      });
    });
    !fallback && toggleClass(dragEl, options.dragClass, true); // Set proper drop events

    if (fallback) {
      ignoreNextClick = true;
      _this._loopId = setInterval(_this._emulateDragOver, 50);
    } else {
      // Undo what was set in _prepareDragStart before drag started
      off(document, 'mouseup', _this._onDrop);
      off(document, 'touchend', _this._onDrop);
      off(document, 'touchcancel', _this._onDrop);
      if (dataTransfer) {
        dataTransfer.effectAllowed = 'move';
        options.setData && options.setData.call(_this, dataTransfer, dragEl);
      }
      on(document, 'drop', _this); // #1276 fix:

      css(dragEl, 'transform', 'translateZ(0)');
    }
    awaitingDragStarted = true;
    _this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));
    on(document, 'selectstart', _this);
    moved = true;
    if (Safari) {
      css(document.body, 'user-select', 'none');
    }
  },
  // Returns true - if no further action is needed (either inserted or another condition)
  _onDragOver: function _onDragOver( /**Event*/
  evt) {
    var el = this.el,
      target = evt.target,
      dragRect,
      targetRect,
      revert,
      options = this.options,
      group = options.group,
      activeSortable = Sortable.active,
      isOwner = activeGroup === group,
      canSort = options.sort,
      fromSortable = putSortable || activeSortable,
      vertical,
      _this = this,
      completedFired = false;
    if (_silent) return;
    function dragOverEvent(name, extra) {
      pluginEvent(name, _this, _objectSpread2({
        evt: evt,
        isOwner: isOwner,
        axis: vertical ? 'vertical' : 'horizontal',
        revert: revert,
        dragRect: dragRect,
        targetRect: targetRect,
        canSort: canSort,
        fromSortable: fromSortable,
        target: target,
        completed: completed,
        onMove: function onMove(target, after) {
          return _onMove(rootEl, el, dragEl, dragRect, target, getRect(target), evt, after);
        },
        changed: changed
      }, extra));
    } // Capture animation state

    function capture() {
      dragOverEvent('dragOverAnimationCapture');
      _this.captureAnimationState();
      if (_this !== fromSortable) {
        fromSortable.captureAnimationState();
      }
    } // Return invocation when dragEl is inserted (or completed)

    function completed(insertion) {
      dragOverEvent('dragOverCompleted', {
        insertion: insertion
      });
      if (insertion) {
        // Clones must be hidden before folding animation to capture dragRectAbsolute properly
        if (isOwner) {
          activeSortable._hideClone();
        } else {
          activeSortable._showClone(_this);
        }
        if (_this !== fromSortable) {
          // Set ghost class to new sortable's ghost class
          toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);
          toggleClass(dragEl, options.ghostClass, true);
        }
        if (putSortable !== _this && _this !== Sortable.active) {
          putSortable = _this;
        } else if (_this === Sortable.active && putSortable) {
          putSortable = null;
        } // Animation

        if (fromSortable === _this) {
          _this._ignoreWhileAnimating = target;
        }
        _this.animateAll(function () {
          dragOverEvent('dragOverAnimationComplete');
          _this._ignoreWhileAnimating = null;
        });
        if (_this !== fromSortable) {
          fromSortable.animateAll();
          fromSortable._ignoreWhileAnimating = null;
        }
      } // Null lastTarget if it is not inside a previously swapped element

      if (target === dragEl && !dragEl.animated || target === el && !target.animated) {
        lastTarget = null;
      } // no bubbling and not fallback

      if (!options.dragoverBubble && !evt.rootEl && target !== document) {
        dragEl.parentNode[expando]._isOutsideThisEl(evt.target); // Do not detect for empty insert if already inserted

        !insertion && nearestEmptyInsertDetectEvent(evt);
      }
      !options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();
      return completedFired = true;
    } // Call when dragEl has been inserted

    function changed() {
      newIndex = index(dragEl);
      newDraggableIndex = index(dragEl, options.draggable);
      _dispatchEvent({
        sortable: _this,
        name: 'change',
        toEl: el,
        newIndex: newIndex,
        newDraggableIndex: newDraggableIndex,
        originalEvent: evt
      });
    }
    if (evt.preventDefault !== void 0) {
      evt.cancelable && evt.preventDefault();
    }
    target = closest(target, options.draggable, el, true);
    dragOverEvent('dragOver');
    if (Sortable.eventCanceled) return completedFired;
    if (dragEl.contains(evt.target) || target.animated && target.animatingX && target.animatingY || _this._ignoreWhileAnimating === target) {
      return completed(false);
    }
    ignoreNextClick = false;
    if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = parentEl !== rootEl) // Reverting item into the original list
    : putSortable === this || (this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt))) {
      vertical = this._getDirection(evt, target) === 'vertical';
      dragRect = getRect(dragEl);
      dragOverEvent('dragOverValid');
      if (Sortable.eventCanceled) return completedFired;
      if (revert) {
        parentEl = rootEl; // actualization

        capture();
        this._hideClone();
        dragOverEvent('revert');
        if (!Sortable.eventCanceled) {
          if (nextEl) {
            rootEl.insertBefore(dragEl, nextEl);
          } else {
            rootEl.appendChild(dragEl);
          }
        }
        return completed(true);
      }
      var elLastChild = lastChild(el, options.draggable);
      if (!elLastChild || _ghostIsLast(evt, vertical, this) && !elLastChild.animated) {
        // Insert to end of list
        // If already at end of list: Do not insert
        if (elLastChild === dragEl) {
          return completed(false);
        } // if there is a last element, it is the target

        if (elLastChild && el === evt.target) {
          target = elLastChild;
        }
        if (target) {
          targetRect = getRect(target);
        }
        if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {
          capture();
          if (elLastChild && elLastChild.nextSibling) {
            // the last draggable element is not the last node
            el.insertBefore(dragEl, elLastChild.nextSibling);
          } else {
            el.appendChild(dragEl);
          }
          parentEl = el; // actualization

          changed();
          return completed(true);
        }
      } else if (elLastChild && _ghostIsFirst(evt, vertical, this)) {
        // Insert to start of list
        var firstChild = getChild(el, 0, options, true);
        if (firstChild === dragEl) {
          return completed(false);
        }
        target = firstChild;
        targetRect = getRect(target);
        if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, false) !== false) {
          capture();
          el.insertBefore(dragEl, firstChild);
          parentEl = el; // actualization

          changed();
          return completed(true);
        }
      } else if (target.parentNode === el) {
        targetRect = getRect(target);
        var direction = 0,
          targetBeforeFirstSwap,
          differentLevel = dragEl.parentNode !== el,
          differentRowCol = !_dragElInRowColumn(dragEl.animated && dragEl.toRect || dragRect, target.animated && target.toRect || targetRect, vertical),
          side1 = vertical ? 'top' : 'left',
          scrolledPastTop = isScrolledPast(target, 'top', 'top') || isScrolledPast(dragEl, 'top', 'top'),
          scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;
        if (lastTarget !== target) {
          targetBeforeFirstSwap = targetRect[side1];
          pastFirstInvertThresh = false;
          isCircumstantialInvert = !differentRowCol && options.invertSwap || differentLevel;
        }
        direction = _getSwapDirection(evt, target, targetRect, vertical, differentRowCol ? 1 : options.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold, isCircumstantialInvert, lastTarget === target);
        var sibling;
        if (direction !== 0) {
          // Check if target is beside dragEl in respective direction (ignoring hidden elements)
          var dragIndex = index(dragEl);
          do {
            dragIndex -= direction;
            sibling = parentEl.children[dragIndex];
          } while (sibling && (css(sibling, 'display') === 'none' || sibling === ghostEl));
        } // If dragEl is already beside target: Do not insert

        if (direction === 0 || sibling === target) {
          return completed(false);
        }
        lastTarget = target;
        lastDirection = direction;
        var nextSibling = target.nextElementSibling,
          after = false;
        after = direction === 1;
        var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);
        if (moveVector !== false) {
          if (moveVector === 1 || moveVector === -1) {
            after = moveVector === 1;
          }
          _silent = true;
          setTimeout(_unsilent, 30);
          capture();
          if (after && !nextSibling) {
            el.appendChild(dragEl);
          } else {
            target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
          } // Undo chrome's scroll adjustment (has no effect on other browsers)

          if (scrolledPastTop) {
            scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);
          }
          parentEl = dragEl.parentNode; // actualization
          // must be done before animation

          if (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {
            targetMoveDistance = Math.abs(targetBeforeFirstSwap - getRect(target)[side1]);
          }
          changed();
          return completed(true);
        }
      }
      if (el.contains(dragEl)) {
        return completed(false);
      }
    }
    return false;
  },
  _ignoreWhileAnimating: null,
  _offMoveEvents: function _offMoveEvents() {
    off(document, 'mousemove', this._onTouchMove);
    off(document, 'touchmove', this._onTouchMove);
    off(document, 'pointermove', this._onTouchMove);
    off(document, 'dragover', nearestEmptyInsertDetectEvent);
    off(document, 'mousemove', nearestEmptyInsertDetectEvent);
    off(document, 'touchmove', nearestEmptyInsertDetectEvent);
  },
  _offUpEvents: function _offUpEvents() {
    var ownerDocument = this.el.ownerDocument;
    off(ownerDocument, 'mouseup', this._onDrop);
    off(ownerDocument, 'touchend', this._onDrop);
    off(ownerDocument, 'pointerup', this._onDrop);
    off(ownerDocument, 'touchcancel', this._onDrop);
    off(document, 'selectstart', this);
  },
  _onDrop: function _onDrop( /**Event*/
  evt) {
    var el = this.el,
      options = this.options; // Get the index of the dragged element within its parent

    newIndex = index(dragEl);
    newDraggableIndex = index(dragEl, options.draggable);
    pluginEvent('drop', this, {
      evt: evt
    });
    parentEl = dragEl && dragEl.parentNode; // Get again after plugin event

    newIndex = index(dragEl);
    newDraggableIndex = index(dragEl, options.draggable);
    if (Sortable.eventCanceled) {
      this._nulling();
      return;
    }
    awaitingDragStarted = false;
    isCircumstantialInvert = false;
    pastFirstInvertThresh = false;
    clearInterval(this._loopId);
    clearTimeout(this._dragStartTimer);
    _cancelNextTick(this.cloneId);
    _cancelNextTick(this._dragStartId); // Unbind events

    if (this.nativeDraggable) {
      off(document, 'drop', this);
      off(el, 'dragstart', this._onDragStart);
    }
    this._offMoveEvents();
    this._offUpEvents();
    if (Safari) {
      css(document.body, 'user-select', '');
    }
    css(dragEl, 'transform', '');
    if (evt) {
      if (moved) {
        evt.cancelable && evt.preventDefault();
        !options.dropBubble && evt.stopPropagation();
      }
      ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);
      if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {
        // Remove clone(s)
        cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);
      }
      if (dragEl) {
        if (this.nativeDraggable) {
          off(dragEl, 'dragend', this);
        }
        _disableDraggable(dragEl);
        dragEl.style['will-change'] = ''; // Remove classes
        // ghostClass is added in dragStarted

        if (moved && !awaitingDragStarted) {
          toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);
        }
        toggleClass(dragEl, this.options.chosenClass, false); // Drag stop event

        _dispatchEvent({
          sortable: this,
          name: 'unchoose',
          toEl: parentEl,
          newIndex: null,
          newDraggableIndex: null,
          originalEvent: evt
        });
        if (rootEl !== parentEl) {
          if (newIndex >= 0) {
            // Add event
            _dispatchEvent({
              rootEl: parentEl,
              name: 'add',
              toEl: parentEl,
              fromEl: rootEl,
              originalEvent: evt
            }); // Remove event

            _dispatchEvent({
              sortable: this,
              name: 'remove',
              toEl: parentEl,
              originalEvent: evt
            }); // drag from one list and drop into another

            _dispatchEvent({
              rootEl: parentEl,
              name: 'sort',
              toEl: parentEl,
              fromEl: rootEl,
              originalEvent: evt
            });
            _dispatchEvent({
              sortable: this,
              name: 'sort',
              toEl: parentEl,
              originalEvent: evt
            });
          }
          putSortable && putSortable.save();
        } else {
          if (newIndex !== oldIndex) {
            if (newIndex >= 0) {
              // drag & drop within the same list
              _dispatchEvent({
                sortable: this,
                name: 'update',
                toEl: parentEl,
                originalEvent: evt
              });
              _dispatchEvent({
                sortable: this,
                name: 'sort',
                toEl: parentEl,
                originalEvent: evt
              });
            }
          }
        }
        if (Sortable.active) {
          /* jshint eqnull:true */
          if (newIndex == null || newIndex === -1) {
            newIndex = oldIndex;
            newDraggableIndex = oldDraggableIndex;
          }
          _dispatchEvent({
            sortable: this,
            name: 'end',
            toEl: parentEl,
            originalEvent: evt
          }); // Save sorting

          this.save();
        }
      }
    }
    this._nulling();
  },
  _nulling: function _nulling() {
    pluginEvent('nulling', this);
    rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = cloneHidden = tapEvt = touchEvt = moved = newIndex = newDraggableIndex = oldIndex = oldDraggableIndex = lastTarget = lastDirection = putSortable = activeGroup = Sortable.dragged = Sortable.ghost = Sortable.clone = Sortable.active = null;
    savedInputChecked.forEach(function (el) {
      el.checked = true;
    });
    savedInputChecked.length = lastDx = lastDy = 0;
  },
  handleEvent: function handleEvent( /**Event*/
  evt) {
    switch (evt.type) {
      case 'drop':
      case 'dragend':
        this._onDrop(evt);
        break;
      case 'dragenter':
      case 'dragover':
        if (dragEl) {
          this._onDragOver(evt);
          _globalDragOver(evt);
        }
        break;
      case 'selectstart':
        evt.preventDefault();
        break;
    }
  },
  /**
   * Serializes the item into an array of string.
   * @returns {String[]}
   */
  toArray: function toArray() {
    var order = [],
      el,
      children = this.el.children,
      i = 0,
      n = children.length,
      options = this.options;
    for (; i < n; i++) {
      el = children[i];
      if (closest(el, options.draggable, this.el, false)) {
        order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
      }
    }
    return order;
  },
  /**
   * Sorts the elements according to the array.
   * @param  {String[]}  order  order of the items
   */
  sort: function sort(order, useAnimation) {
    var items = {},
      rootEl = this.el;
    this.toArray().forEach(function (id, i) {
      var el = rootEl.children[i];
      if (closest(el, this.options.draggable, rootEl, false)) {
        items[id] = el;
      }
    }, this);
    useAnimation && this.captureAnimationState();
    order.forEach(function (id) {
      if (items[id]) {
        rootEl.removeChild(items[id]);
        rootEl.appendChild(items[id]);
      }
    });
    useAnimation && this.animateAll();
  },
  /**
   * Save the current sorting
   */
  save: function save() {
    var store = this.options.store;
    store && store.set && store.set(this);
  },
  /**
   * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
   * @param   {HTMLElement}  el
   * @param   {String}       [selector]  default: `options.draggable`
   * @returns {HTMLElement|null}
   */
  closest: function closest$1(el, selector) {
    return closest(el, selector || this.options.draggable, this.el, false);
  },
  /**
   * Set/get option
   * @param   {string} name
   * @param   {*}      [value]
   * @returns {*}
   */
  option: function option(name, value) {
    var options = this.options;
    if (value === void 0) {
      return options[name];
    } else {
      var modifiedValue = PluginManager.modifyOption(this, name, value);
      if (typeof modifiedValue !== 'undefined') {
        options[name] = modifiedValue;
      } else {
        options[name] = value;
      }
      if (name === 'group') {
        _prepareGroup(options);
      }
    }
  },
  /**
   * Destroy
   */
  destroy: function destroy() {
    pluginEvent('destroy', this);
    var el = this.el;
    el[expando] = null;
    off(el, 'mousedown', this._onTapStart);
    off(el, 'touchstart', this._onTapStart);
    off(el, 'pointerdown', this._onTapStart);
    if (this.nativeDraggable) {
      off(el, 'dragover', this);
      off(el, 'dragenter', this);
    } // Remove draggable attributes

    Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {
      el.removeAttribute('draggable');
    });
    this._onDrop();
    this._disableDelayedDragEvents();
    sortables.splice(sortables.indexOf(this.el), 1);
    this.el = el = null;
  },
  _hideClone: function _hideClone() {
    if (!cloneHidden) {
      pluginEvent('hideClone', this);
      if (Sortable.eventCanceled) return;
      css(cloneEl, 'display', 'none');
      if (this.options.removeCloneOnHide && cloneEl.parentNode) {
        cloneEl.parentNode.removeChild(cloneEl);
      }
      cloneHidden = true;
    }
  },
  _showClone: function _showClone(putSortable) {
    if (putSortable.lastPutMode !== 'clone') {
      this._hideClone();
      return;
    }
    if (cloneHidden) {
      pluginEvent('showClone', this);
      if (Sortable.eventCanceled) return; // show clone at dragEl or original position

      if (dragEl.parentNode == rootEl && !this.options.group.revertClone) {
        rootEl.insertBefore(cloneEl, dragEl);
      } else if (nextEl) {
        rootEl.insertBefore(cloneEl, nextEl);
      } else {
        rootEl.appendChild(cloneEl);
      }
      if (this.options.group.revertClone) {
        this.animate(dragEl, cloneEl);
      }
      css(cloneEl, 'display', '');
      cloneHidden = false;
    }
  }
};
function _globalDragOver( /**Event*/
evt) {
  if (evt.dataTransfer) {
    evt.dataTransfer.dropEffect = 'move';
  }
  evt.cancelable && evt.preventDefault();
}
function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvent, willInsertAfter) {
  var evt,
    sortable = fromEl[expando],
    onMoveFn = sortable.options.onMove,
    retVal; // Support for new CustomEvent feature

  if (window.CustomEvent && !IE11OrLess && !Edge) {
    evt = new CustomEvent('move', {
      bubbles: true,
      cancelable: true
    });
  } else {
    evt = document.createEvent('Event');
    evt.initEvent('move', true, true);
  }
  evt.to = toEl;
  evt.from = fromEl;
  evt.dragged = dragEl;
  evt.draggedRect = dragRect;
  evt.related = targetEl || toEl;
  evt.relatedRect = targetRect || getRect(toEl);
  evt.willInsertAfter = willInsertAfter;
  evt.originalEvent = originalEvent;
  fromEl.dispatchEvent(evt);
  if (onMoveFn) {
    retVal = onMoveFn.call(sortable, evt, originalEvent);
  }
  return retVal;
}
function _disableDraggable(el) {
  el.draggable = false;
}
function _unsilent() {
  _silent = false;
}
function _ghostIsFirst(evt, vertical, sortable) {
  var rect = getRect(getChild(sortable.el, 0, sortable.options, true));
  var spacer = 10;
  return vertical ? evt.clientX < rect.left - spacer || evt.clientY < rect.top && evt.clientX < rect.right : evt.clientY < rect.top - spacer || evt.clientY < rect.bottom && evt.clientX < rect.left;
}
function _ghostIsLast(evt, vertical, sortable) {
  var rect = getRect(lastChild(sortable.el, sortable.options.draggable));
  var spacer = 10;
  return vertical ? evt.clientX > rect.right + spacer || evt.clientX <= rect.right && evt.clientY > rect.bottom && evt.clientX >= rect.left : evt.clientX > rect.right && evt.clientY > rect.top || evt.clientX <= rect.right && evt.clientY > rect.bottom + spacer;
}
function _getSwapDirection(evt, target, targetRect, vertical, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {
  var mouseOnAxis = vertical ? evt.clientY : evt.clientX,
    targetLength = vertical ? targetRect.height : targetRect.width,
    targetS1 = vertical ? targetRect.top : targetRect.left,
    targetS2 = vertical ? targetRect.bottom : targetRect.right,
    invert = false;
  if (!invertSwap) {
    // Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold
    if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) {
      // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2
      // check if past first invert threshold on side opposite of lastDirection
      if (!pastFirstInvertThresh && (lastDirection === 1 ? mouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2 : mouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2)) {
        // past first invert threshold, do not restrict inverted threshold to dragEl shadow
        pastFirstInvertThresh = true;
      }
      if (!pastFirstInvertThresh) {
        // dragEl shadow (target move distance shadow)
        if (lastDirection === 1 ? mouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow
        : mouseOnAxis > targetS2 - targetMoveDistance) {
          return -lastDirection;
        }
      } else {
        invert = true;
      }
    } else {
      // Regular
      if (mouseOnAxis > targetS1 + targetLength * (1 - swapThreshold) / 2 && mouseOnAxis < targetS2 - targetLength * (1 - swapThreshold) / 2) {
        return _getInsertDirection(target);
      }
    }
  }
  invert = invert || invertSwap;
  if (invert) {
    // Invert of regular
    if (mouseOnAxis < targetS1 + targetLength * invertedSwapThreshold / 2 || mouseOnAxis > targetS2 - targetLength * invertedSwapThreshold / 2) {
      return mouseOnAxis > targetS1 + targetLength / 2 ? 1 : -1;
    }
  }
  return 0;
}
/**
 * Gets the direction dragEl must be swapped relative to target in order to make it
 * seem that dragEl has been "inserted" into that element's position
 * @param  {HTMLElement} target       The target whose position dragEl is being inserted at
 * @return {Number}                   Direction dragEl must be swapped
 */

function _getInsertDirection(target) {
  if (index(dragEl) < index(target)) {
    return 1;
  } else {
    return -1;
  }
}
/**
 * Generate id
 * @param   {HTMLElement} el
 * @returns {String}
 * @private
 */

function _generateId(el) {
  var str = el.tagName + el.className + el.src + el.href + el.textContent,
    i = str.length,
    sum = 0;
  while (i--) {
    sum += str.charCodeAt(i);
  }
  return sum.toString(36);
}
function _saveInputCheckedState(root) {
  savedInputChecked.length = 0;
  var inputs = root.getElementsByTagName('input');
  var idx = inputs.length;
  while (idx--) {
    var el = inputs[idx];
    el.checked && savedInputChecked.push(el);
  }
}
function _nextTick(fn) {
  return setTimeout(fn, 0);
}
function _cancelNextTick(id) {
  return clearTimeout(id);
} // Fixed #973:

if (documentExists) {
  on(document, 'touchmove', function (evt) {
    if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {
      evt.preventDefault();
    }
  });
} // Export utils

Sortable.utils = {
  on: on,
  off: off,
  css: css,
  find: find,
  is: function is(el, selector) {
    return !!closest(el, selector, el, false);
  },
  extend: extend,
  throttle: throttle,
  closest: closest,
  toggleClass: toggleClass,
  clone: clone,
  index: index,
  nextTick: _nextTick,
  cancelNextTick: _cancelNextTick,
  detectDirection: _detectDirection,
  getChild: getChild
};
/**
 * Get the Sortable instance of an element
 * @param  {HTMLElement} element The element
 * @return {Sortable|undefined}         The instance of Sortable
 */

Sortable.get = function (element) {
  return element[expando];
};
/**
 * Mount a plugin to Sortable
 * @param  {...SortablePlugin|SortablePlugin[]} plugins       Plugins being mounted
 */

Sortable.mount = function () {
  for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {
    plugins[_key] = arguments[_key];
  }
  if (plugins[0].constructor === Array) plugins = plugins[0];
  plugins.forEach(function (plugin) {
    if (!plugin.prototype || !plugin.prototype.constructor) {
      throw "Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(plugin));
    }
    if (plugin.utils) Sortable.utils = _objectSpread2(_objectSpread2({}, Sortable.utils), plugin.utils);
    PluginManager.mount(plugin);
  });
};
/**
 * Create sortable instance
 * @param {HTMLElement}  el
 * @param {Object}      [options]
 */

Sortable.create = function (el, options) {
  return new Sortable(el, options);
}; // Export

Sortable.version = version;
var autoScrolls = [],
  scrollEl,
  scrollRootEl,
  scrolling = false,
  lastAutoScrollX,
  lastAutoScrollY,
  touchEvt$1,
  pointerElemChangedInterval;
function AutoScrollPlugin() {
  function AutoScroll() {
    this.defaults = {
      scroll: true,
      forceAutoScrollFallback: false,
      scrollSensitivity: 30,
      scrollSpeed: 10,
      bubbleScroll: true
    }; // Bind all private methods

    for (var fn in this) {
      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
        this[fn] = this[fn].bind(this);
      }
    }
  }
  AutoScroll.prototype = {
    dragStarted: function dragStarted(_ref) {
      var originalEvent = _ref.originalEvent;
      if (this.sortable.nativeDraggable) {
        on(document, 'dragover', this._handleAutoScroll);
      } else {
        if (this.options.supportPointer) {
          on(document, 'pointermove', this._handleFallbackAutoScroll);
        } else if (originalEvent.touches) {
          on(document, 'touchmove', this._handleFallbackAutoScroll);
        } else {
          on(document, 'mousemove', this._handleFallbackAutoScroll);
        }
      }
    },
    dragOverCompleted: function dragOverCompleted(_ref2) {
      var originalEvent = _ref2.originalEvent;

      // For when bubbling is canceled and using fallback (fallback 'touchmove' always reached)
      if (!this.options.dragOverBubble && !originalEvent.rootEl) {
        this._handleAutoScroll(originalEvent);
      }
    },
    drop: function drop() {
      if (this.sortable.nativeDraggable) {
        off(document, 'dragover', this._handleAutoScroll);
      } else {
        off(document, 'pointermove', this._handleFallbackAutoScroll);
        off(document, 'touchmove', this._handleFallbackAutoScroll);
        off(document, 'mousemove', this._handleFallbackAutoScroll);
      }
      clearPointerElemChangedInterval();
      clearAutoScrolls();
      cancelThrottle();
    },
    nulling: function nulling() {
      touchEvt$1 = scrollRootEl = scrollEl = scrolling = pointerElemChangedInterval = lastAutoScrollX = lastAutoScrollY = null;
      autoScrolls.length = 0;
    },
    _handleFallbackAutoScroll: function _handleFallbackAutoScroll(evt) {
      this._handleAutoScroll(evt, true);
    },
    _handleAutoScroll: function _handleAutoScroll(evt, fallback) {
      var _this = this;
      var x = (evt.touches ? evt.touches[0] : evt).clientX,
        y = (evt.touches ? evt.touches[0] : evt).clientY,
        elem = document.elementFromPoint(x, y);
      touchEvt$1 = evt; // IE does not seem to have native autoscroll,
      // Edge's autoscroll seems too conditional,
      // MACOS Safari does not have autoscroll,
      // Firefox and Chrome are good

      if (fallback || this.options.forceAutoScrollFallback || Edge || IE11OrLess || Safari) {
        autoScroll(evt, this.options, elem, fallback); // Listener for pointer element change

        var ogElemScroller = getParentAutoScrollElement(elem, true);
        if (scrolling && (!pointerElemChangedInterval || x !== lastAutoScrollX || y !== lastAutoScrollY)) {
          pointerElemChangedInterval && clearPointerElemChangedInterval(); // Detect for pointer elem change, emulating native DnD behaviour

          pointerElemChangedInterval = setInterval(function () {
            var newElem = getParentAutoScrollElement(document.elementFromPoint(x, y), true);
            if (newElem !== ogElemScroller) {
              ogElemScroller = newElem;
              clearAutoScrolls();
            }
            autoScroll(evt, _this.options, newElem, fallback);
          }, 10);
          lastAutoScrollX = x;
          lastAutoScrollY = y;
        }
      } else {
        // if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll
        if (!this.options.bubbleScroll || getParentAutoScrollElement(elem, true) === getWindowScrollingElement()) {
          clearAutoScrolls();
          return;
        }
        autoScroll(evt, this.options, getParentAutoScrollElement(elem, false), false);
      }
    }
  };
  return _extends(AutoScroll, {
    pluginName: 'scroll',
    initializeByDefault: true
  });
}
function clearAutoScrolls() {
  autoScrolls.forEach(function (autoScroll) {
    clearInterval(autoScroll.pid);
  });
  autoScrolls = [];
}
function clearPointerElemChangedInterval() {
  clearInterval(pointerElemChangedInterval);
}
var autoScroll = throttle(function (evt, options, rootEl, isFallback) {
  // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521
  if (!options.scroll) return;
  var x = (evt.touches ? evt.touches[0] : evt).clientX,
    y = (evt.touches ? evt.touches[0] : evt).clientY,
    sens = options.scrollSensitivity,
    speed = options.scrollSpeed,
    winScroller = getWindowScrollingElement();
  var scrollThisInstance = false,
    scrollCustomFn; // New scroll root, set scrollEl

  if (scrollRootEl !== rootEl) {
    scrollRootEl = rootEl;
    clearAutoScrolls();
    scrollEl = options.scroll;
    scrollCustomFn = options.scrollFn;
    if (scrollEl === true) {
      scrollEl = getParentAutoScrollElement(rootEl, true);
    }
  }
  var layersOut = 0;
  var currentParent = scrollEl;
  do {
    var el = currentParent,
      rect = getRect(el),
      top = rect.top,
      bottom = rect.bottom,
      left = rect.left,
      right = rect.right,
      width = rect.width,
      height = rect.height,
      canScrollX = void 0,
      canScrollY = void 0,
      scrollWidth = el.scrollWidth,
      scrollHeight = el.scrollHeight,
      elCSS = css(el),
      scrollPosX = el.scrollLeft,
      scrollPosY = el.scrollTop;
    if (el === winScroller) {
      canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll' || elCSS.overflowX === 'visible');
      canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll' || elCSS.overflowY === 'visible');
    } else {
      canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll');
      canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll');
    }
    var vx = canScrollX && (Math.abs(right - x) <= sens && scrollPosX + width < scrollWidth) - (Math.abs(left - x) <= sens && !!scrollPosX);
    var vy = canScrollY && (Math.abs(bottom - y) <= sens && scrollPosY + height < scrollHeight) - (Math.abs(top - y) <= sens && !!scrollPosY);
    if (!autoScrolls[layersOut]) {
      for (var i = 0; i <= layersOut; i++) {
        if (!autoScrolls[i]) {
          autoScrolls[i] = {};
        }
      }
    }
    if (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {
      autoScrolls[layersOut].el = el;
      autoScrolls[layersOut].vx = vx;
      autoScrolls[layersOut].vy = vy;
      clearInterval(autoScrolls[layersOut].pid);
      if (vx != 0 || vy != 0) {
        scrollThisInstance = true;
        /* jshint loopfunc:true */

        autoScrolls[layersOut].pid = setInterval(function () {
          // emulate drag over during autoscroll (fallback), emulating native DnD behaviour
          if (isFallback && this.layer === 0) {
            Sortable.active._onTouchMove(touchEvt$1); // To move ghost if it is positioned absolutely
          }

          var scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;
          var scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;
          if (typeof scrollCustomFn === 'function') {
            if (scrollCustomFn.call(Sortable.dragged.parentNode[expando], scrollOffsetX, scrollOffsetY, evt, touchEvt$1, autoScrolls[this.layer].el) !== 'continue') {
              return;
            }
          }
          scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);
        }.bind({
          layer: layersOut
        }), 24);
      }
    }
    layersOut++;
  } while (options.bubbleScroll && currentParent !== winScroller && (currentParent = getParentAutoScrollElement(currentParent, false)));
  scrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not
}, 30);
var drop = function drop(_ref) {
  var originalEvent = _ref.originalEvent,
    putSortable = _ref.putSortable,
    dragEl = _ref.dragEl,
    activeSortable = _ref.activeSortable,
    dispatchSortableEvent = _ref.dispatchSortableEvent,
    hideGhostForTarget = _ref.hideGhostForTarget,
    unhideGhostForTarget = _ref.unhideGhostForTarget;
  if (!originalEvent) return;
  var toSortable = putSortable || activeSortable;
  hideGhostForTarget();
  var touch = originalEvent.changedTouches && originalEvent.changedTouches.length ? originalEvent.changedTouches[0] : originalEvent;
  var target = document.elementFromPoint(touch.clientX, touch.clientY);
  unhideGhostForTarget();
  if (toSortable && !toSortable.el.contains(target)) {
    dispatchSortableEvent('spill');
    this.onSpill({
      dragEl: dragEl,
      putSortable: putSortable
    });
  }
};
function Revert() {}
Revert.prototype = {
  startIndex: null,
  dragStart: function dragStart(_ref2) {
    var oldDraggableIndex = _ref2.oldDraggableIndex;
    this.startIndex = oldDraggableIndex;
  },
  onSpill: function onSpill(_ref3) {
    var dragEl = _ref3.dragEl,
      putSortable = _ref3.putSortable;
    this.sortable.captureAnimationState();
    if (putSortable) {
      putSortable.captureAnimationState();
    }
    var nextSibling = getChild(this.sortable.el, this.startIndex, this.options);
    if (nextSibling) {
      this.sortable.el.insertBefore(dragEl, nextSibling);
    } else {
      this.sortable.el.appendChild(dragEl);
    }
    this.sortable.animateAll();
    if (putSortable) {
      putSortable.animateAll();
    }
  },
  drop: drop
};
_extends(Revert, {
  pluginName: 'revertOnSpill'
});
function Remove() {}
Remove.prototype = {
  onSpill: function onSpill(_ref4) {
    var dragEl = _ref4.dragEl,
      putSortable = _ref4.putSortable;
    var parentSortable = putSortable || this.sortable;
    parentSortable.captureAnimationState();
    dragEl.parentNode && dragEl.parentNode.removeChild(dragEl);
    parentSortable.animateAll();
  },
  drop: drop
};
_extends(Remove, {
  pluginName: 'removeOnSpill'
});
var lastSwapEl;
function SwapPlugin() {
  function Swap() {
    this.defaults = {
      swapClass: 'sortable-swap-highlight'
    };
  }
  Swap.prototype = {
    dragStart: function dragStart(_ref) {
      var dragEl = _ref.dragEl;
      lastSwapEl = dragEl;
    },
    dragOverValid: function dragOverValid(_ref2) {
      var completed = _ref2.completed,
        target = _ref2.target,
        onMove = _ref2.onMove,
        activeSortable = _ref2.activeSortable,
        changed = _ref2.changed,
        cancel = _ref2.cancel;
      if (!activeSortable.options.swap) return;
      var el = this.sortable.el,
        options = this.options;
      if (target && target !== el) {
        var prevSwapEl = lastSwapEl;
        if (onMove(target) !== false) {
          toggleClass(target, options.swapClass, true);
          lastSwapEl = target;
        } else {
          lastSwapEl = null;
        }
        if (prevSwapEl && prevSwapEl !== lastSwapEl) {
          toggleClass(prevSwapEl, options.swapClass, false);
        }
      }
      changed();
      completed(true);
      cancel();
    },
    drop: function drop(_ref3) {
      var activeSortable = _ref3.activeSortable,
        putSortable = _ref3.putSortable,
        dragEl = _ref3.dragEl;
      var toSortable = putSortable || this.sortable;
      var options = this.options;
      lastSwapEl && toggleClass(lastSwapEl, options.swapClass, false);
      if (lastSwapEl && (options.swap || putSortable && putSortable.options.swap)) {
        if (dragEl !== lastSwapEl) {
          toSortable.captureAnimationState();
          if (toSortable !== activeSortable) activeSortable.captureAnimationState();
          swapNodes(dragEl, lastSwapEl);
          toSortable.animateAll();
          if (toSortable !== activeSortable) activeSortable.animateAll();
        }
      }
    },
    nulling: function nulling() {
      lastSwapEl = null;
    }
  };
  return _extends(Swap, {
    pluginName: 'swap',
    eventProperties: function eventProperties() {
      return {
        swapItem: lastSwapEl
      };
    }
  });
}
function swapNodes(n1, n2) {
  var p1 = n1.parentNode,
    p2 = n2.parentNode,
    i1,
    i2;
  if (!p1 || !p2 || p1.isEqualNode(n2) || p2.isEqualNode(n1)) return;
  i1 = index(n1);
  i2 = index(n2);
  if (p1.isEqualNode(p2) && i1 < i2) {
    i2++;
  }
  p1.insertBefore(n2, p1.children[i1]);
  p2.insertBefore(n1, p2.children[i2]);
}
var multiDragElements = [],
  multiDragClones = [],
  lastMultiDragSelect,
  // for selection with modifier key down (SHIFT)
  multiDragSortable,
  initialFolding = false,
  // Initial multi-drag fold when drag started
  folding = false,
  // Folding any other time
  dragStarted = false,
  dragEl$1,
  clonesFromRect,
  clonesHidden;
function MultiDragPlugin() {
  function MultiDrag(sortable) {
    // Bind all private methods
    for (var fn in this) {
      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
        this[fn] = this[fn].bind(this);
      }
    }
    if (!sortable.options.avoidImplicitDeselect) {
      if (sortable.options.supportPointer) {
        on(document, 'pointerup', this._deselectMultiDrag);
      } else {
        on(document, 'mouseup', this._deselectMultiDrag);
        on(document, 'touchend', this._deselectMultiDrag);
      }
    }
    on(document, 'keydown', this._checkKeyDown);
    on(document, 'keyup', this._checkKeyUp);
    this.defaults = {
      selectedClass: 'sortable-selected',
      multiDragKey: null,
      avoidImplicitDeselect: false,
      setData: function setData(dataTransfer, dragEl) {
        var data = '';
        if (multiDragElements.length && multiDragSortable === sortable) {
          multiDragElements.forEach(function (multiDragElement, i) {
            data += (!i ? '' : ', ') + multiDragElement.textContent;
          });
        } else {
          data = dragEl.textContent;
        }
        dataTransfer.setData('Text', data);
      }
    };
  }
  MultiDrag.prototype = {
    multiDragKeyDown: false,
    isMultiDrag: false,
    delayStartGlobal: function delayStartGlobal(_ref) {
      var dragged = _ref.dragEl;
      dragEl$1 = dragged;
    },
    delayEnded: function delayEnded() {
      this.isMultiDrag = ~multiDragElements.indexOf(dragEl$1);
    },
    setupClone: function setupClone(_ref2) {
      var sortable = _ref2.sortable,
        cancel = _ref2.cancel;
      if (!this.isMultiDrag) return;
      for (var i = 0; i < multiDragElements.length; i++) {
        multiDragClones.push(clone(multiDragElements[i]));
        multiDragClones[i].sortableIndex = multiDragElements[i].sortableIndex;
        multiDragClones[i].draggable = false;
        multiDragClones[i].style['will-change'] = '';
        toggleClass(multiDragClones[i], this.options.selectedClass, false);
        multiDragElements[i] === dragEl$1 && toggleClass(multiDragClones[i], this.options.chosenClass, false);
      }
      sortable._hideClone();
      cancel();
    },
    clone: function clone(_ref3) {
      var sortable = _ref3.sortable,
        rootEl = _ref3.rootEl,
        dispatchSortableEvent = _ref3.dispatchSortableEvent,
        cancel = _ref3.cancel;
      if (!this.isMultiDrag) return;
      if (!this.options.removeCloneOnHide) {
        if (multiDragElements.length && multiDragSortable === sortable) {
          insertMultiDragClones(true, rootEl);
          dispatchSortableEvent('clone');
          cancel();
        }
      }
    },
    showClone: function showClone(_ref4) {
      var cloneNowShown = _ref4.cloneNowShown,
        rootEl = _ref4.rootEl,
        cancel = _ref4.cancel;
      if (!this.isMultiDrag) return;
      insertMultiDragClones(false, rootEl);
      multiDragClones.forEach(function (clone) {
        css(clone, 'display', '');
      });
      cloneNowShown();
      clonesHidden = false;
      cancel();
    },
    hideClone: function hideClone(_ref5) {
      var _this = this;
      var sortable = _ref5.sortable,
        cloneNowHidden = _ref5.cloneNowHidden,
        cancel = _ref5.cancel;
      if (!this.isMultiDrag) return;
      multiDragClones.forEach(function (clone) {
        css(clone, 'display', 'none');
        if (_this.options.removeCloneOnHide && clone.parentNode) {
          clone.parentNode.removeChild(clone);
        }
      });
      cloneNowHidden();
      clonesHidden = true;
      cancel();
    },
    dragStartGlobal: function dragStartGlobal(_ref6) {
      var sortable = _ref6.sortable;
      if (!this.isMultiDrag && multiDragSortable) {
        multiDragSortable.multiDrag._deselectMultiDrag();
      }
      multiDragElements.forEach(function (multiDragElement) {
        multiDragElement.sortableIndex = index(multiDragElement);
      }); // Sort multi-drag elements

      multiDragElements = multiDragElements.sort(function (a, b) {
        return a.sortableIndex - b.sortableIndex;
      });
      dragStarted = true;
    },
    dragStarted: function dragStarted(_ref7) {
      var _this2 = this;
      var sortable = _ref7.sortable;
      if (!this.isMultiDrag) return;
      if (this.options.sort) {
        // Capture rects,
        // hide multi drag elements (by positioning them absolute),
        // set multi drag elements rects to dragRect,
        // show multi drag elements,
        // animate to rects,
        // unset rects & remove from DOM
        sortable.captureAnimationState();
        if (this.options.animation) {
          multiDragElements.forEach(function (multiDragElement) {
            if (multiDragElement === dragEl$1) return;
            css(multiDragElement, 'position', 'absolute');
          });
          var dragRect = getRect(dragEl$1, false, true, true);
          multiDragElements.forEach(function (multiDragElement) {
            if (multiDragElement === dragEl$1) return;
            setRect(multiDragElement, dragRect);
          });
          folding = true;
          initialFolding = true;
        }
      }
      sortable.animateAll(function () {
        folding = false;
        initialFolding = false;
        if (_this2.options.animation) {
          multiDragElements.forEach(function (multiDragElement) {
            unsetRect(multiDragElement);
          });
        } // Remove all auxiliary multidrag items from el, if sorting enabled

        if (_this2.options.sort) {
          removeMultiDragElements();
        }
      });
    },
    dragOver: function dragOver(_ref8) {
      var target = _ref8.target,
        completed = _ref8.completed,
        cancel = _ref8.cancel;
      if (folding && ~multiDragElements.indexOf(target)) {
        completed(false);
        cancel();
      }
    },
    revert: function revert(_ref9) {
      var fromSortable = _ref9.fromSortable,
        rootEl = _ref9.rootEl,
        sortable = _ref9.sortable,
        dragRect = _ref9.dragRect;
      if (multiDragElements.length > 1) {
        // Setup unfold animation
        multiDragElements.forEach(function (multiDragElement) {
          sortable.addAnimationState({
            target: multiDragElement,
            rect: folding ? getRect(multiDragElement) : dragRect
          });
          unsetRect(multiDragElement);
          multiDragElement.fromRect = dragRect;
          fromSortable.removeAnimationState(multiDragElement);
        });
        folding = false;
        insertMultiDragElements(!this.options.removeCloneOnHide, rootEl);
      }
    },
    dragOverCompleted: function dragOverCompleted(_ref10) {
      var sortable = _ref10.sortable,
        isOwner = _ref10.isOwner,
        insertion = _ref10.insertion,
        activeSortable = _ref10.activeSortable,
        parentEl = _ref10.parentEl,
        putSortable = _ref10.putSortable;
      var options = this.options;
      if (insertion) {
        // Clones must be hidden before folding animation to capture dragRectAbsolute properly
        if (isOwner) {
          activeSortable._hideClone();
        }
        initialFolding = false; // If leaving sort:false root, or already folding - Fold to new location

        if (options.animation && multiDragElements.length > 1 && (folding || !isOwner && !activeSortable.options.sort && !putSortable)) {
          // Fold: Set all multi drag elements's rects to dragEl's rect when multi-drag elements are invisible
          var dragRectAbsolute = getRect(dragEl$1, false, true, true);
          multiDragElements.forEach(function (multiDragElement) {
            if (multiDragElement === dragEl$1) return;
            setRect(multiDragElement, dragRectAbsolute); // Move element(s) to end of parentEl so that it does not interfere with multi-drag clones insertion if they are inserted
            // while folding, and so that we can capture them again because old sortable will no longer be fromSortable

            parentEl.appendChild(multiDragElement);
          });
          folding = true;
        } // Clones must be shown (and check to remove multi drags) after folding when interfering multiDragElements are moved out

        if (!isOwner) {
          // Only remove if not folding (folding will remove them anyways)
          if (!folding) {
            removeMultiDragElements();
          }
          if (multiDragElements.length > 1) {
            var clonesHiddenBefore = clonesHidden;
            activeSortable._showClone(sortable); // Unfold animation for clones if showing from hidden

            if (activeSortable.options.animation && !clonesHidden && clonesHiddenBefore) {
              multiDragClones.forEach(function (clone) {
                activeSortable.addAnimationState({
                  target: clone,
                  rect: clonesFromRect
                });
                clone.fromRect = clonesFromRect;
                clone.thisAnimationDuration = null;
              });
            }
          } else {
            activeSortable._showClone(sortable);
          }
        }
      }
    },
    dragOverAnimationCapture: function dragOverAnimationCapture(_ref11) {
      var dragRect = _ref11.dragRect,
        isOwner = _ref11.isOwner,
        activeSortable = _ref11.activeSortable;
      multiDragElements.forEach(function (multiDragElement) {
        multiDragElement.thisAnimationDuration = null;
      });
      if (activeSortable.options.animation && !isOwner && activeSortable.multiDrag.isMultiDrag) {
        clonesFromRect = _extends({}, dragRect);
        var dragMatrix = matrix(dragEl$1, true);
        clonesFromRect.top -= dragMatrix.f;
        clonesFromRect.left -= dragMatrix.e;
      }
    },
    dragOverAnimationComplete: function dragOverAnimationComplete() {
      if (folding) {
        folding = false;
        removeMultiDragElements();
      }
    },
    drop: function drop(_ref12) {
      var evt = _ref12.originalEvent,
        rootEl = _ref12.rootEl,
        parentEl = _ref12.parentEl,
        sortable = _ref12.sortable,
        dispatchSortableEvent = _ref12.dispatchSortableEvent,
        oldIndex = _ref12.oldIndex,
        putSortable = _ref12.putSortable;
      var toSortable = putSortable || this.sortable;
      if (!evt) return;
      var options = this.options,
        children = parentEl.children; // Multi-drag selection

      if (!dragStarted) {
        if (options.multiDragKey && !this.multiDragKeyDown) {
          this._deselectMultiDrag();
        }
        toggleClass(dragEl$1, options.selectedClass, !~multiDragElements.indexOf(dragEl$1));
        if (!~multiDragElements.indexOf(dragEl$1)) {
          multiDragElements.push(dragEl$1);
          dispatchEvent({
            sortable: sortable,
            rootEl: rootEl,
            name: 'select',
            targetEl: dragEl$1,
            originalEvent: evt
          }); // Modifier activated, select from last to dragEl

          if (evt.shiftKey && lastMultiDragSelect && sortable.el.contains(lastMultiDragSelect)) {
            var lastIndex = index(lastMultiDragSelect),
              currentIndex = index(dragEl$1);
            if (~lastIndex && ~currentIndex && lastIndex !== currentIndex) {
              // Must include lastMultiDragSelect (select it), in case modified selection from no selection
              // (but previous selection existed)
              var n, i;
              if (currentIndex > lastIndex) {
                i = lastIndex;
                n = currentIndex;
              } else {
                i = currentIndex;
                n = lastIndex + 1;
              }
              for (; i < n; i++) {
                if (~multiDragElements.indexOf(children[i])) continue;
                toggleClass(children[i], options.selectedClass, true);
                multiDragElements.push(children[i]);
                dispatchEvent({
                  sortable: sortable,
                  rootEl: rootEl,
                  name: 'select',
                  targetEl: children[i],
                  originalEvent: evt
                });
              }
            }
          } else {
            lastMultiDragSelect = dragEl$1;
          }
          multiDragSortable = toSortable;
        } else {
          multiDragElements.splice(multiDragElements.indexOf(dragEl$1), 1);
          lastMultiDragSelect = null;
          dispatchEvent({
            sortable: sortable,
            rootEl: rootEl,
            name: 'deselect',
            targetEl: dragEl$1,
            originalEvent: evt
          });
        }
      } // Multi-drag drop

      if (dragStarted && this.isMultiDrag) {
        folding = false; // Do not "unfold" after around dragEl if reverted

        if ((parentEl[expando].options.sort || parentEl !== rootEl) && multiDragElements.length > 1) {
          var dragRect = getRect(dragEl$1),
            multiDragIndex = index(dragEl$1, ':not(.' + this.options.selectedClass + ')');
          if (!initialFolding && options.animation) dragEl$1.thisAnimationDuration = null;
          toSortable.captureAnimationState();
          if (!initialFolding) {
            if (options.animation) {
              dragEl$1.fromRect = dragRect;
              multiDragElements.forEach(function (multiDragElement) {
                multiDragElement.thisAnimationDuration = null;
                if (multiDragElement !== dragEl$1) {
                  var rect = folding ? getRect(multiDragElement) : dragRect;
                  multiDragElement.fromRect = rect; // Prepare unfold animation

                  toSortable.addAnimationState({
                    target: multiDragElement,
                    rect: rect
                  });
                }
              });
            } // Multi drag elements are not necessarily removed from the DOM on drop, so to reinsert
            // properly they must all be removed

            removeMultiDragElements();
            multiDragElements.forEach(function (multiDragElement) {
              if (children[multiDragIndex]) {
                parentEl.insertBefore(multiDragElement, children[multiDragIndex]);
              } else {
                parentEl.appendChild(multiDragElement);
              }
              multiDragIndex++;
            }); // If initial folding is done, the elements may have changed position because they are now
            // unfolding around dragEl, even though dragEl may not have his index changed, so update event
            // must be fired here as Sortable will not.

            if (oldIndex === index(dragEl$1)) {
              var update = false;
              multiDragElements.forEach(function (multiDragElement) {
                if (multiDragElement.sortableIndex !== index(multiDragElement)) {
                  update = true;
                  return;
                }
              });
              if (update) {
                dispatchSortableEvent('update');
              }
            }
          } // Must be done after capturing individual rects (scroll bar)

          multiDragElements.forEach(function (multiDragElement) {
            unsetRect(multiDragElement);
          });
          toSortable.animateAll();
        }
        multiDragSortable = toSortable;
      } // Remove clones if necessary

      if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {
        multiDragClones.forEach(function (clone) {
          clone.parentNode && clone.parentNode.removeChild(clone);
        });
      }
    },
    nullingGlobal: function nullingGlobal() {
      this.isMultiDrag = dragStarted = false;
      multiDragClones.length = 0;
    },
    destroyGlobal: function destroyGlobal() {
      this._deselectMultiDrag();
      off(document, 'pointerup', this._deselectMultiDrag);
      off(document, 'mouseup', this._deselectMultiDrag);
      off(document, 'touchend', this._deselectMultiDrag);
      off(document, 'keydown', this._checkKeyDown);
      off(document, 'keyup', this._checkKeyUp);
    },
    _deselectMultiDrag: function _deselectMultiDrag(evt) {
      if (typeof dragStarted !== "undefined" && dragStarted) return; // Only deselect if selection is in this sortable

      if (multiDragSortable !== this.sortable) return; // Only deselect if target is not item in this sortable

      if (evt && closest(evt.target, this.options.draggable, this.sortable.el, false)) return; // Only deselect if left click

      if (evt && evt.button !== 0) return;
      while (multiDragElements.length) {
        var el = multiDragElements[0];
        toggleClass(el, this.options.selectedClass, false);
        multiDragElements.shift();
        dispatchEvent({
          sortable: this.sortable,
          rootEl: this.sortable.el,
          name: 'deselect',
          targetEl: el,
          originalEvent: evt
        });
      }
    },
    _checkKeyDown: function _checkKeyDown(evt) {
      if (evt.key === this.options.multiDragKey) {
        this.multiDragKeyDown = true;
      }
    },
    _checkKeyUp: function _checkKeyUp(evt) {
      if (evt.key === this.options.multiDragKey) {
        this.multiDragKeyDown = false;
      }
    }
  };
  return _extends(MultiDrag, {
    // Static methods & properties
    pluginName: 'multiDrag',
    utils: {
      /**
       * Selects the provided multi-drag item
       * @param  {HTMLElement} el    The element to be selected
       */
      select: function select(el) {
        var sortable = el.parentNode[expando];
        if (!sortable || !sortable.options.multiDrag || ~multiDragElements.indexOf(el)) return;
        if (multiDragSortable && multiDragSortable !== sortable) {
          multiDragSortable.multiDrag._deselectMultiDrag();
          multiDragSortable = sortable;
        }
        toggleClass(el, sortable.options.selectedClass, true);
        multiDragElements.push(el);
      },
      /**
       * Deselects the provided multi-drag item
       * @param  {HTMLElement} el    The element to be deselected
       */
      deselect: function deselect(el) {
        var sortable = el.parentNode[expando],
          index = multiDragElements.indexOf(el);
        if (!sortable || !sortable.options.multiDrag || !~index) return;
        toggleClass(el, sortable.options.selectedClass, false);
        multiDragElements.splice(index, 1);
      }
    },
    eventProperties: function eventProperties() {
      var _this3 = this;
      var oldIndicies = [],
        newIndicies = [];
      multiDragElements.forEach(function (multiDragElement) {
        oldIndicies.push({
          multiDragElement: multiDragElement,
          index: multiDragElement.sortableIndex
        }); // multiDragElements will already be sorted if folding

        var newIndex;
        if (folding && multiDragElement !== dragEl$1) {
          newIndex = -1;
        } else if (folding) {
          newIndex = index(multiDragElement, ':not(.' + _this3.options.selectedClass + ')');
        } else {
          newIndex = index(multiDragElement);
        }
        newIndicies.push({
          multiDragElement: multiDragElement,
          index: newIndex
        });
      });
      return {
        items: _toConsumableArray(multiDragElements),
        clones: [].concat(multiDragClones),
        oldIndicies: oldIndicies,
        newIndicies: newIndicies
      };
    },
    optionListeners: {
      multiDragKey: function multiDragKey(key) {
        key = key.toLowerCase();
        if (key === 'ctrl') {
          key = 'Control';
        } else if (key.length > 1) {
          key = key.charAt(0).toUpperCase() + key.substr(1);
        }
        return key;
      }
    }
  });
}
function insertMultiDragElements(clonesInserted, rootEl) {
  multiDragElements.forEach(function (multiDragElement, i) {
    var target = rootEl.children[multiDragElement.sortableIndex + (clonesInserted ? Number(i) : 0)];
    if (target) {
      rootEl.insertBefore(multiDragElement, target);
    } else {
      rootEl.appendChild(multiDragElement);
    }
  });
}
/**
 * Insert multi-drag clones
 * @param  {[Boolean]} elementsInserted  Whether the multi-drag elements are inserted
 * @param  {HTMLElement} rootEl
 */

function insertMultiDragClones(elementsInserted, rootEl) {
  multiDragClones.forEach(function (clone, i) {
    var target = rootEl.children[clone.sortableIndex + (elementsInserted ? Number(i) : 0)];
    if (target) {
      rootEl.insertBefore(clone, target);
    } else {
      rootEl.appendChild(clone);
    }
  });
}
function removeMultiDragElements() {
  multiDragElements.forEach(function (multiDragElement) {
    if (multiDragElement === dragEl$1) return;
    multiDragElement.parentNode && multiDragElement.parentNode.removeChild(multiDragElement);
  });
}
Sortable.mount(new AutoScrollPlugin());
Sortable.mount(Remove, Revert);
/* harmony default export */ __webpack_exports__["default"] = (Sortable);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnVpbGRlckN2LnVtZC5taW4udmVuZG9ycy1jb21wb25lbnRzX2Jvb3RzdHJhcHZ1ZWpzX25vZGVfbW9kdWxlc19ja2VkaXRvcjQtdnVlX2Rpc3RfY2tlZGl0b3JfanMtY29tcG9uZW50c19ib290LWEwODk5YS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0NBQUEsVUFBMkNBLEdBQU1DO0VBQzFCLEtBQXlCRSxHQUM5Q0EsT0FBT0QsVUFBVUQsTUFDUSxDQUtOQTtBQUFBQSxDQVJyQixDQVNHTSxRQUFRO0VBQ1g7SUNURSxJQUFJQyxJQUFtQjtJQUd2QixTQUFTQyxFQUFvQkM7TUFHNUIsSUFBR0YsRUFBaUJFLElBQ25CLE9BQU9GLEVBQWlCRSxHQUFVUjtNQUduQyxJQUFJQyxJQUFTSyxFQUFpQkUsS0FBWTtRQUN6Q0MsR0FBR0Q7UUFDSEUsSUFBRztRQUNIVixTQUFTO01BQUE7TUFVVixPQU5BVyxFQUFRSCxHQUFVSSxLQUFLWCxFQUFPRCxTQUFTQyxHQUFRQSxFQUFPRCxTQUFTTyxJQUcvRE4sRUFBT1MsS0FBSSxHQUdKVCxFQUFPRDtJQUFBQTtJQTBEZixPQXJEQU8sRUFBb0JNLElBQUlGLEdBR3hCSixFQUFvQk8sSUFBSVIsR0FHeEJDLEVBQW9CUSxJQUFJLFVBQVNmLEdBQVNnQixHQUFNQztNQUMzQ1YsRUFBb0JXLEVBQUVsQixHQUFTZ0IsTUFDbENHLE9BQU9DLGVBQWVwQixHQUFTZ0IsR0FBTTtRQUFFSyxhQUFZO1FBQU1DLEtBQUtMO01BQUFBO0lBQUFBLEdBS2hFVixFQUFvQmdCLElBQUksVUFBU3ZCO01BQ1gsc0JBQVh3QixVQUEwQkEsT0FBT0MsZUFDMUNOLE9BQU9DLGVBQWVwQixHQUFTd0IsT0FBT0MsYUFBYTtRQUFFQyxPQUFPO01BQUEsSUFFN0RQLE9BQU9DLGVBQWVwQixHQUFTLGNBQWM7UUFBRTBCLFFBQU87TUFBQTtJQUFBLEdBUXZEbkIsRUFBb0JvQixJQUFJLFVBQVNELEdBQU9FO01BRXZDLElBRFUsSUFBUEEsTUFBVUYsSUFB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QUFFO01BQ1YwUCxNQUFNLENBQUNvTixZQUFZLENBQUNoVSxLQUFLLEVBQUU5SSxNQUFNLENBQUM7SUFDcEMsQ0FBQyxNQUFNO01BQ0wwUCxNQUFNLENBQUN0VSxXQUFXLENBQUMwTixLQUFLLENBQUM7SUFDM0I7RUFDRixDQUFDLENBQUM7QUFDSjtBQUVBLFNBQVMwZix1QkFBdUIsR0FBRztFQUNqQ2pDLGlCQUFpQixDQUFDcm1CLE9BQU8sQ0FBQyxVQUFVc25CLGdCQUFnQixFQUFFO0lBQ3BELElBQUlBLGdCQUFnQixLQUFLWCxRQUFRLEVBQUU7SUFDbkNXLGdCQUFnQixDQUFDdmpCLFVBQVUsSUFBSXVqQixnQkFBZ0IsQ0FBQ3ZqQixVQUFVLENBQUNzYixXQUFXLENBQUNpSSxnQkFBZ0IsQ0FBQztFQUMxRixDQUFDLENBQUM7QUFDSjtBQUVBcmYsUUFBUSxDQUFDb0csS0FBSyxDQUFDLElBQUlpVSxnQkFBZ0IsRUFBRSxDQUFDO0FBQ3RDcmEsUUFBUSxDQUFDb0csS0FBSyxDQUFDNlcsTUFBTSxFQUFFSixNQUFNLENBQUM7QUFFOUIsK0RBQWU3YyxRQUFRLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9CdWlsZGVyQ3YvQ0tFZGl0b3Ivd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL0J1aWxkZXJDdi9DS0VkaXRvci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9CdWlsZGVyQ3YvQ0tFZGl0b3Ivbm9kZV9tb2R1bGVzL2NrZWRpdG9yNC1pbnRlZ3JhdGlvbnMtY29tbW9uL2Rpc3QvaW5kZXguZXNtLmpzIiwid2VicGFjazovL0J1aWxkZXJDdi9DS0VkaXRvci9zcmMvY2tlZGl0b3IuanMiLCJ3ZWJwYWNrOi8vQnVpbGRlckN2L0NLRWRpdG9yL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9CdWlsZGVyQ3YvLi4vY29tcG9uZW50c19ib290c3RyYXB2dWVqcy9ub2RlX21vZHVsZXMvc29ydGFibGVqcy9tb2R1bGFyL3NvcnRhYmxlLmVzbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJDS0VkaXRvclwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJDS0VkaXRvclwiXSA9IGZhY3RvcnkoKTtcbn0pKHdpbmRvdywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiLyoqXG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgKGMpIDIwMDMtMjAyMSwgQ0tTb3VyY2UgLSBGcmVkZXJpY28gS25hYmJlbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIEZvciBsaWNlbnNpbmcsIHNlZSBMSUNFTlNFLm1kLlxuICovXG5mdW5jdGlvbiBsb2FkU2NyaXB0IChzcmMsIG9wdHMsIGNiKSB7XG4gIHZhciBoZWFkID0gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gb3B0cztcbiAgICBvcHRzID0ge307XG4gIH1cbiAgb3B0cyA9IG9wdHMgfHwge307XG4gIGNiID0gY2IgfHwgZnVuY3Rpb24gKCkge307XG4gIHNjcmlwdC50eXBlID0gb3B0cy50eXBlIHx8ICd0ZXh0L2phdmFzY3JpcHQnO1xuICBzY3JpcHQuY2hhcnNldCA9IG9wdHMuY2hhcnNldCB8fCAndXRmOCc7XG4gIHNjcmlwdC5hc3luYyA9ICdhc3luYycgaW4gb3B0cyA/ICEhb3B0cy5hc3luYyA6IHRydWU7XG4gIHNjcmlwdC5zcmMgPSBzcmM7XG4gIGlmIChvcHRzLmF0dHJzKSB7XG4gICAgc2V0QXR0cmlidXRlcyhzY3JpcHQsIG9wdHMuYXR0cnMpO1xuICB9XG4gIGlmIChvcHRzLnRleHQpIHtcbiAgICBzY3JpcHQudGV4dCA9IFN0cmluZyhvcHRzLnRleHQpO1xuICB9XG4gIHZhciBvbmVuZCA9ICdvbmxvYWQnIGluIHNjcmlwdCA/IHN0ZE9uRW5kIDogaWVPbkVuZDtcbiAgb25lbmQoc2NyaXB0LCBjYik7XG4gIGlmICghc2NyaXB0Lm9ubG9hZCkge1xuICAgIHN0ZE9uRW5kKHNjcmlwdCwgY2IpO1xuICB9XG4gIGhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbn1cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXMoc2NyaXB0LCBhdHRycykge1xuICBmb3IgKHZhciBhdHRyIGluIGF0dHJzKSB7XG4gICAgc2NyaXB0LnNldEF0dHJpYnV0ZShhdHRyLCBhdHRyc1thdHRyXSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHN0ZE9uRW5kKHNjcmlwdCwgY2IpIHtcbiAgc2NyaXB0Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLm9uZXJyb3IgPSB0aGlzLm9ubG9hZCA9IG51bGw7XG4gICAgY2IobnVsbCwgc2NyaXB0KTtcbiAgfTtcbiAgc2NyaXB0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5vbmVycm9yID0gdGhpcy5vbmxvYWQgPSBudWxsO1xuICAgIGNiKG5ldyBFcnJvcignRmFpbGVkIHRvIGxvYWQgJyArIHRoaXMuc3JjKSwgc2NyaXB0KTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGllT25FbmQoc2NyaXB0LCBjYikge1xuICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgIT0gJ2NvbXBsZXRlJyAmJiB0aGlzLnJlYWR5U3RhdGUgIT0gJ2xvYWRlZCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuICAgIGNiKG51bGwsIHNjcmlwdCk7XG4gIH07XG59XG5cbnZhciBwcm9taXNlO1xuZnVuY3Rpb24gZ2V0RWRpdG9yTmFtZXNwYWNlKGVkaXRvclVSTCwgb25OYW1lc3BhY2VMb2FkZWQpIHtcbiAgaWYgKCdDS0VESVRPUicgaW4gd2luZG93KSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShDS0VESVRPUik7XG4gIH1cbiAgaWYgKHR5cGVvZiBlZGl0b3JVUkwgIT09ICdzdHJpbmcnIHx8IGVkaXRvclVSTC5sZW5ndGggPCAxKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBUeXBlRXJyb3IoJ0NLRWRpdG9yIFVSTCBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZy4nKSk7XG4gIH1cbiAgaWYgKCFwcm9taXNlKSB7XG4gICAgcHJvbWlzZSA9IGdldEVkaXRvck5hbWVzcGFjZS5zY3JpcHRMb2FkZXIoZWRpdG9yVVJMKS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgIGlmIChvbk5hbWVzcGFjZUxvYWRlZCkge1xuICAgICAgICBvbk5hbWVzcGFjZUxvYWRlZChyZXMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlcztcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gcHJvbWlzZTtcbn1cbmdldEVkaXRvck5hbWVzcGFjZS5zY3JpcHRMb2FkZXIgPSBmdW5jdGlvbiAoZWRpdG9yVVJMKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoc2NyaXB0UmVzb2x2ZSwgc2NyaXB0UmVqZWN0KSB7XG4gICAgbG9hZFNjcmlwdChlZGl0b3JVUkwsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIHByb21pc2UgPSB1bmRlZmluZWQ7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBzY3JpcHRSZWplY3QoZXJyKTtcbiAgICAgIH0gZWxzZSBpZiAoIXdpbmRvdy5DS0VESVRPUikge1xuICAgICAgICByZXR1cm4gc2NyaXB0UmVqZWN0KG5ldyBFcnJvcignU2NyaXB0IGxvYWRlZCBmcm9tIGVkaXRvclVybCBkb2VzblxcJ3QgcHJvdmlkZSBDS0VESVRPUiBuYW1lc3BhY2UuJykpO1xuICAgICAgfVxuICAgICAgc2NyaXB0UmVzb2x2ZShDS0VESVRPUik7XG4gICAgfSk7XG4gIH0pO1xufTtcblxuZnVuY3Rpb24gZGVib3VuY2UoZm4sIGRlbGF5KSB7XG4gIHZhciBjb250ZXh0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgdmFyIGNhbmNlbDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBjbGVhclRpbWVvdXQoY2FuY2VsKTtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuICAgIGNhbmNlbCA9IHNldFRpbWVvdXQoZm4uYmluZC5hcHBseShmbiwgW2NvbnRleHRdLmNvbmNhdChhcmdzKSksIGRlbGF5KTtcbiAgfTtcbn1cblxuZXhwb3J0IHsgZGVib3VuY2UsIGdldEVkaXRvck5hbWVzcGFjZSB9O1xuIiwiLyoqXG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgKGMpIDIwMDMtMjAyMiwgQ0tTb3VyY2UgSG9sZGluZyBzcC4geiBvLm8uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZC5cbiAqL1xuXG4vKiBnbG9iYWwgQ0tFRElUT1IgKi9cblxuaW1wb3J0IHsgZGVib3VuY2UsIGdldEVkaXRvck5hbWVzcGFjZSB9IGZyb20gJ2NrZWRpdG9yNC1pbnRlZ3JhdGlvbnMtY29tbW9uJztcblxuZXhwb3J0IGRlZmF1bHQge1xuXHRuYW1lOiAnY2tlZGl0b3InLFxuXG5cdHJlbmRlciggY3JlYXRlRWxlbWVudCApIHtcblx0XHRyZXR1cm4gY3JlYXRlRWxlbWVudCggJ2RpdicsIHt9LCBbXG5cdFx0XHRjcmVhdGVFbGVtZW50KCB0aGlzLnRhZ05hbWUgKVxuXHRcdF0gKTtcblx0fSxcblxuXHRwcm9wczoge1xuXHRcdHZhbHVlOiB7XG5cdFx0XHR0eXBlOiBTdHJpbmcsXG5cdFx0XHRkZWZhdWx0OiAnJ1xuXHRcdH0sXG5cdFx0dHlwZToge1xuXHRcdFx0dHlwZTogU3RyaW5nLFxuXHRcdFx0ZGVmYXVsdDogJ2NsYXNzaWMnLFxuXHRcdFx0dmFsaWRhdG9yOiB0eXBlID0+IFsgJ2NsYXNzaWMnLCAnaW5saW5lJyBdLmluY2x1ZGVzKCB0eXBlIClcblx0XHR9LFxuXHRcdGVkaXRvclVybDoge1xuXHRcdFx0dHlwZTogU3RyaW5nLFxuXHRcdFx0ZGVmYXVsdDogJ2h0dHBzOi8vY2RuLmNrZWRpdG9yLmNvbS80LjIwLjEvc3RhbmRhcmQtYWxsL2NrZWRpdG9yLmpzJ1xuXHRcdH0sXG5cdFx0Y29uZmlnOiB7XG5cdFx0XHR0eXBlOiBPYmplY3QsXG5cdFx0XHRkZWZhdWx0OiAoKSA9PiB7fVxuXHRcdH0sXG5cdFx0dGFnTmFtZToge1xuXHRcdFx0dHlwZTogU3RyaW5nLFxuXHRcdFx0ZGVmYXVsdDogJ3RleHRhcmVhJ1xuXHRcdH0sXG5cdFx0cmVhZE9ubHk6IHtcblx0XHRcdHR5cGU6IEJvb2xlYW4sXG5cdFx0XHRkZWZhdWx0OiBudWxsIC8vIFVzZSBudWxsIGFzIHRoZSBkZWZhdWx0IHZhbHVlLCBzbyBgY29uZmlnLnJlYWRPbmx5YCBjYW4gdGFrZSBwcmVjZWRlbmNlLlxuXHRcdH0sXG5cdFx0dGhyb3R0bGU6IHtcblx0XHRcdHR5cGU6IE51bWJlcixcblx0XHRcdGRlZmF1bHQ6IDgwXG5cdFx0fVxuXHR9LFxuXG5cdG1vdW50ZWQoKSB7XG5cdFx0Z2V0RWRpdG9yTmFtZXNwYWNlKCB0aGlzLmVkaXRvclVybCwgbmFtZXNwYWNlID0+IHtcblx0XHRcdHRoaXMuJGVtaXQoICduYW1lc3BhY2Vsb2FkZWQnLCBuYW1lc3BhY2UgKTtcblx0XHR9ICkudGhlbiggKCkgPT4ge1xuXHRcdFx0aWYgKCB0aGlzLiRfZGVzdHJveWVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGNvbmZpZyA9IHRoaXMucHJlcGFyZUNvbmZpZygpO1xuXHRcdFx0Y29uc3QgbWV0aG9kID0gdGhpcy50eXBlID09PSAnaW5saW5lJyA/ICdpbmxpbmUnIDogJ3JlcGxhY2UnO1xuXHRcdFx0Y29uc3QgZWxlbWVudCA9IHRoaXMuJGVsLmZpcnN0RWxlbWVudENoaWxkO1xuXG5cdFx0XHRDS0VESVRPUlsgbWV0aG9kIF0oIGVsZW1lbnQsIGNvbmZpZyApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmVEZXN0cm95KCkge1xuXHRcdGlmICggdGhpcy5pbnN0YW5jZSApIHtcblx0XHRcdHRoaXMuaW5zdGFuY2UuZGVzdHJveSgpO1xuXHRcdH1cblxuXHRcdHRoaXMuJF9kZXN0cm95ZWQgPSB0cnVlO1xuXHR9LFxuXG5cdHdhdGNoOiB7XG5cdFx0dmFsdWUoIHZhbCApIHtcblx0XHRcdGlmICggdGhpcy5pbnN0YW5jZSAmJiB0aGlzLmluc3RhbmNlLmdldERhdGEoKSAhPT0gdmFsICkge1xuXHRcdFx0XHR0aGlzLmluc3RhbmNlLnNldERhdGEoIHZhbCApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRyZWFkT25seSggdmFsICkge1xuXHRcdFx0aWYgKCB0aGlzLmluc3RhbmNlICkge1xuXHRcdFx0XHR0aGlzLmluc3RhbmNlLnNldFJlYWRPbmx5KCB2YWwgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0bWV0aG9kczoge1xuXHRcdHByZXBhcmVDb25maWcoKSB7XG5cdFx0XHRjb25zdCBjb25maWcgPSB0aGlzLmNvbmZpZyB8fCB7fTtcblx0XHRcdGNvbmZpZy5vbiA9IGNvbmZpZy5vbiB8fCB7fTtcblxuXHRcdFx0aWYgKCBjb25maWcuZGVsYXlJZkRldGFjaGVkID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGNvbmZpZy5kZWxheUlmRGV0YWNoZWQgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB0aGlzLnJlYWRPbmx5ICE9PSBudWxsICkge1xuXHRcdFx0XHRjb25maWcucmVhZE9ubHkgPSB0aGlzLnJlYWRPbmx5O1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCB1c2VySW5zdGFuY2VSZWFkeUNhbGxiYWNrID0gY29uZmlnLm9uLmluc3RhbmNlUmVhZHk7XG5cblx0XHRcdGNvbmZpZy5vbi5pbnN0YW5jZVJlYWR5ID0gZXZ0ID0+IHtcblx0XHRcdFx0dGhpcy5pbnN0YW5jZSA9IGV2dC5lZGl0b3I7XG5cblx0XHRcdFx0dGhpcy4kbmV4dFRpY2soKS50aGVuKCAoKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5wcmVwYXJlQ29tcG9uZW50RGF0YSgpO1xuXG5cdFx0XHRcdFx0aWYgKCB1c2VySW5zdGFuY2VSZWFkeUNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dXNlckluc3RhbmNlUmVhZHlDYWxsYmFjayggZXZ0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9O1xuXG5cdFx0XHRyZXR1cm4gY29uZmlnO1xuXHRcdH0sXG5cdFx0cHJlcGFyZUNvbXBvbmVudERhdGEoKSB7XG5cdFx0XHRjb25zdCBkYXRhID0gdGhpcy52YWx1ZTtcblxuXHRcdFx0dGhpcy5pbnN0YW5jZS5maXJlKCAnbG9ja1NuYXBzaG90JyApO1xuXG5cdFx0XHR0aGlzLmluc3RhbmNlLnNldERhdGEoIGRhdGEsIHsgY2FsbGJhY2s6ICgpID0+IHtcblx0XHRcdFx0dGhpcy4kX3NldFVwRWRpdG9yRXZlbnRzKCk7XG5cblx0XHRcdFx0Y29uc3QgbmV3RGF0YSA9IHRoaXMuaW5zdGFuY2UuZ2V0RGF0YSgpO1xuXG5cdFx0XHRcdC8vIExvY2tpbmcgdGhlIHNuYXBzaG90IHByZXZlbnRzIHRoZSAnY2hhbmdlJyBldmVudC5cblx0XHRcdFx0Ly8gVHJpZ2dlciBpdCBtYW51YWxseSB0byB1cGRhdGUgdGhlIGJvdW5kIGRhdGEuXG5cdFx0XHRcdGlmICggZGF0YSAhPT0gbmV3RGF0YSApIHtcblx0XHRcdFx0XHR0aGlzLiRvbmNlKCAnaW5wdXQnLCAoKSA9PiB7XG5cdFx0XHRcdFx0XHR0aGlzLiRlbWl0KCAncmVhZHknLCB0aGlzLmluc3RhbmNlICk7XG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdFx0dGhpcy4kZW1pdCggJ2lucHV0JywgbmV3RGF0YSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuJGVtaXQoICdyZWFkeScsIHRoaXMuaW5zdGFuY2UgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMuaW5zdGFuY2UuZmlyZSggJ3VubG9ja1NuYXBzaG90JyApO1xuXHRcdFx0fSB9ICk7XG5cdFx0fSxcblx0XHQkX3NldFVwRWRpdG9yRXZlbnRzKCkge1xuXHRcdFx0Y29uc3QgZWRpdG9yID0gdGhpcy5pbnN0YW5jZTtcblxuXHRcdFx0Y29uc3Qgb25DaGFuZ2UgPSBkZWJvdW5jZSggZXZ0ID0+IHtcblx0XHRcdFx0Y29uc3QgZGF0YSA9IGVkaXRvci5nZXREYXRhKCk7XG5cblx0XHRcdFx0Ly8gRWRpdG9yI2NoYW5nZSBldmVudCBtaWdodCBiZSBmaXJlZCB3aXRob3V0IGFuIGFjdHVhbCBkYXRhIGNoYW5nZS5cblx0XHRcdFx0aWYgKCB0aGlzLnZhbHVlICE9PSBkYXRhICkge1xuXHRcdFx0XHRcdC8vIFRoZSBjb21wYXRpYmlsaXR5IHdpdGggdGhlIHYtbW9kZWwgYW5kIGdlbmVyYWwgVnVlLmpzIGNvbmNlcHQgb2YgaW5wdXTigJNsaWtlIGNvbXBvbmVudHMuXG5cdFx0XHRcdFx0dGhpcy4kZW1pdCggJ2lucHV0JywgZGF0YSwgZXZ0LCBlZGl0b3IgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcy50aHJvdHRsZSApO1xuXG5cdFx0XHRlZGl0b3Iub24oICdjaGFuZ2UnLCBvbkNoYW5nZSApO1xuXG5cdFx0XHRlZGl0b3Iub24oICdmb2N1cycsIGV2dCA9PiB7XG5cdFx0XHRcdHRoaXMuJGVtaXQoICdmb2N1cycsIGV2dCwgZWRpdG9yICk7XG5cdFx0XHR9ICk7XG5cblx0XHRcdGVkaXRvci5vbiggJ2JsdXInLCBldnQgPT4ge1xuXHRcdFx0XHR0aGlzLiRlbWl0KCAnYmx1cicsIGV2dCwgZWRpdG9yICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXHR9XG59O1xuIiwiLyoqXG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgKGMpIDIwMDMtMjAyMiwgQ0tTb3VyY2UgSG9sZGluZyBzcC4geiBvLm8uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZC5cbiAqL1xuXG5pbXBvcnQgQ0tFZGl0b3JDb21wb25lbnQgZnJvbSAnLi9ja2VkaXRvci5qcyc7XG5cbmNvbnN0IENLRWRpdG9yID0ge1xuXHQvKipcblx0ICogSW5zdGFsbHMgdGhlIHBsdWdpbiwgcmVnaXN0ZXJpbmcgdGhlIGA8Y2tlZGl0b3I+YCBjb21wb25lbnQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7VnVlfSBWdWUgVGhlIFZ1ZSBvYmplY3QuXG5cdCAqL1xuXHRpbnN0YWxsKCBWdWUgKSB7XG5cdFx0VnVlLmNvbXBvbmVudCggJ2NrZWRpdG9yJywgQ0tFZGl0b3JDb21wb25lbnQgKTtcblx0fSxcblx0Y29tcG9uZW50OiBDS0VkaXRvckNvbXBvbmVudFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ0tFZGl0b3I7XG4iLCIvKiohXG4gKiBTb3J0YWJsZSAxLjE1LjBcbiAqIEBhdXRob3JcdFJ1YmFYYSAgIDx0cmFzaEBydWJheGEub3JnPlxuICogQGF1dGhvclx0b3dlbm0gICAgPG93ZW4yMzM1NUBnbWFpbC5jb20+XG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpO1xuXG4gICAgaWYgKGVudW1lcmFibGVPbmx5KSB7XG4gICAgICBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTtcbiAgfVxuXG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgIGlmIChpICUgMikge1xuICAgICAgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcblxuICB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7XG5cbiAgdmFyIGtleSwgaTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpO1xufVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIpO1xufVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlcltTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuXG4gIHJldHVybiBhcnIyO1xufVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG52YXIgdmVyc2lvbiA9IFwiMS4xNS4wXCI7XG5cbmZ1bmN0aW9uIHVzZXJBZ2VudChwYXR0ZXJuKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cubmF2aWdhdG9yKSB7XG4gICAgcmV0dXJuICEhIC8qQF9fUFVSRV9fKi9uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKHBhdHRlcm4pO1xuICB9XG59XG5cbnZhciBJRTExT3JMZXNzID0gdXNlckFnZW50KC8oPzpUcmlkZW50LipydlsgOl0/MTFcXC58bXNpZXxpZW1vYmlsZXxXaW5kb3dzIFBob25lKS9pKTtcbnZhciBFZGdlID0gdXNlckFnZW50KC9FZGdlL2kpO1xudmFyIEZpcmVGb3ggPSB1c2VyQWdlbnQoL2ZpcmVmb3gvaSk7XG52YXIgU2FmYXJpID0gdXNlckFnZW50KC9zYWZhcmkvaSkgJiYgIXVzZXJBZ2VudCgvY2hyb21lL2kpICYmICF1c2VyQWdlbnQoL2FuZHJvaWQvaSk7XG52YXIgSU9TID0gdXNlckFnZW50KC9pUChhZHxvZHxob25lKS9pKTtcbnZhciBDaHJvbWVGb3JBbmRyb2lkID0gdXNlckFnZW50KC9jaHJvbWUvaSkgJiYgdXNlckFnZW50KC9hbmRyb2lkL2kpO1xuXG52YXIgY2FwdHVyZU1vZGUgPSB7XG4gIGNhcHR1cmU6IGZhbHNlLFxuICBwYXNzaXZlOiBmYWxzZVxufTtcblxuZnVuY3Rpb24gb24oZWwsIGV2ZW50LCBmbikge1xuICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBmbiwgIUlFMTFPckxlc3MgJiYgY2FwdHVyZU1vZGUpO1xufVxuXG5mdW5jdGlvbiBvZmYoZWwsIGV2ZW50LCBmbikge1xuICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBmbiwgIUlFMTFPckxlc3MgJiYgY2FwdHVyZU1vZGUpO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVzKFxuLyoqSFRNTEVsZW1lbnQqL1xuZWwsXG4vKipTdHJpbmcqL1xuc2VsZWN0b3IpIHtcbiAgaWYgKCFzZWxlY3RvcikgcmV0dXJuO1xuICBzZWxlY3RvclswXSA9PT0gJz4nICYmIChzZWxlY3RvciA9IHNlbGVjdG9yLnN1YnN0cmluZygxKSk7XG5cbiAgaWYgKGVsKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChlbC5tYXRjaGVzKSB7XG4gICAgICAgIHJldHVybiBlbC5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgICAgIH0gZWxzZSBpZiAoZWwubXNNYXRjaGVzU2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGVsLm1zTWF0Y2hlc1NlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgIH0gZWxzZSBpZiAoZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBlbC53ZWJraXRNYXRjaGVzU2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGdldFBhcmVudE9ySG9zdChlbCkge1xuICByZXR1cm4gZWwuaG9zdCAmJiBlbCAhPT0gZG9jdW1lbnQgJiYgZWwuaG9zdC5ub2RlVHlwZSA/IGVsLmhvc3QgOiBlbC5wYXJlbnROb2RlO1xufVxuXG5mdW5jdGlvbiBjbG9zZXN0KFxuLyoqSFRNTEVsZW1lbnQqL1xuZWwsXG4vKipTdHJpbmcqL1xuc2VsZWN0b3IsXG4vKipIVE1MRWxlbWVudCovXG5jdHgsIGluY2x1ZGVDVFgpIHtcbiAgaWYgKGVsKSB7XG4gICAgY3R4ID0gY3R4IHx8IGRvY3VtZW50O1xuXG4gICAgZG8ge1xuICAgICAgaWYgKHNlbGVjdG9yICE9IG51bGwgJiYgKHNlbGVjdG9yWzBdID09PSAnPicgPyBlbC5wYXJlbnROb2RlID09PSBjdHggJiYgbWF0Y2hlcyhlbCwgc2VsZWN0b3IpIDogbWF0Y2hlcyhlbCwgc2VsZWN0b3IpKSB8fCBpbmNsdWRlQ1RYICYmIGVsID09PSBjdHgpIHtcbiAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgfVxuXG4gICAgICBpZiAoZWwgPT09IGN0eCkgYnJlYWs7XG4gICAgICAvKiBqc2hpbnQgYm9zczp0cnVlICovXG4gICAgfSB3aGlsZSAoZWwgPSBnZXRQYXJlbnRPckhvc3QoZWwpKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG52YXIgUl9TUEFDRSA9IC9cXHMrL2c7XG5cbmZ1bmN0aW9uIHRvZ2dsZUNsYXNzKGVsLCBuYW1lLCBzdGF0ZSkge1xuICBpZiAoZWwgJiYgbmFtZSkge1xuICAgIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICAgIGVsLmNsYXNzTGlzdFtzdGF0ZSA/ICdhZGQnIDogJ3JlbW92ZSddKG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY2xhc3NOYW1lID0gKCcgJyArIGVsLmNsYXNzTmFtZSArICcgJykucmVwbGFjZShSX1NQQUNFLCAnICcpLnJlcGxhY2UoJyAnICsgbmFtZSArICcgJywgJyAnKTtcbiAgICAgIGVsLmNsYXNzTmFtZSA9IChjbGFzc05hbWUgKyAoc3RhdGUgPyAnICcgKyBuYW1lIDogJycpKS5yZXBsYWNlKFJfU1BBQ0UsICcgJyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNzcyhlbCwgcHJvcCwgdmFsKSB7XG4gIHZhciBzdHlsZSA9IGVsICYmIGVsLnN0eWxlO1xuXG4gIGlmIChzdHlsZSkge1xuICAgIGlmICh2YWwgPT09IHZvaWQgMCkge1xuICAgICAgaWYgKGRvY3VtZW50LmRlZmF1bHRWaWV3ICYmIGRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUpIHtcbiAgICAgICAgdmFsID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgJycpO1xuICAgICAgfSBlbHNlIGlmIChlbC5jdXJyZW50U3R5bGUpIHtcbiAgICAgICAgdmFsID0gZWwuY3VycmVudFN0eWxlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvcCA9PT0gdm9pZCAwID8gdmFsIDogdmFsW3Byb3BdO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIShwcm9wIGluIHN0eWxlKSAmJiBwcm9wLmluZGV4T2YoJ3dlYmtpdCcpID09PSAtMSkge1xuICAgICAgICBwcm9wID0gJy13ZWJraXQtJyArIHByb3A7XG4gICAgICB9XG5cbiAgICAgIHN0eWxlW3Byb3BdID0gdmFsICsgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnID8gJycgOiAncHgnKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbWF0cml4KGVsLCBzZWxmT25seSkge1xuICB2YXIgYXBwbGllZFRyYW5zZm9ybXMgPSAnJztcblxuICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xuICAgIGFwcGxpZWRUcmFuc2Zvcm1zID0gZWw7XG4gIH0gZWxzZSB7XG4gICAgZG8ge1xuICAgICAgdmFyIHRyYW5zZm9ybSA9IGNzcyhlbCwgJ3RyYW5zZm9ybScpO1xuXG4gICAgICBpZiAodHJhbnNmb3JtICYmIHRyYW5zZm9ybSAhPT0gJ25vbmUnKSB7XG4gICAgICAgIGFwcGxpZWRUcmFuc2Zvcm1zID0gdHJhbnNmb3JtICsgJyAnICsgYXBwbGllZFRyYW5zZm9ybXM7XG4gICAgICB9XG4gICAgICAvKiBqc2hpbnQgYm9zczp0cnVlICovXG5cbiAgICB9IHdoaWxlICghc2VsZk9ubHkgJiYgKGVsID0gZWwucGFyZW50Tm9kZSkpO1xuICB9XG5cbiAgdmFyIG1hdHJpeEZuID0gd2luZG93LkRPTU1hdHJpeCB8fCB3aW5kb3cuV2ViS2l0Q1NTTWF0cml4IHx8IHdpbmRvdy5DU1NNYXRyaXggfHwgd2luZG93Lk1TQ1NTTWF0cml4O1xuICAvKmpzaGludCAtVzA1NiAqL1xuXG4gIHJldHVybiBtYXRyaXhGbiAmJiBuZXcgbWF0cml4Rm4oYXBwbGllZFRyYW5zZm9ybXMpO1xufVxuXG5mdW5jdGlvbiBmaW5kKGN0eCwgdGFnTmFtZSwgaXRlcmF0b3IpIHtcbiAgaWYgKGN0eCkge1xuICAgIHZhciBsaXN0ID0gY3R4LmdldEVsZW1lbnRzQnlUYWdOYW1lKHRhZ05hbWUpLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgbiA9IGxpc3QubGVuZ3RoO1xuXG4gICAgaWYgKGl0ZXJhdG9yKSB7XG4gICAgICBmb3IgKDsgaSA8IG47IGkrKykge1xuICAgICAgICBpdGVyYXRvcihsaXN0W2ldLCBpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbGlzdDtcbiAgfVxuXG4gIHJldHVybiBbXTtcbn1cblxuZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpIHtcbiAgdmFyIHNjcm9sbGluZ0VsZW1lbnQgPSBkb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50O1xuXG4gIGlmIChzY3JvbGxpbmdFbGVtZW50KSB7XG4gICAgcmV0dXJuIHNjcm9sbGluZ0VsZW1lbnQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBcImJvdW5kaW5nIGNsaWVudCByZWN0XCIgb2YgZ2l2ZW4gZWxlbWVudFxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsICAgICAgICAgICAgICAgICAgICAgICBUaGUgZWxlbWVudCB3aG9zZSBib3VuZGluZ0NsaWVudFJlY3QgaXMgd2FudGVkXG4gKiBAcGFyYW0gIHtbQm9vbGVhbl19IHJlbGF0aXZlVG9Db250YWluaW5nQmxvY2sgIFdoZXRoZXIgdGhlIHJlY3Qgc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBjb250YWluaW5nIGJsb2NrIG9mIChpbmNsdWRpbmcpIHRoZSBjb250YWluZXJcbiAqIEBwYXJhbSAge1tCb29sZWFuXX0gcmVsYXRpdmVUb05vblN0YXRpY1BhcmVudCAgV2hldGhlciB0aGUgcmVjdCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIHJlbGF0aXZlIHBhcmVudCBvZiAoaW5jbHVkaW5nKSB0aGUgY29udGFpZW5yXG4gKiBAcGFyYW0gIHtbQm9vbGVhbl19IHVuZG9TY2FsZSAgICAgICAgICAgICAgICAgIFdoZXRoZXIgdGhlIGNvbnRhaW5lcidzIHNjYWxlKCkgc2hvdWxkIGJlIHVuZG9uZVxuICogQHBhcmFtICB7W0hUTUxFbGVtZW50XX0gY29udGFpbmVyICAgICAgICAgICAgICBUaGUgcGFyZW50IHRoZSBlbGVtZW50IHdpbGwgYmUgcGxhY2VkIGluXG4gKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBib3VuZGluZ0NsaWVudFJlY3Qgb2YgZWwsIHdpdGggc3BlY2lmaWVkIGFkanVzdG1lbnRzXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRSZWN0KGVsLCByZWxhdGl2ZVRvQ29udGFpbmluZ0Jsb2NrLCByZWxhdGl2ZVRvTm9uU3RhdGljUGFyZW50LCB1bmRvU2NhbGUsIGNvbnRhaW5lcikge1xuICBpZiAoIWVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCAmJiBlbCAhPT0gd2luZG93KSByZXR1cm47XG4gIHZhciBlbFJlY3QsIHRvcCwgbGVmdCwgYm90dG9tLCByaWdodCwgaGVpZ2h0LCB3aWR0aDtcblxuICBpZiAoZWwgIT09IHdpbmRvdyAmJiBlbC5wYXJlbnROb2RlICYmIGVsICE9PSBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCkpIHtcbiAgICBlbFJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB0b3AgPSBlbFJlY3QudG9wO1xuICAgIGxlZnQgPSBlbFJlY3QubGVmdDtcbiAgICBib3R0b20gPSBlbFJlY3QuYm90dG9tO1xuICAgIHJpZ2h0ID0gZWxSZWN0LnJpZ2h0O1xuICAgIGhlaWdodCA9IGVsUmVjdC5oZWlnaHQ7XG4gICAgd2lkdGggPSBlbFJlY3Qud2lkdGg7XG4gIH0gZWxzZSB7XG4gICAgdG9wID0gMDtcbiAgICBsZWZ0ID0gMDtcbiAgICBib3R0b20gPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgcmlnaHQgPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICBoZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgd2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgfVxuXG4gIGlmICgocmVsYXRpdmVUb0NvbnRhaW5pbmdCbG9jayB8fCByZWxhdGl2ZVRvTm9uU3RhdGljUGFyZW50KSAmJiBlbCAhPT0gd2luZG93KSB7XG4gICAgLy8gQWRqdXN0IGZvciB0cmFuc2xhdGUoKVxuICAgIGNvbnRhaW5lciA9IGNvbnRhaW5lciB8fCBlbC5wYXJlbnROb2RlOyAvLyBzb2x2ZXMgIzExMjMgKHNlZTogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM3OTUzODA2LzYwODgzMTIpXG4gICAgLy8gTm90IG5lZWRlZCBvbiA8PSBJRTExXG5cbiAgICBpZiAoIUlFMTFPckxlc3MpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKGNvbnRhaW5lciAmJiBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICYmIChjc3MoY29udGFpbmVyLCAndHJhbnNmb3JtJykgIT09ICdub25lJyB8fCByZWxhdGl2ZVRvTm9uU3RhdGljUGFyZW50ICYmIGNzcyhjb250YWluZXIsICdwb3NpdGlvbicpICE9PSAnc3RhdGljJykpIHtcbiAgICAgICAgICB2YXIgY29udGFpbmVyUmVjdCA9IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsgLy8gU2V0IHJlbGF0aXZlIHRvIGVkZ2VzIG9mIHBhZGRpbmcgYm94IG9mIGNvbnRhaW5lclxuXG4gICAgICAgICAgdG9wIC09IGNvbnRhaW5lclJlY3QudG9wICsgcGFyc2VJbnQoY3NzKGNvbnRhaW5lciwgJ2JvcmRlci10b3Atd2lkdGgnKSk7XG4gICAgICAgICAgbGVmdCAtPSBjb250YWluZXJSZWN0LmxlZnQgKyBwYXJzZUludChjc3MoY29udGFpbmVyLCAnYm9yZGVyLWxlZnQtd2lkdGgnKSk7XG4gICAgICAgICAgYm90dG9tID0gdG9wICsgZWxSZWN0LmhlaWdodDtcbiAgICAgICAgICByaWdodCA9IGxlZnQgKyBlbFJlY3Qud2lkdGg7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLyoganNoaW50IGJvc3M6dHJ1ZSAqL1xuXG4gICAgICB9IHdoaWxlIChjb250YWluZXIgPSBjb250YWluZXIucGFyZW50Tm9kZSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHVuZG9TY2FsZSAmJiBlbCAhPT0gd2luZG93KSB7XG4gICAgLy8gQWRqdXN0IGZvciBzY2FsZSgpXG4gICAgdmFyIGVsTWF0cml4ID0gbWF0cml4KGNvbnRhaW5lciB8fCBlbCksXG4gICAgICAgIHNjYWxlWCA9IGVsTWF0cml4ICYmIGVsTWF0cml4LmEsXG4gICAgICAgIHNjYWxlWSA9IGVsTWF0cml4ICYmIGVsTWF0cml4LmQ7XG5cbiAgICBpZiAoZWxNYXRyaXgpIHtcbiAgICAgIHRvcCAvPSBzY2FsZVk7XG4gICAgICBsZWZ0IC89IHNjYWxlWDtcbiAgICAgIHdpZHRoIC89IHNjYWxlWDtcbiAgICAgIGhlaWdodCAvPSBzY2FsZVk7XG4gICAgICBib3R0b20gPSB0b3AgKyBoZWlnaHQ7XG4gICAgICByaWdodCA9IGxlZnQgKyB3aWR0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRvcDogdG9wLFxuICAgIGxlZnQ6IGxlZnQsXG4gICAgYm90dG9tOiBib3R0b20sXG4gICAgcmlnaHQ6IHJpZ2h0LFxuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodFxuICB9O1xufVxuLyoqXG4gKiBDaGVja3MgaWYgYSBzaWRlIG9mIGFuIGVsZW1lbnQgaXMgc2Nyb2xsZWQgcGFzdCBhIHNpZGUgb2YgaXRzIHBhcmVudHNcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSAgZWwgICAgICAgICAgIFRoZSBlbGVtZW50IHdobydzIHNpZGUgYmVpbmcgc2Nyb2xsZWQgb3V0IG9mIHZpZXcgaXMgaW4gcXVlc3Rpb25cbiAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgZWxTaWRlICAgICAgIFNpZGUgb2YgdGhlIGVsZW1lbnQgaW4gcXVlc3Rpb24gKCd0b3AnLCAnbGVmdCcsICdyaWdodCcsICdib3R0b20nKVxuICogQHBhcmFtICB7U3RyaW5nfSAgICAgICBwYXJlbnRTaWRlICAgU2lkZSBvZiB0aGUgcGFyZW50IGluIHF1ZXN0aW9uICgndG9wJywgJ2xlZnQnLCAncmlnaHQnLCAnYm90dG9tJylcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSAgICAgICAgICAgICAgIFRoZSBwYXJlbnQgc2Nyb2xsIGVsZW1lbnQgdGhhdCB0aGUgZWwncyBzaWRlIGlzIHNjcm9sbGVkIHBhc3QsIG9yIG51bGwgaWYgdGhlcmUgaXMgbm8gc3VjaCBlbGVtZW50XG4gKi9cblxuXG5mdW5jdGlvbiBpc1Njcm9sbGVkUGFzdChlbCwgZWxTaWRlLCBwYXJlbnRTaWRlKSB7XG4gIHZhciBwYXJlbnQgPSBnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudChlbCwgdHJ1ZSksXG4gICAgICBlbFNpZGVWYWwgPSBnZXRSZWN0KGVsKVtlbFNpZGVdO1xuICAvKiBqc2hpbnQgYm9zczp0cnVlICovXG5cbiAgd2hpbGUgKHBhcmVudCkge1xuICAgIHZhciBwYXJlbnRTaWRlVmFsID0gZ2V0UmVjdChwYXJlbnQpW3BhcmVudFNpZGVdLFxuICAgICAgICB2aXNpYmxlID0gdm9pZCAwO1xuXG4gICAgaWYgKHBhcmVudFNpZGUgPT09ICd0b3AnIHx8IHBhcmVudFNpZGUgPT09ICdsZWZ0Jykge1xuICAgICAgdmlzaWJsZSA9IGVsU2lkZVZhbCA+PSBwYXJlbnRTaWRlVmFsO1xuICAgIH0gZWxzZSB7XG4gICAgICB2aXNpYmxlID0gZWxTaWRlVmFsIDw9IHBhcmVudFNpZGVWYWw7XG4gICAgfVxuXG4gICAgaWYgKCF2aXNpYmxlKSByZXR1cm4gcGFyZW50O1xuICAgIGlmIChwYXJlbnQgPT09IGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKSkgYnJlYWs7XG4gICAgcGFyZW50ID0gZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQocGFyZW50LCBmYWxzZSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIEdldHMgbnRoIGNoaWxkIG9mIGVsLCBpZ25vcmluZyBoaWRkZW4gY2hpbGRyZW4sIHNvcnRhYmxlJ3MgZWxlbWVudHMgKGRvZXMgbm90IGlnbm9yZSBjbG9uZSBpZiBpdCdzIHZpc2libGUpXG4gKiBhbmQgbm9uLWRyYWdnYWJsZSBlbGVtZW50c1xuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsICAgICAgIFRoZSBwYXJlbnQgZWxlbWVudFxuICogQHBhcmFtICB7TnVtYmVyfSBjaGlsZE51bSAgICAgIFRoZSBpbmRleCBvZiB0aGUgY2hpbGRcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9ucyAgICAgICBQYXJlbnQgU29ydGFibGUncyBvcHRpb25zXG4gKiBAcmV0dXJuIHtIVE1MRWxlbWVudH0gICAgICAgICAgVGhlIGNoaWxkIGF0IGluZGV4IGNoaWxkTnVtLCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICovXG5cblxuZnVuY3Rpb24gZ2V0Q2hpbGQoZWwsIGNoaWxkTnVtLCBvcHRpb25zLCBpbmNsdWRlRHJhZ0VsKSB7XG4gIHZhciBjdXJyZW50Q2hpbGQgPSAwLFxuICAgICAgaSA9IDAsXG4gICAgICBjaGlsZHJlbiA9IGVsLmNoaWxkcmVuO1xuXG4gIHdoaWxlIChpIDwgY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgaWYgKGNoaWxkcmVuW2ldLnN0eWxlLmRpc3BsYXkgIT09ICdub25lJyAmJiBjaGlsZHJlbltpXSAhPT0gU29ydGFibGUuZ2hvc3QgJiYgKGluY2x1ZGVEcmFnRWwgfHwgY2hpbGRyZW5baV0gIT09IFNvcnRhYmxlLmRyYWdnZWQpICYmIGNsb3Nlc3QoY2hpbGRyZW5baV0sIG9wdGlvbnMuZHJhZ2dhYmxlLCBlbCwgZmFsc2UpKSB7XG4gICAgICBpZiAoY3VycmVudENoaWxkID09PSBjaGlsZE51bSkge1xuICAgICAgICByZXR1cm4gY2hpbGRyZW5baV07XG4gICAgICB9XG5cbiAgICAgIGN1cnJlbnRDaGlsZCsrO1xuICAgIH1cblxuICAgIGkrKztcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBHZXRzIHRoZSBsYXN0IGNoaWxkIGluIHRoZSBlbCwgaWdub3JpbmcgZ2hvc3RFbCBvciBpbnZpc2libGUgZWxlbWVudHMgKGNsb25lcylcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbCAgICAgICBQYXJlbnQgZWxlbWVudFxuICogQHBhcmFtICB7c2VsZWN0b3J9IHNlbGVjdG9yICAgIEFueSBvdGhlciBlbGVtZW50cyB0aGF0IHNob3VsZCBiZSBpZ25vcmVkXG4gKiBAcmV0dXJuIHtIVE1MRWxlbWVudH0gICAgICAgICAgVGhlIGxhc3QgY2hpbGQsIGlnbm9yaW5nIGdob3N0RWxcbiAqL1xuXG5cbmZ1bmN0aW9uIGxhc3RDaGlsZChlbCwgc2VsZWN0b3IpIHtcbiAgdmFyIGxhc3QgPSBlbC5sYXN0RWxlbWVudENoaWxkO1xuXG4gIHdoaWxlIChsYXN0ICYmIChsYXN0ID09PSBTb3J0YWJsZS5naG9zdCB8fCBjc3MobGFzdCwgJ2Rpc3BsYXknKSA9PT0gJ25vbmUnIHx8IHNlbGVjdG9yICYmICFtYXRjaGVzKGxhc3QsIHNlbGVjdG9yKSkpIHtcbiAgICBsYXN0ID0gbGFzdC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICB9XG5cbiAgcmV0dXJuIGxhc3QgfHwgbnVsbDtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgaW5kZXggb2YgYW4gZWxlbWVudCB3aXRoaW4gaXRzIHBhcmVudCBmb3IgYSBzZWxlY3RlZCBzZXQgb2ZcbiAqIGVsZW1lbnRzXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gZWxcbiAqIEBwYXJhbSAge3NlbGVjdG9yfSBzZWxlY3RvclxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5cblxuZnVuY3Rpb24gaW5kZXgoZWwsIHNlbGVjdG9yKSB7XG4gIHZhciBpbmRleCA9IDA7XG5cbiAgaWYgKCFlbCB8fCAhZWwucGFyZW50Tm9kZSkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICAvKiBqc2hpbnQgYm9zczp0cnVlICovXG5cblxuICB3aGlsZSAoZWwgPSBlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XG4gICAgaWYgKGVsLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgIT09ICdURU1QTEFURScgJiYgZWwgIT09IFNvcnRhYmxlLmNsb25lICYmICghc2VsZWN0b3IgfHwgbWF0Y2hlcyhlbCwgc2VsZWN0b3IpKSkge1xuICAgICAgaW5kZXgrKztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaW5kZXg7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIHNjcm9sbCBvZmZzZXQgb2YgdGhlIGdpdmVuIGVsZW1lbnQsIGFkZGVkIHdpdGggYWxsIHRoZSBzY3JvbGwgb2Zmc2V0cyBvZiBwYXJlbnQgZWxlbWVudHMuXG4gKiBUaGUgdmFsdWUgaXMgcmV0dXJuZWQgaW4gcmVhbCBwaXhlbHMuXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gZWxcbiAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgICAgICBPZmZzZXRzIGluIHRoZSBmb3JtYXQgb2YgW2xlZnQsIHRvcF1cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFJlbGF0aXZlU2Nyb2xsT2Zmc2V0KGVsKSB7XG4gIHZhciBvZmZzZXRMZWZ0ID0gMCxcbiAgICAgIG9mZnNldFRvcCA9IDAsXG4gICAgICB3aW5TY3JvbGxlciA9IGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTtcblxuICBpZiAoZWwpIHtcbiAgICBkbyB7XG4gICAgICB2YXIgZWxNYXRyaXggPSBtYXRyaXgoZWwpLFxuICAgICAgICAgIHNjYWxlWCA9IGVsTWF0cml4LmEsXG4gICAgICAgICAgc2NhbGVZID0gZWxNYXRyaXguZDtcbiAgICAgIG9mZnNldExlZnQgKz0gZWwuc2Nyb2xsTGVmdCAqIHNjYWxlWDtcbiAgICAgIG9mZnNldFRvcCArPSBlbC5zY3JvbGxUb3AgKiBzY2FsZVk7XG4gICAgfSB3aGlsZSAoZWwgIT09IHdpblNjcm9sbGVyICYmIChlbCA9IGVsLnBhcmVudE5vZGUpKTtcbiAgfVxuXG4gIHJldHVybiBbb2Zmc2V0TGVmdCwgb2Zmc2V0VG9wXTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG9iamVjdCB3aXRoaW4gdGhlIGdpdmVuIGFycmF5XG4gKiBAcGFyYW0gIHtBcnJheX0gYXJyICAgQXJyYXkgdGhhdCBtYXkgb3IgbWF5IG5vdCBob2xkIHRoZSBvYmplY3RcbiAqIEBwYXJhbSAge09iamVjdH0gb2JqICBBbiBvYmplY3QgdGhhdCBoYXMgYSBrZXktdmFsdWUgcGFpciB1bmlxdWUgdG8gYW5kIGlkZW50aWNhbCB0byBhIGtleS12YWx1ZSBwYWlyIGluIHRoZSBvYmplY3QgeW91IHdhbnQgdG8gZmluZFxuICogQHJldHVybiB7TnVtYmVyfSAgICAgIFRoZSBpbmRleCBvZiB0aGUgb2JqZWN0IGluIHRoZSBhcnJheSwgb3IgLTFcbiAqL1xuXG5cbmZ1bmN0aW9uIGluZGV4T2ZPYmplY3QoYXJyLCBvYmopIHtcbiAgZm9yICh2YXIgaSBpbiBhcnIpIHtcbiAgICBpZiAoIWFyci5oYXNPd25Qcm9wZXJ0eShpKSkgY29udGludWU7XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkgJiYgb2JqW2tleV0gPT09IGFycltpXVtrZXldKSByZXR1cm4gTnVtYmVyKGkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMTtcbn1cblxuZnVuY3Rpb24gZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQoZWwsIGluY2x1ZGVTZWxmKSB7XG4gIC8vIHNraXAgdG8gd2luZG93XG4gIGlmICghZWwgfHwgIWVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCkgcmV0dXJuIGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTtcbiAgdmFyIGVsZW0gPSBlbDtcbiAgdmFyIGdvdFNlbGYgPSBmYWxzZTtcblxuICBkbyB7XG4gICAgLy8gd2UgZG9uJ3QgbmVlZCB0byBnZXQgZWxlbSBjc3MgaWYgaXQgaXNuJ3QgZXZlbiBvdmVyZmxvd2luZyBpbiB0aGUgZmlyc3QgcGxhY2UgKHBlcmZvcm1hbmNlKVxuICAgIGlmIChlbGVtLmNsaWVudFdpZHRoIDwgZWxlbS5zY3JvbGxXaWR0aCB8fCBlbGVtLmNsaWVudEhlaWdodCA8IGVsZW0uc2Nyb2xsSGVpZ2h0KSB7XG4gICAgICB2YXIgZWxlbUNTUyA9IGNzcyhlbGVtKTtcblxuICAgICAgaWYgKGVsZW0uY2xpZW50V2lkdGggPCBlbGVtLnNjcm9sbFdpZHRoICYmIChlbGVtQ1NTLm92ZXJmbG93WCA9PSAnYXV0bycgfHwgZWxlbUNTUy5vdmVyZmxvd1ggPT0gJ3Njcm9sbCcpIHx8IGVsZW0uY2xpZW50SGVpZ2h0IDwgZWxlbS5zY3JvbGxIZWlnaHQgJiYgKGVsZW1DU1Mub3ZlcmZsb3dZID09ICdhdXRvJyB8fCBlbGVtQ1NTLm92ZXJmbG93WSA9PSAnc2Nyb2xsJykpIHtcbiAgICAgICAgaWYgKCFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCB8fCBlbGVtID09PSBkb2N1bWVudC5ib2R5KSByZXR1cm4gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpO1xuICAgICAgICBpZiAoZ290U2VsZiB8fCBpbmNsdWRlU2VsZikgcmV0dXJuIGVsZW07XG4gICAgICAgIGdvdFNlbGYgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICAvKiBqc2hpbnQgYm9zczp0cnVlICovXG5cbiAgfSB3aGlsZSAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSk7XG5cbiAgcmV0dXJuIGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTtcbn1cblxuZnVuY3Rpb24gZXh0ZW5kKGRzdCwgc3JjKSB7XG4gIGlmIChkc3QgJiYgc3JjKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHNyYykge1xuICAgICAgaWYgKHNyYy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIGRzdFtrZXldID0gc3JjW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRzdDtcbn1cblxuZnVuY3Rpb24gaXNSZWN0RXF1YWwocmVjdDEsIHJlY3QyKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHJlY3QxLnRvcCkgPT09IE1hdGgucm91bmQocmVjdDIudG9wKSAmJiBNYXRoLnJvdW5kKHJlY3QxLmxlZnQpID09PSBNYXRoLnJvdW5kKHJlY3QyLmxlZnQpICYmIE1hdGgucm91bmQocmVjdDEuaGVpZ2h0KSA9PT0gTWF0aC5yb3VuZChyZWN0Mi5oZWlnaHQpICYmIE1hdGgucm91bmQocmVjdDEud2lkdGgpID09PSBNYXRoLnJvdW5kKHJlY3QyLndpZHRoKTtcbn1cblxudmFyIF90aHJvdHRsZVRpbWVvdXQ7XG5cbmZ1bmN0aW9uIHRocm90dGxlKGNhbGxiYWNrLCBtcykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghX3Rocm90dGxlVGltZW91dCkge1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgY2FsbGJhY2suY2FsbChfdGhpcywgYXJnc1swXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjay5hcHBseShfdGhpcywgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIF90aHJvdHRsZVRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3Rocm90dGxlVGltZW91dCA9IHZvaWQgMDtcbiAgICAgIH0sIG1zKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNhbmNlbFRocm90dGxlKCkge1xuICBjbGVhclRpbWVvdXQoX3Rocm90dGxlVGltZW91dCk7XG4gIF90aHJvdHRsZVRpbWVvdXQgPSB2b2lkIDA7XG59XG5cbmZ1bmN0aW9uIHNjcm9sbEJ5KGVsLCB4LCB5KSB7XG4gIGVsLnNjcm9sbExlZnQgKz0geDtcbiAgZWwuc2Nyb2xsVG9wICs9IHk7XG59XG5cbmZ1bmN0aW9uIGNsb25lKGVsKSB7XG4gIHZhciBQb2x5bWVyID0gd2luZG93LlBvbHltZXI7XG4gIHZhciAkID0gd2luZG93LmpRdWVyeSB8fCB3aW5kb3cuWmVwdG87XG5cbiAgaWYgKFBvbHltZXIgJiYgUG9seW1lci5kb20pIHtcbiAgICByZXR1cm4gUG9seW1lci5kb20oZWwpLmNsb25lTm9kZSh0cnVlKTtcbiAgfSBlbHNlIGlmICgkKSB7XG4gICAgcmV0dXJuICQoZWwpLmNsb25lKHRydWUpWzBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBlbC5jbG9uZU5vZGUodHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0UmVjdChlbCwgcmVjdCkge1xuICBjc3MoZWwsICdwb3NpdGlvbicsICdhYnNvbHV0ZScpO1xuICBjc3MoZWwsICd0b3AnLCByZWN0LnRvcCk7XG4gIGNzcyhlbCwgJ2xlZnQnLCByZWN0LmxlZnQpO1xuICBjc3MoZWwsICd3aWR0aCcsIHJlY3Qud2lkdGgpO1xuICBjc3MoZWwsICdoZWlnaHQnLCByZWN0LmhlaWdodCk7XG59XG5cbmZ1bmN0aW9uIHVuc2V0UmVjdChlbCkge1xuICBjc3MoZWwsICdwb3NpdGlvbicsICcnKTtcbiAgY3NzKGVsLCAndG9wJywgJycpO1xuICBjc3MoZWwsICdsZWZ0JywgJycpO1xuICBjc3MoZWwsICd3aWR0aCcsICcnKTtcbiAgY3NzKGVsLCAnaGVpZ2h0JywgJycpO1xufVxuXG52YXIgZXhwYW5kbyA9ICdTb3J0YWJsZScgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuZnVuY3Rpb24gQW5pbWF0aW9uU3RhdGVNYW5hZ2VyKCkge1xuICB2YXIgYW5pbWF0aW9uU3RhdGVzID0gW10sXG4gICAgICBhbmltYXRpb25DYWxsYmFja0lkO1xuICByZXR1cm4ge1xuICAgIGNhcHR1cmVBbmltYXRpb25TdGF0ZTogZnVuY3Rpb24gY2FwdHVyZUFuaW1hdGlvblN0YXRlKCkge1xuICAgICAgYW5pbWF0aW9uU3RhdGVzID0gW107XG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5hbmltYXRpb24pIHJldHVybjtcbiAgICAgIHZhciBjaGlsZHJlbiA9IFtdLnNsaWNlLmNhbGwodGhpcy5lbC5jaGlsZHJlbik7XG4gICAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAoY3NzKGNoaWxkLCAnZGlzcGxheScpID09PSAnbm9uZScgfHwgY2hpbGQgPT09IFNvcnRhYmxlLmdob3N0KSByZXR1cm47XG4gICAgICAgIGFuaW1hdGlvblN0YXRlcy5wdXNoKHtcbiAgICAgICAgICB0YXJnZXQ6IGNoaWxkLFxuICAgICAgICAgIHJlY3Q6IGdldFJlY3QoY2hpbGQpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBmcm9tUmVjdCA9IF9vYmplY3RTcHJlYWQyKHt9LCBhbmltYXRpb25TdGF0ZXNbYW5pbWF0aW9uU3RhdGVzLmxlbmd0aCAtIDFdLnJlY3QpOyAvLyBJZiBhbmltYXRpbmc6IGNvbXBlbnNhdGUgZm9yIGN1cnJlbnQgYW5pbWF0aW9uXG5cblxuICAgICAgICBpZiAoY2hpbGQudGhpc0FuaW1hdGlvbkR1cmF0aW9uKSB7XG4gICAgICAgICAgdmFyIGNoaWxkTWF0cml4ID0gbWF0cml4KGNoaWxkLCB0cnVlKTtcblxuICAgICAgICAgIGlmIChjaGlsZE1hdHJpeCkge1xuICAgICAgICAgICAgZnJvbVJlY3QudG9wIC09IGNoaWxkTWF0cml4LmY7XG4gICAgICAgICAgICBmcm9tUmVjdC5sZWZ0IC09IGNoaWxkTWF0cml4LmU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGQuZnJvbVJlY3QgPSBmcm9tUmVjdDtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgYWRkQW5pbWF0aW9uU3RhdGU6IGZ1bmN0aW9uIGFkZEFuaW1hdGlvblN0YXRlKHN0YXRlKSB7XG4gICAgICBhbmltYXRpb25TdGF0ZXMucHVzaChzdGF0ZSk7XG4gICAgfSxcbiAgICByZW1vdmVBbmltYXRpb25TdGF0ZTogZnVuY3Rpb24gcmVtb3ZlQW5pbWF0aW9uU3RhdGUodGFyZ2V0KSB7XG4gICAgICBhbmltYXRpb25TdGF0ZXMuc3BsaWNlKGluZGV4T2ZPYmplY3QoYW5pbWF0aW9uU3RhdGVzLCB7XG4gICAgICAgIHRhcmdldDogdGFyZ2V0XG4gICAgICB9KSwgMSk7XG4gICAgfSxcbiAgICBhbmltYXRlQWxsOiBmdW5jdGlvbiBhbmltYXRlQWxsKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5hbmltYXRpb24pIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGFuaW1hdGlvbkNhbGxiYWNrSWQpO1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjaygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBhbmltYXRpbmcgPSBmYWxzZSxcbiAgICAgICAgICBhbmltYXRpb25UaW1lID0gMDtcbiAgICAgIGFuaW1hdGlvblN0YXRlcy5mb3JFYWNoKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICB2YXIgdGltZSA9IDAsXG4gICAgICAgICAgICB0YXJnZXQgPSBzdGF0ZS50YXJnZXQsXG4gICAgICAgICAgICBmcm9tUmVjdCA9IHRhcmdldC5mcm9tUmVjdCxcbiAgICAgICAgICAgIHRvUmVjdCA9IGdldFJlY3QodGFyZ2V0KSxcbiAgICAgICAgICAgIHByZXZGcm9tUmVjdCA9IHRhcmdldC5wcmV2RnJvbVJlY3QsXG4gICAgICAgICAgICBwcmV2VG9SZWN0ID0gdGFyZ2V0LnByZXZUb1JlY3QsXG4gICAgICAgICAgICBhbmltYXRpbmdSZWN0ID0gc3RhdGUucmVjdCxcbiAgICAgICAgICAgIHRhcmdldE1hdHJpeCA9IG1hdHJpeCh0YXJnZXQsIHRydWUpO1xuXG4gICAgICAgIGlmICh0YXJnZXRNYXRyaXgpIHtcbiAgICAgICAgICAvLyBDb21wZW5zYXRlIGZvciBjdXJyZW50IGFuaW1hdGlvblxuICAgICAgICAgIHRvUmVjdC50b3AgLT0gdGFyZ2V0TWF0cml4LmY7XG4gICAgICAgICAgdG9SZWN0LmxlZnQgLT0gdGFyZ2V0TWF0cml4LmU7XG4gICAgICAgIH1cblxuICAgICAgICB0YXJnZXQudG9SZWN0ID0gdG9SZWN0O1xuXG4gICAgICAgIGlmICh0YXJnZXQudGhpc0FuaW1hdGlvbkR1cmF0aW9uKSB7XG4gICAgICAgICAgLy8gQ291bGQgYWxzbyBjaGVjayBpZiBhbmltYXRpbmdSZWN0IGlzIGJldHdlZW4gZnJvbVJlY3QgYW5kIHRvUmVjdFxuICAgICAgICAgIGlmIChpc1JlY3RFcXVhbChwcmV2RnJvbVJlY3QsIHRvUmVjdCkgJiYgIWlzUmVjdEVxdWFsKGZyb21SZWN0LCB0b1JlY3QpICYmIC8vIE1ha2Ugc3VyZSBhbmltYXRpbmdSZWN0IGlzIG9uIGxpbmUgYmV0d2VlbiB0b1JlY3QgJiBmcm9tUmVjdFxuICAgICAgICAgIChhbmltYXRpbmdSZWN0LnRvcCAtIHRvUmVjdC50b3ApIC8gKGFuaW1hdGluZ1JlY3QubGVmdCAtIHRvUmVjdC5sZWZ0KSA9PT0gKGZyb21SZWN0LnRvcCAtIHRvUmVjdC50b3ApIC8gKGZyb21SZWN0LmxlZnQgLSB0b1JlY3QubGVmdCkpIHtcbiAgICAgICAgICAgIC8vIElmIHJldHVybmluZyB0byBzYW1lIHBsYWNlIGFzIHN0YXJ0ZWQgZnJvbSBhbmltYXRpb24gYW5kIG9uIHNhbWUgYXhpc1xuICAgICAgICAgICAgdGltZSA9IGNhbGN1bGF0ZVJlYWxUaW1lKGFuaW1hdGluZ1JlY3QsIHByZXZGcm9tUmVjdCwgcHJldlRvUmVjdCwgX3RoaXMub3B0aW9ucyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIGlmIGZyb21SZWN0ICE9IHRvUmVjdDogYW5pbWF0ZVxuXG5cbiAgICAgICAgaWYgKCFpc1JlY3RFcXVhbCh0b1JlY3QsIGZyb21SZWN0KSkge1xuICAgICAgICAgIHRhcmdldC5wcmV2RnJvbVJlY3QgPSBmcm9tUmVjdDtcbiAgICAgICAgICB0YXJnZXQucHJldlRvUmVjdCA9IHRvUmVjdDtcblxuICAgICAgICAgIGlmICghdGltZSkge1xuICAgICAgICAgICAgdGltZSA9IF90aGlzLm9wdGlvbnMuYW5pbWF0aW9uO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF90aGlzLmFuaW1hdGUodGFyZ2V0LCBhbmltYXRpbmdSZWN0LCB0b1JlY3QsIHRpbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRpbWUpIHtcbiAgICAgICAgICBhbmltYXRpbmcgPSB0cnVlO1xuICAgICAgICAgIGFuaW1hdGlvblRpbWUgPSBNYXRoLm1heChhbmltYXRpb25UaW1lLCB0aW1lKTtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGFyZ2V0LmFuaW1hdGlvblJlc2V0VGltZXIpO1xuICAgICAgICAgIHRhcmdldC5hbmltYXRpb25SZXNldFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0YXJnZXQuYW5pbWF0aW9uVGltZSA9IDA7XG4gICAgICAgICAgICB0YXJnZXQucHJldkZyb21SZWN0ID0gbnVsbDtcbiAgICAgICAgICAgIHRhcmdldC5mcm9tUmVjdCA9IG51bGw7XG4gICAgICAgICAgICB0YXJnZXQucHJldlRvUmVjdCA9IG51bGw7XG4gICAgICAgICAgICB0YXJnZXQudGhpc0FuaW1hdGlvbkR1cmF0aW9uID0gbnVsbDtcbiAgICAgICAgICB9LCB0aW1lKTtcbiAgICAgICAgICB0YXJnZXQudGhpc0FuaW1hdGlvbkR1cmF0aW9uID0gdGltZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBjbGVhclRpbWVvdXQoYW5pbWF0aW9uQ2FsbGJhY2tJZCk7XG5cbiAgICAgIGlmICghYW5pbWF0aW5nKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhbmltYXRpb25DYWxsYmFja0lkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2soKTtcbiAgICAgICAgfSwgYW5pbWF0aW9uVGltZSk7XG4gICAgICB9XG5cbiAgICAgIGFuaW1hdGlvblN0YXRlcyA9IFtdO1xuICAgIH0sXG4gICAgYW5pbWF0ZTogZnVuY3Rpb24gYW5pbWF0ZSh0YXJnZXQsIGN1cnJlbnRSZWN0LCB0b1JlY3QsIGR1cmF0aW9uKSB7XG4gICAgICBpZiAoZHVyYXRpb24pIHtcbiAgICAgICAgY3NzKHRhcmdldCwgJ3RyYW5zaXRpb24nLCAnJyk7XG4gICAgICAgIGNzcyh0YXJnZXQsICd0cmFuc2Zvcm0nLCAnJyk7XG4gICAgICAgIHZhciBlbE1hdHJpeCA9IG1hdHJpeCh0aGlzLmVsKSxcbiAgICAgICAgICAgIHNjYWxlWCA9IGVsTWF0cml4ICYmIGVsTWF0cml4LmEsXG4gICAgICAgICAgICBzY2FsZVkgPSBlbE1hdHJpeCAmJiBlbE1hdHJpeC5kLFxuICAgICAgICAgICAgdHJhbnNsYXRlWCA9IChjdXJyZW50UmVjdC5sZWZ0IC0gdG9SZWN0LmxlZnQpIC8gKHNjYWxlWCB8fCAxKSxcbiAgICAgICAgICAgIHRyYW5zbGF0ZVkgPSAoY3VycmVudFJlY3QudG9wIC0gdG9SZWN0LnRvcCkgLyAoc2NhbGVZIHx8IDEpO1xuICAgICAgICB0YXJnZXQuYW5pbWF0aW5nWCA9ICEhdHJhbnNsYXRlWDtcbiAgICAgICAgdGFyZ2V0LmFuaW1hdGluZ1kgPSAhIXRyYW5zbGF0ZVk7XG4gICAgICAgIGNzcyh0YXJnZXQsICd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlM2QoJyArIHRyYW5zbGF0ZVggKyAncHgsJyArIHRyYW5zbGF0ZVkgKyAncHgsMCknKTtcbiAgICAgICAgdGhpcy5mb3JSZXBhaW50RHVtbXkgPSByZXBhaW50KHRhcmdldCk7IC8vIHJlcGFpbnRcblxuICAgICAgICBjc3ModGFyZ2V0LCAndHJhbnNpdGlvbicsICd0cmFuc2Zvcm0gJyArIGR1cmF0aW9uICsgJ21zJyArICh0aGlzLm9wdGlvbnMuZWFzaW5nID8gJyAnICsgdGhpcy5vcHRpb25zLmVhc2luZyA6ICcnKSk7XG4gICAgICAgIGNzcyh0YXJnZXQsICd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlM2QoMCwwLDApJyk7XG4gICAgICAgIHR5cGVvZiB0YXJnZXQuYW5pbWF0ZWQgPT09ICdudW1iZXInICYmIGNsZWFyVGltZW91dCh0YXJnZXQuYW5pbWF0ZWQpO1xuICAgICAgICB0YXJnZXQuYW5pbWF0ZWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjc3ModGFyZ2V0LCAndHJhbnNpdGlvbicsICcnKTtcbiAgICAgICAgICBjc3ModGFyZ2V0LCAndHJhbnNmb3JtJywgJycpO1xuICAgICAgICAgIHRhcmdldC5hbmltYXRlZCA9IGZhbHNlO1xuICAgICAgICAgIHRhcmdldC5hbmltYXRpbmdYID0gZmFsc2U7XG4gICAgICAgICAgdGFyZ2V0LmFuaW1hdGluZ1kgPSBmYWxzZTtcbiAgICAgICAgfSwgZHVyYXRpb24pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVwYWludCh0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldC5vZmZzZXRXaWR0aDtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlUmVhbFRpbWUoYW5pbWF0aW5nUmVjdCwgZnJvbVJlY3QsIHRvUmVjdCwgb3B0aW9ucykge1xuICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KGZyb21SZWN0LnRvcCAtIGFuaW1hdGluZ1JlY3QudG9wLCAyKSArIE1hdGgucG93KGZyb21SZWN0LmxlZnQgLSBhbmltYXRpbmdSZWN0LmxlZnQsIDIpKSAvIE1hdGguc3FydChNYXRoLnBvdyhmcm9tUmVjdC50b3AgLSB0b1JlY3QudG9wLCAyKSArIE1hdGgucG93KGZyb21SZWN0LmxlZnQgLSB0b1JlY3QubGVmdCwgMikpICogb3B0aW9ucy5hbmltYXRpb247XG59XG5cbnZhciBwbHVnaW5zID0gW107XG52YXIgZGVmYXVsdHMgPSB7XG4gIGluaXRpYWxpemVCeURlZmF1bHQ6IHRydWVcbn07XG52YXIgUGx1Z2luTWFuYWdlciA9IHtcbiAgbW91bnQ6IGZ1bmN0aW9uIG1vdW50KHBsdWdpbikge1xuICAgIC8vIFNldCBkZWZhdWx0IHN0YXRpYyBwcm9wZXJ0aWVzXG4gICAgZm9yICh2YXIgb3B0aW9uIGluIGRlZmF1bHRzKSB7XG4gICAgICBpZiAoZGVmYXVsdHMuaGFzT3duUHJvcGVydHkob3B0aW9uKSAmJiAhKG9wdGlvbiBpbiBwbHVnaW4pKSB7XG4gICAgICAgIHBsdWdpbltvcHRpb25dID0gZGVmYXVsdHNbb3B0aW9uXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHApIHtcbiAgICAgIGlmIChwLnBsdWdpbk5hbWUgPT09IHBsdWdpbi5wbHVnaW5OYW1lKSB7XG4gICAgICAgIHRocm93IFwiU29ydGFibGU6IENhbm5vdCBtb3VudCBwbHVnaW4gXCIuY29uY2F0KHBsdWdpbi5wbHVnaW5OYW1lLCBcIiBtb3JlIHRoYW4gb25jZVwiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBwbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgfSxcbiAgcGx1Z2luRXZlbnQ6IGZ1bmN0aW9uIHBsdWdpbkV2ZW50KGV2ZW50TmFtZSwgc29ydGFibGUsIGV2dCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLmV2ZW50Q2FuY2VsZWQgPSBmYWxzZTtcblxuICAgIGV2dC5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5ldmVudENhbmNlbGVkID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgdmFyIGV2ZW50TmFtZUdsb2JhbCA9IGV2ZW50TmFtZSArICdHbG9iYWwnO1xuICAgIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgICBpZiAoIXNvcnRhYmxlW3BsdWdpbi5wbHVnaW5OYW1lXSkgcmV0dXJuOyAvLyBGaXJlIGdsb2JhbCBldmVudHMgaWYgaXQgZXhpc3RzIGluIHRoaXMgc29ydGFibGVcblxuICAgICAgaWYgKHNvcnRhYmxlW3BsdWdpbi5wbHVnaW5OYW1lXVtldmVudE5hbWVHbG9iYWxdKSB7XG4gICAgICAgIHNvcnRhYmxlW3BsdWdpbi5wbHVnaW5OYW1lXVtldmVudE5hbWVHbG9iYWxdKF9vYmplY3RTcHJlYWQyKHtcbiAgICAgICAgICBzb3J0YWJsZTogc29ydGFibGVcbiAgICAgICAgfSwgZXZ0KSk7XG4gICAgICB9IC8vIE9ubHkgZmlyZSBwbHVnaW4gZXZlbnQgaWYgcGx1Z2luIGlzIGVuYWJsZWQgaW4gdGhpcyBzb3J0YWJsZSxcbiAgICAgIC8vIGFuZCBwbHVnaW4gaGFzIGV2ZW50IGRlZmluZWRcblxuXG4gICAgICBpZiAoc29ydGFibGUub3B0aW9uc1twbHVnaW4ucGx1Z2luTmFtZV0gJiYgc29ydGFibGVbcGx1Z2luLnBsdWdpbk5hbWVdW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgc29ydGFibGVbcGx1Z2luLnBsdWdpbk5hbWVdW2V2ZW50TmFtZV0oX29iamVjdFNwcmVhZDIoe1xuICAgICAgICAgIHNvcnRhYmxlOiBzb3J0YWJsZVxuICAgICAgICB9LCBldnQpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgaW5pdGlhbGl6ZVBsdWdpbnM6IGZ1bmN0aW9uIGluaXRpYWxpemVQbHVnaW5zKHNvcnRhYmxlLCBlbCwgZGVmYXVsdHMsIG9wdGlvbnMpIHtcbiAgICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgICAgdmFyIHBsdWdpbk5hbWUgPSBwbHVnaW4ucGx1Z2luTmFtZTtcbiAgICAgIGlmICghc29ydGFibGUub3B0aW9uc1twbHVnaW5OYW1lXSAmJiAhcGx1Z2luLmluaXRpYWxpemVCeURlZmF1bHQpIHJldHVybjtcbiAgICAgIHZhciBpbml0aWFsaXplZCA9IG5ldyBwbHVnaW4oc29ydGFibGUsIGVsLCBzb3J0YWJsZS5vcHRpb25zKTtcbiAgICAgIGluaXRpYWxpemVkLnNvcnRhYmxlID0gc29ydGFibGU7XG4gICAgICBpbml0aWFsaXplZC5vcHRpb25zID0gc29ydGFibGUub3B0aW9ucztcbiAgICAgIHNvcnRhYmxlW3BsdWdpbk5hbWVdID0gaW5pdGlhbGl6ZWQ7IC8vIEFkZCBkZWZhdWx0IG9wdGlvbnMgZnJvbSBwbHVnaW5cblxuICAgICAgX2V4dGVuZHMoZGVmYXVsdHMsIGluaXRpYWxpemVkLmRlZmF1bHRzKTtcbiAgICB9KTtcblxuICAgIGZvciAodmFyIG9wdGlvbiBpbiBzb3J0YWJsZS5vcHRpb25zKSB7XG4gICAgICBpZiAoIXNvcnRhYmxlLm9wdGlvbnMuaGFzT3duUHJvcGVydHkob3B0aW9uKSkgY29udGludWU7XG4gICAgICB2YXIgbW9kaWZpZWQgPSB0aGlzLm1vZGlmeU9wdGlvbihzb3J0YWJsZSwgb3B0aW9uLCBzb3J0YWJsZS5vcHRpb25zW29wdGlvbl0pO1xuXG4gICAgICBpZiAodHlwZW9mIG1vZGlmaWVkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzb3J0YWJsZS5vcHRpb25zW29wdGlvbl0gPSBtb2RpZmllZDtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGdldEV2ZW50UHJvcGVydGllczogZnVuY3Rpb24gZ2V0RXZlbnRQcm9wZXJ0aWVzKG5hbWUsIHNvcnRhYmxlKSB7XG4gICAgdmFyIGV2ZW50UHJvcGVydGllcyA9IHt9O1xuICAgIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgICBpZiAodHlwZW9mIHBsdWdpbi5ldmVudFByb3BlcnRpZXMgIT09ICdmdW5jdGlvbicpIHJldHVybjtcblxuICAgICAgX2V4dGVuZHMoZXZlbnRQcm9wZXJ0aWVzLCBwbHVnaW4uZXZlbnRQcm9wZXJ0aWVzLmNhbGwoc29ydGFibGVbcGx1Z2luLnBsdWdpbk5hbWVdLCBuYW1lKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGV2ZW50UHJvcGVydGllcztcbiAgfSxcbiAgbW9kaWZ5T3B0aW9uOiBmdW5jdGlvbiBtb2RpZnlPcHRpb24oc29ydGFibGUsIG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIG1vZGlmaWVkVmFsdWU7XG4gICAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICAgIC8vIFBsdWdpbiBtdXN0IGV4aXN0IG9uIHRoZSBTb3J0YWJsZVxuICAgICAgaWYgKCFzb3J0YWJsZVtwbHVnaW4ucGx1Z2luTmFtZV0pIHJldHVybjsgLy8gSWYgc3RhdGljIG9wdGlvbiBsaXN0ZW5lciBleGlzdHMgZm9yIHRoaXMgb3B0aW9uLCBjYWxsIGluIHRoZSBjb250ZXh0IG9mIHRoZSBTb3J0YWJsZSdzIGluc3RhbmNlIG9mIHRoaXMgcGx1Z2luXG5cbiAgICAgIGlmIChwbHVnaW4ub3B0aW9uTGlzdGVuZXJzICYmIHR5cGVvZiBwbHVnaW4ub3B0aW9uTGlzdGVuZXJzW25hbWVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG1vZGlmaWVkVmFsdWUgPSBwbHVnaW4ub3B0aW9uTGlzdGVuZXJzW25hbWVdLmNhbGwoc29ydGFibGVbcGx1Z2luLnBsdWdpbk5hbWVdLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG1vZGlmaWVkVmFsdWU7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQoX3JlZikge1xuICB2YXIgc29ydGFibGUgPSBfcmVmLnNvcnRhYmxlLFxuICAgICAgcm9vdEVsID0gX3JlZi5yb290RWwsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lLFxuICAgICAgdGFyZ2V0RWwgPSBfcmVmLnRhcmdldEVsLFxuICAgICAgY2xvbmVFbCA9IF9yZWYuY2xvbmVFbCxcbiAgICAgIHRvRWwgPSBfcmVmLnRvRWwsXG4gICAgICBmcm9tRWwgPSBfcmVmLmZyb21FbCxcbiAgICAgIG9sZEluZGV4ID0gX3JlZi5vbGRJbmRleCxcbiAgICAgIG5ld0luZGV4ID0gX3JlZi5uZXdJbmRleCxcbiAgICAgIG9sZERyYWdnYWJsZUluZGV4ID0gX3JlZi5vbGREcmFnZ2FibGVJbmRleCxcbiAgICAgIG5ld0RyYWdnYWJsZUluZGV4ID0gX3JlZi5uZXdEcmFnZ2FibGVJbmRleCxcbiAgICAgIG9yaWdpbmFsRXZlbnQgPSBfcmVmLm9yaWdpbmFsRXZlbnQsXG4gICAgICBwdXRTb3J0YWJsZSA9IF9yZWYucHV0U29ydGFibGUsXG4gICAgICBleHRyYUV2ZW50UHJvcGVydGllcyA9IF9yZWYuZXh0cmFFdmVudFByb3BlcnRpZXM7XG4gIHNvcnRhYmxlID0gc29ydGFibGUgfHwgcm9vdEVsICYmIHJvb3RFbFtleHBhbmRvXTtcbiAgaWYgKCFzb3J0YWJsZSkgcmV0dXJuO1xuICB2YXIgZXZ0LFxuICAgICAgb3B0aW9ucyA9IHNvcnRhYmxlLm9wdGlvbnMsXG4gICAgICBvbk5hbWUgPSAnb24nICsgbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc3Vic3RyKDEpOyAvLyBTdXBwb3J0IGZvciBuZXcgQ3VzdG9tRXZlbnQgZmVhdHVyZVxuXG4gIGlmICh3aW5kb3cuQ3VzdG9tRXZlbnQgJiYgIUlFMTFPckxlc3MgJiYgIUVkZ2UpIHtcbiAgICBldnQgPSBuZXcgQ3VzdG9tRXZlbnQobmFtZSwge1xuICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICBldnQuaW5pdEV2ZW50KG5hbWUsIHRydWUsIHRydWUpO1xuICB9XG5cbiAgZXZ0LnRvID0gdG9FbCB8fCByb290RWw7XG4gIGV2dC5mcm9tID0gZnJvbUVsIHx8IHJvb3RFbDtcbiAgZXZ0Lml0ZW0gPSB0YXJnZXRFbCB8fCByb290RWw7XG4gIGV2dC5jbG9uZSA9IGNsb25lRWw7XG4gIGV2dC5vbGRJbmRleCA9IG9sZEluZGV4O1xuICBldnQubmV3SW5kZXggPSBuZXdJbmRleDtcbiAgZXZ0Lm9sZERyYWdnYWJsZUluZGV4ID0gb2xkRHJhZ2dhYmxlSW5kZXg7XG4gIGV2dC5uZXdEcmFnZ2FibGVJbmRleCA9IG5ld0RyYWdnYWJsZUluZGV4O1xuICBldnQub3JpZ2luYWxFdmVudCA9IG9yaWdpbmFsRXZlbnQ7XG4gIGV2dC5wdWxsTW9kZSA9IHB1dFNvcnRhYmxlID8gcHV0U29ydGFibGUubGFzdFB1dE1vZGUgOiB1bmRlZmluZWQ7XG5cbiAgdmFyIGFsbEV2ZW50UHJvcGVydGllcyA9IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBleHRyYUV2ZW50UHJvcGVydGllcyksIFBsdWdpbk1hbmFnZXIuZ2V0RXZlbnRQcm9wZXJ0aWVzKG5hbWUsIHNvcnRhYmxlKSk7XG5cbiAgZm9yICh2YXIgb3B0aW9uIGluIGFsbEV2ZW50UHJvcGVydGllcykge1xuICAgIGV2dFtvcHRpb25dID0gYWxsRXZlbnRQcm9wZXJ0aWVzW29wdGlvbl07XG4gIH1cblxuICBpZiAocm9vdEVsKSB7XG4gICAgcm9vdEVsLmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgfVxuXG4gIGlmIChvcHRpb25zW29uTmFtZV0pIHtcbiAgICBvcHRpb25zW29uTmFtZV0uY2FsbChzb3J0YWJsZSwgZXZ0KTtcbiAgfVxufVxuXG52YXIgX2V4Y2x1ZGVkID0gW1wiZXZ0XCJdO1xuXG52YXIgcGx1Z2luRXZlbnQgPSBmdW5jdGlvbiBwbHVnaW5FdmVudChldmVudE5hbWUsIHNvcnRhYmxlKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fSxcbiAgICAgIG9yaWdpbmFsRXZlbnQgPSBfcmVmLmV2dCxcbiAgICAgIGRhdGEgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgX2V4Y2x1ZGVkKTtcblxuICBQbHVnaW5NYW5hZ2VyLnBsdWdpbkV2ZW50LmJpbmQoU29ydGFibGUpKGV2ZW50TmFtZSwgc29ydGFibGUsIF9vYmplY3RTcHJlYWQyKHtcbiAgICBkcmFnRWw6IGRyYWdFbCxcbiAgICBwYXJlbnRFbDogcGFyZW50RWwsXG4gICAgZ2hvc3RFbDogZ2hvc3RFbCxcbiAgICByb290RWw6IHJvb3RFbCxcbiAgICBuZXh0RWw6IG5leHRFbCxcbiAgICBsYXN0RG93bkVsOiBsYXN0RG93bkVsLFxuICAgIGNsb25lRWw6IGNsb25lRWwsXG4gICAgY2xvbmVIaWRkZW46IGNsb25lSGlkZGVuLFxuICAgIGRyYWdTdGFydGVkOiBtb3ZlZCxcbiAgICBwdXRTb3J0YWJsZTogcHV0U29ydGFibGUsXG4gICAgYWN0aXZlU29ydGFibGU6IFNvcnRhYmxlLmFjdGl2ZSxcbiAgICBvcmlnaW5hbEV2ZW50OiBvcmlnaW5hbEV2ZW50LFxuICAgIG9sZEluZGV4OiBvbGRJbmRleCxcbiAgICBvbGREcmFnZ2FibGVJbmRleDogb2xkRHJhZ2dhYmxlSW5kZXgsXG4gICAgbmV3SW5kZXg6IG5ld0luZGV4LFxuICAgIG5ld0RyYWdnYWJsZUluZGV4OiBuZXdEcmFnZ2FibGVJbmRleCxcbiAgICBoaWRlR2hvc3RGb3JUYXJnZXQ6IF9oaWRlR2hvc3RGb3JUYXJnZXQsXG4gICAgdW5oaWRlR2hvc3RGb3JUYXJnZXQ6IF91bmhpZGVHaG9zdEZvclRhcmdldCxcbiAgICBjbG9uZU5vd0hpZGRlbjogZnVuY3Rpb24gY2xvbmVOb3dIaWRkZW4oKSB7XG4gICAgICBjbG9uZUhpZGRlbiA9IHRydWU7XG4gICAgfSxcbiAgICBjbG9uZU5vd1Nob3duOiBmdW5jdGlvbiBjbG9uZU5vd1Nob3duKCkge1xuICAgICAgY2xvbmVIaWRkZW4gPSBmYWxzZTtcbiAgICB9LFxuICAgIGRpc3BhdGNoU29ydGFibGVFdmVudDogZnVuY3Rpb24gZGlzcGF0Y2hTb3J0YWJsZUV2ZW50KG5hbWUpIHtcbiAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgc29ydGFibGU6IHNvcnRhYmxlLFxuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBvcmlnaW5hbEV2ZW50OiBvcmlnaW5hbEV2ZW50XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIGRhdGEpKTtcbn07XG5cbmZ1bmN0aW9uIF9kaXNwYXRjaEV2ZW50KGluZm8pIHtcbiAgZGlzcGF0Y2hFdmVudChfb2JqZWN0U3ByZWFkMih7XG4gICAgcHV0U29ydGFibGU6IHB1dFNvcnRhYmxlLFxuICAgIGNsb25lRWw6IGNsb25lRWwsXG4gICAgdGFyZ2V0RWw6IGRyYWdFbCxcbiAgICByb290RWw6IHJvb3RFbCxcbiAgICBvbGRJbmRleDogb2xkSW5kZXgsXG4gICAgb2xkRHJhZ2dhYmxlSW5kZXg6IG9sZERyYWdnYWJsZUluZGV4LFxuICAgIG5ld0luZGV4OiBuZXdJbmRleCxcbiAgICBuZXdEcmFnZ2FibGVJbmRleDogbmV3RHJhZ2dhYmxlSW5kZXhcbiAgfSwgaW5mbykpO1xufVxuXG52YXIgZHJhZ0VsLFxuICAgIHBhcmVudEVsLFxuICAgIGdob3N0RWwsXG4gICAgcm9vdEVsLFxuICAgIG5leHRFbCxcbiAgICBsYXN0RG93bkVsLFxuICAgIGNsb25lRWwsXG4gICAgY2xvbmVIaWRkZW4sXG4gICAgb2xkSW5kZXgsXG4gICAgbmV3SW5kZXgsXG4gICAgb2xkRHJhZ2dhYmxlSW5kZXgsXG4gICAgbmV3RHJhZ2dhYmxlSW5kZXgsXG4gICAgYWN0aXZlR3JvdXAsXG4gICAgcHV0U29ydGFibGUsXG4gICAgYXdhaXRpbmdEcmFnU3RhcnRlZCA9IGZhbHNlLFxuICAgIGlnbm9yZU5leHRDbGljayA9IGZhbHNlLFxuICAgIHNvcnRhYmxlcyA9IFtdLFxuICAgIHRhcEV2dCxcbiAgICB0b3VjaEV2dCxcbiAgICBsYXN0RHgsXG4gICAgbGFzdER5LFxuICAgIHRhcERpc3RhbmNlTGVmdCxcbiAgICB0YXBEaXN0YW5jZVRvcCxcbiAgICBtb3ZlZCxcbiAgICBsYXN0VGFyZ2V0LFxuICAgIGxhc3REaXJlY3Rpb24sXG4gICAgcGFzdEZpcnN0SW52ZXJ0VGhyZXNoID0gZmFsc2UsXG4gICAgaXNDaXJjdW1zdGFudGlhbEludmVydCA9IGZhbHNlLFxuICAgIHRhcmdldE1vdmVEaXN0YW5jZSxcbiAgICAvLyBGb3IgcG9zaXRpb25pbmcgZ2hvc3QgYWJzb2x1dGVseVxuZ2hvc3RSZWxhdGl2ZVBhcmVudCxcbiAgICBnaG9zdFJlbGF0aXZlUGFyZW50SW5pdGlhbFNjcm9sbCA9IFtdLFxuICAgIC8vIChsZWZ0LCB0b3ApXG5fc2lsZW50ID0gZmFsc2UsXG4gICAgc2F2ZWRJbnB1dENoZWNrZWQgPSBbXTtcbi8qKiBAY29uc3QgKi9cblxudmFyIGRvY3VtZW50RXhpc3RzID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyxcbiAgICBQb3NpdGlvbkdob3N0QWJzb2x1dGVseSA9IElPUyxcbiAgICBDU1NGbG9hdFByb3BlcnR5ID0gRWRnZSB8fCBJRTExT3JMZXNzID8gJ2Nzc0Zsb2F0JyA6ICdmbG9hdCcsXG4gICAgLy8gVGhpcyB3aWxsIG5vdCBwYXNzIGZvciBJRTksIGJlY2F1c2UgSUU5IERuRCBvbmx5IHdvcmtzIG9uIGFuY2hvcnNcbnN1cHBvcnREcmFnZ2FibGUgPSBkb2N1bWVudEV4aXN0cyAmJiAhQ2hyb21lRm9yQW5kcm9pZCAmJiAhSU9TICYmICdkcmFnZ2FibGUnIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgIHN1cHBvcnRDc3NQb2ludGVyRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIWRvY3VtZW50RXhpc3RzKSByZXR1cm47IC8vIGZhbHNlIHdoZW4gPD0gSUUxMVxuXG4gIGlmIChJRTExT3JMZXNzKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgneCcpO1xuICBlbC5zdHlsZS5jc3NUZXh0ID0gJ3BvaW50ZXItZXZlbnRzOmF1dG8nO1xuICByZXR1cm4gZWwuc3R5bGUucG9pbnRlckV2ZW50cyA9PT0gJ2F1dG8nO1xufSgpLFxuICAgIF9kZXRlY3REaXJlY3Rpb24gPSBmdW5jdGlvbiBfZGV0ZWN0RGlyZWN0aW9uKGVsLCBvcHRpb25zKSB7XG4gIHZhciBlbENTUyA9IGNzcyhlbCksXG4gICAgICBlbFdpZHRoID0gcGFyc2VJbnQoZWxDU1Mud2lkdGgpIC0gcGFyc2VJbnQoZWxDU1MucGFkZGluZ0xlZnQpIC0gcGFyc2VJbnQoZWxDU1MucGFkZGluZ1JpZ2h0KSAtIHBhcnNlSW50KGVsQ1NTLmJvcmRlckxlZnRXaWR0aCkgLSBwYXJzZUludChlbENTUy5ib3JkZXJSaWdodFdpZHRoKSxcbiAgICAgIGNoaWxkMSA9IGdldENoaWxkKGVsLCAwLCBvcHRpb25zKSxcbiAgICAgIGNoaWxkMiA9IGdldENoaWxkKGVsLCAxLCBvcHRpb25zKSxcbiAgICAgIGZpcnN0Q2hpbGRDU1MgPSBjaGlsZDEgJiYgY3NzKGNoaWxkMSksXG4gICAgICBzZWNvbmRDaGlsZENTUyA9IGNoaWxkMiAmJiBjc3MoY2hpbGQyKSxcbiAgICAgIGZpcnN0Q2hpbGRXaWR0aCA9IGZpcnN0Q2hpbGRDU1MgJiYgcGFyc2VJbnQoZmlyc3RDaGlsZENTUy5tYXJnaW5MZWZ0KSArIHBhcnNlSW50KGZpcnN0Q2hpbGRDU1MubWFyZ2luUmlnaHQpICsgZ2V0UmVjdChjaGlsZDEpLndpZHRoLFxuICAgICAgc2Vjb25kQ2hpbGRXaWR0aCA9IHNlY29uZENoaWxkQ1NTICYmIHBhcnNlSW50KHNlY29uZENoaWxkQ1NTLm1hcmdpbkxlZnQpICsgcGFyc2VJbnQoc2Vjb25kQ2hpbGRDU1MubWFyZ2luUmlnaHQpICsgZ2V0UmVjdChjaGlsZDIpLndpZHRoO1xuXG4gIGlmIChlbENTUy5kaXNwbGF5ID09PSAnZmxleCcpIHtcbiAgICByZXR1cm4gZWxDU1MuZmxleERpcmVjdGlvbiA9PT0gJ2NvbHVtbicgfHwgZWxDU1MuZmxleERpcmVjdGlvbiA9PT0gJ2NvbHVtbi1yZXZlcnNlJyA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gIH1cblxuICBpZiAoZWxDU1MuZGlzcGxheSA9PT0gJ2dyaWQnKSB7XG4gICAgcmV0dXJuIGVsQ1NTLmdyaWRUZW1wbGF0ZUNvbHVtbnMuc3BsaXQoJyAnKS5sZW5ndGggPD0gMSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gIH1cblxuICBpZiAoY2hpbGQxICYmIGZpcnN0Q2hpbGRDU1NbXCJmbG9hdFwiXSAmJiBmaXJzdENoaWxkQ1NTW1wiZmxvYXRcIl0gIT09ICdub25lJykge1xuICAgIHZhciB0b3VjaGluZ1NpZGVDaGlsZDIgPSBmaXJzdENoaWxkQ1NTW1wiZmxvYXRcIl0gPT09ICdsZWZ0JyA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgcmV0dXJuIGNoaWxkMiAmJiAoc2Vjb25kQ2hpbGRDU1MuY2xlYXIgPT09ICdib3RoJyB8fCBzZWNvbmRDaGlsZENTUy5jbGVhciA9PT0gdG91Y2hpbmdTaWRlQ2hpbGQyKSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gIH1cblxuICByZXR1cm4gY2hpbGQxICYmIChmaXJzdENoaWxkQ1NTLmRpc3BsYXkgPT09ICdibG9jaycgfHwgZmlyc3RDaGlsZENTUy5kaXNwbGF5ID09PSAnZmxleCcgfHwgZmlyc3RDaGlsZENTUy5kaXNwbGF5ID09PSAndGFibGUnIHx8IGZpcnN0Q2hpbGRDU1MuZGlzcGxheSA9PT0gJ2dyaWQnIHx8IGZpcnN0Q2hpbGRXaWR0aCA+PSBlbFdpZHRoICYmIGVsQ1NTW0NTU0Zsb2F0UHJvcGVydHldID09PSAnbm9uZScgfHwgY2hpbGQyICYmIGVsQ1NTW0NTU0Zsb2F0UHJvcGVydHldID09PSAnbm9uZScgJiYgZmlyc3RDaGlsZFdpZHRoICsgc2Vjb25kQ2hpbGRXaWR0aCA+IGVsV2lkdGgpID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbn0sXG4gICAgX2RyYWdFbEluUm93Q29sdW1uID0gZnVuY3Rpb24gX2RyYWdFbEluUm93Q29sdW1uKGRyYWdSZWN0LCB0YXJnZXRSZWN0LCB2ZXJ0aWNhbCkge1xuICB2YXIgZHJhZ0VsUzFPcHAgPSB2ZXJ0aWNhbCA/IGRyYWdSZWN0LmxlZnQgOiBkcmFnUmVjdC50b3AsXG4gICAgICBkcmFnRWxTMk9wcCA9IHZlcnRpY2FsID8gZHJhZ1JlY3QucmlnaHQgOiBkcmFnUmVjdC5ib3R0b20sXG4gICAgICBkcmFnRWxPcHBMZW5ndGggPSB2ZXJ0aWNhbCA/IGRyYWdSZWN0LndpZHRoIDogZHJhZ1JlY3QuaGVpZ2h0LFxuICAgICAgdGFyZ2V0UzFPcHAgPSB2ZXJ0aWNhbCA/IHRhcmdldFJlY3QubGVmdCA6IHRhcmdldFJlY3QudG9wLFxuICAgICAgdGFyZ2V0UzJPcHAgPSB2ZXJ0aWNhbCA/IHRhcmdldFJlY3QucmlnaHQgOiB0YXJnZXRSZWN0LmJvdHRvbSxcbiAgICAgIHRhcmdldE9wcExlbmd0aCA9IHZlcnRpY2FsID8gdGFyZ2V0UmVjdC53aWR0aCA6IHRhcmdldFJlY3QuaGVpZ2h0O1xuICByZXR1cm4gZHJhZ0VsUzFPcHAgPT09IHRhcmdldFMxT3BwIHx8IGRyYWdFbFMyT3BwID09PSB0YXJnZXRTMk9wcCB8fCBkcmFnRWxTMU9wcCArIGRyYWdFbE9wcExlbmd0aCAvIDIgPT09IHRhcmdldFMxT3BwICsgdGFyZ2V0T3BwTGVuZ3RoIC8gMjtcbn0sXG5cbi8qKlxyXG4gKiBEZXRlY3RzIGZpcnN0IG5lYXJlc3QgZW1wdHkgc29ydGFibGUgdG8gWCBhbmQgWSBwb3NpdGlvbiB1c2luZyBlbXB0eUluc2VydFRocmVzaG9sZC5cclxuICogQHBhcmFtICB7TnVtYmVyfSB4ICAgICAgWCBwb3NpdGlvblxyXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHkgICAgICBZIHBvc2l0aW9uXHJcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSAgIEVsZW1lbnQgb2YgdGhlIGZpcnN0IGZvdW5kIG5lYXJlc3QgU29ydGFibGVcclxuICovXG5fZGV0ZWN0TmVhcmVzdEVtcHR5U29ydGFibGUgPSBmdW5jdGlvbiBfZGV0ZWN0TmVhcmVzdEVtcHR5U29ydGFibGUoeCwgeSkge1xuICB2YXIgcmV0O1xuICBzb3J0YWJsZXMuc29tZShmdW5jdGlvbiAoc29ydGFibGUpIHtcbiAgICB2YXIgdGhyZXNob2xkID0gc29ydGFibGVbZXhwYW5kb10ub3B0aW9ucy5lbXB0eUluc2VydFRocmVzaG9sZDtcbiAgICBpZiAoIXRocmVzaG9sZCB8fCBsYXN0Q2hpbGQoc29ydGFibGUpKSByZXR1cm47XG4gICAgdmFyIHJlY3QgPSBnZXRSZWN0KHNvcnRhYmxlKSxcbiAgICAgICAgaW5zaWRlSG9yaXpvbnRhbGx5ID0geCA+PSByZWN0LmxlZnQgLSB0aHJlc2hvbGQgJiYgeCA8PSByZWN0LnJpZ2h0ICsgdGhyZXNob2xkLFxuICAgICAgICBpbnNpZGVWZXJ0aWNhbGx5ID0geSA+PSByZWN0LnRvcCAtIHRocmVzaG9sZCAmJiB5IDw9IHJlY3QuYm90dG9tICsgdGhyZXNob2xkO1xuXG4gICAgaWYgKGluc2lkZUhvcml6b250YWxseSAmJiBpbnNpZGVWZXJ0aWNhbGx5KSB7XG4gICAgICByZXR1cm4gcmV0ID0gc29ydGFibGU7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJldDtcbn0sXG4gICAgX3ByZXBhcmVHcm91cCA9IGZ1bmN0aW9uIF9wcmVwYXJlR3JvdXAob3B0aW9ucykge1xuICBmdW5jdGlvbiB0b0ZuKHZhbHVlLCBwdWxsKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0bywgZnJvbSwgZHJhZ0VsLCBldnQpIHtcbiAgICAgIHZhciBzYW1lR3JvdXAgPSB0by5vcHRpb25zLmdyb3VwLm5hbWUgJiYgZnJvbS5vcHRpb25zLmdyb3VwLm5hbWUgJiYgdG8ub3B0aW9ucy5ncm91cC5uYW1lID09PSBmcm9tLm9wdGlvbnMuZ3JvdXAubmFtZTtcblxuICAgICAgaWYgKHZhbHVlID09IG51bGwgJiYgKHB1bGwgfHwgc2FtZUdyb3VwKSkge1xuICAgICAgICAvLyBEZWZhdWx0IHB1bGwgdmFsdWVcbiAgICAgICAgLy8gRGVmYXVsdCBwdWxsIGFuZCBwdXQgdmFsdWUgaWYgc2FtZSBncm91cFxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIGlmIChwdWxsICYmIHZhbHVlID09PSAnY2xvbmUnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB0b0ZuKHZhbHVlKHRvLCBmcm9tLCBkcmFnRWwsIGV2dCksIHB1bGwpKHRvLCBmcm9tLCBkcmFnRWwsIGV2dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgb3RoZXJHcm91cCA9IChwdWxsID8gdG8gOiBmcm9tKS5vcHRpb25zLmdyb3VwLm5hbWU7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdHJ1ZSB8fCB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlID09PSBvdGhlckdyb3VwIHx8IHZhbHVlLmpvaW4gJiYgdmFsdWUuaW5kZXhPZihvdGhlckdyb3VwKSA+IC0xO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICB2YXIgZ3JvdXAgPSB7fTtcbiAgdmFyIG9yaWdpbmFsR3JvdXAgPSBvcHRpb25zLmdyb3VwO1xuXG4gIGlmICghb3JpZ2luYWxHcm91cCB8fCBfdHlwZW9mKG9yaWdpbmFsR3JvdXApICE9ICdvYmplY3QnKSB7XG4gICAgb3JpZ2luYWxHcm91cCA9IHtcbiAgICAgIG5hbWU6IG9yaWdpbmFsR3JvdXBcbiAgICB9O1xuICB9XG5cbiAgZ3JvdXAubmFtZSA9IG9yaWdpbmFsR3JvdXAubmFtZTtcbiAgZ3JvdXAuY2hlY2tQdWxsID0gdG9GbihvcmlnaW5hbEdyb3VwLnB1bGwsIHRydWUpO1xuICBncm91cC5jaGVja1B1dCA9IHRvRm4ob3JpZ2luYWxHcm91cC5wdXQpO1xuICBncm91cC5yZXZlcnRDbG9uZSA9IG9yaWdpbmFsR3JvdXAucmV2ZXJ0Q2xvbmU7XG4gIG9wdGlvbnMuZ3JvdXAgPSBncm91cDtcbn0sXG4gICAgX2hpZGVHaG9zdEZvclRhcmdldCA9IGZ1bmN0aW9uIF9oaWRlR2hvc3RGb3JUYXJnZXQoKSB7XG4gIGlmICghc3VwcG9ydENzc1BvaW50ZXJFdmVudHMgJiYgZ2hvc3RFbCkge1xuICAgIGNzcyhnaG9zdEVsLCAnZGlzcGxheScsICdub25lJyk7XG4gIH1cbn0sXG4gICAgX3VuaGlkZUdob3N0Rm9yVGFyZ2V0ID0gZnVuY3Rpb24gX3VuaGlkZUdob3N0Rm9yVGFyZ2V0KCkge1xuICBpZiAoIXN1cHBvcnRDc3NQb2ludGVyRXZlbnRzICYmIGdob3N0RWwpIHtcbiAgICBjc3MoZ2hvc3RFbCwgJ2Rpc3BsYXknLCAnJyk7XG4gIH1cbn07IC8vICMxMTg0IGZpeCAtIFByZXZlbnQgY2xpY2sgZXZlbnQgb24gZmFsbGJhY2sgaWYgZHJhZ2dlZCBidXQgaXRlbSBub3QgY2hhbmdlZCBwb3NpdGlvblxuXG5cbmlmIChkb2N1bWVudEV4aXN0cyAmJiAhQ2hyb21lRm9yQW5kcm9pZCkge1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldnQpIHtcbiAgICBpZiAoaWdub3JlTmV4dENsaWNrKSB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24gJiYgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZXZ0LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiAmJiBldnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICBpZ25vcmVOZXh0Q2xpY2sgPSBmYWxzZTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sIHRydWUpO1xufVxuXG52YXIgbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQgPSBmdW5jdGlvbiBuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudChldnQpIHtcbiAgaWYgKGRyYWdFbCkge1xuICAgIGV2dCA9IGV2dC50b3VjaGVzID8gZXZ0LnRvdWNoZXNbMF0gOiBldnQ7XG5cbiAgICB2YXIgbmVhcmVzdCA9IF9kZXRlY3ROZWFyZXN0RW1wdHlTb3J0YWJsZShldnQuY2xpZW50WCwgZXZ0LmNsaWVudFkpO1xuXG4gICAgaWYgKG5lYXJlc3QpIHtcbiAgICAgIC8vIENyZWF0ZSBpbWl0YXRpb24gZXZlbnRcbiAgICAgIHZhciBldmVudCA9IHt9O1xuXG4gICAgICBmb3IgKHZhciBpIGluIGV2dCkge1xuICAgICAgICBpZiAoZXZ0Lmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgZXZlbnRbaV0gPSBldnRbaV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZXZlbnQudGFyZ2V0ID0gZXZlbnQucm9vdEVsID0gbmVhcmVzdDtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0ID0gdm9pZCAwO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uID0gdm9pZCAwO1xuXG4gICAgICBuZWFyZXN0W2V4cGFuZG9dLl9vbkRyYWdPdmVyKGV2ZW50KTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBfY2hlY2tPdXRzaWRlVGFyZ2V0RWwgPSBmdW5jdGlvbiBfY2hlY2tPdXRzaWRlVGFyZ2V0RWwoZXZ0KSB7XG4gIGlmIChkcmFnRWwpIHtcbiAgICBkcmFnRWwucGFyZW50Tm9kZVtleHBhbmRvXS5faXNPdXRzaWRlVGhpc0VsKGV2dC50YXJnZXQpO1xuICB9XG59O1xuLyoqXHJcbiAqIEBjbGFzcyAgU29ydGFibGVcclxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9ICBlbFxyXG4gKiBAcGFyYW0gIHtPYmplY3R9ICAgICAgIFtvcHRpb25zXVxyXG4gKi9cblxuXG5mdW5jdGlvbiBTb3J0YWJsZShlbCwgb3B0aW9ucykge1xuICBpZiAoIShlbCAmJiBlbC5ub2RlVHlwZSAmJiBlbC5ub2RlVHlwZSA9PT0gMSkpIHtcbiAgICB0aHJvdyBcIlNvcnRhYmxlOiBgZWxgIG11c3QgYmUgYW4gSFRNTEVsZW1lbnQsIG5vdCBcIi5jb25jYXQoe30udG9TdHJpbmcuY2FsbChlbCkpO1xuICB9XG5cbiAgdGhpcy5lbCA9IGVsOyAvLyByb290IGVsZW1lbnRcblxuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zID0gX2V4dGVuZHMoe30sIG9wdGlvbnMpOyAvLyBFeHBvcnQgaW5zdGFuY2VcblxuICBlbFtleHBhbmRvXSA9IHRoaXM7XG4gIHZhciBkZWZhdWx0cyA9IHtcbiAgICBncm91cDogbnVsbCxcbiAgICBzb3J0OiB0cnVlLFxuICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICBzdG9yZTogbnVsbCxcbiAgICBoYW5kbGU6IG51bGwsXG4gICAgZHJhZ2dhYmxlOiAvXlt1b11sJC9pLnRlc3QoZWwubm9kZU5hbWUpID8gJz5saScgOiAnPionLFxuICAgIHN3YXBUaHJlc2hvbGQ6IDEsXG4gICAgLy8gcGVyY2VudGFnZTsgMCA8PSB4IDw9IDFcbiAgICBpbnZlcnRTd2FwOiBmYWxzZSxcbiAgICAvLyBpbnZlcnQgYWx3YXlzXG4gICAgaW52ZXJ0ZWRTd2FwVGhyZXNob2xkOiBudWxsLFxuICAgIC8vIHdpbGwgYmUgc2V0IHRvIHNhbWUgYXMgc3dhcFRocmVzaG9sZCBpZiBkZWZhdWx0XG4gICAgcmVtb3ZlQ2xvbmVPbkhpZGU6IHRydWUsXG4gICAgZGlyZWN0aW9uOiBmdW5jdGlvbiBkaXJlY3Rpb24oKSB7XG4gICAgICByZXR1cm4gX2RldGVjdERpcmVjdGlvbihlbCwgdGhpcy5vcHRpb25zKTtcbiAgICB9LFxuICAgIGdob3N0Q2xhc3M6ICdzb3J0YWJsZS1naG9zdCcsXG4gICAgY2hvc2VuQ2xhc3M6ICdzb3J0YWJsZS1jaG9zZW4nLFxuICAgIGRyYWdDbGFzczogJ3NvcnRhYmxlLWRyYWcnLFxuICAgIGlnbm9yZTogJ2EsIGltZycsXG4gICAgZmlsdGVyOiBudWxsLFxuICAgIHByZXZlbnRPbkZpbHRlcjogdHJ1ZSxcbiAgICBhbmltYXRpb246IDAsXG4gICAgZWFzaW5nOiBudWxsLFxuICAgIHNldERhdGE6IGZ1bmN0aW9uIHNldERhdGEoZGF0YVRyYW5zZmVyLCBkcmFnRWwpIHtcbiAgICAgIGRhdGFUcmFuc2Zlci5zZXREYXRhKCdUZXh0JywgZHJhZ0VsLnRleHRDb250ZW50KTtcbiAgICB9LFxuICAgIGRyb3BCdWJibGU6IGZhbHNlLFxuICAgIGRyYWdvdmVyQnViYmxlOiBmYWxzZSxcbiAgICBkYXRhSWRBdHRyOiAnZGF0YS1pZCcsXG4gICAgZGVsYXk6IDAsXG4gICAgZGVsYXlPblRvdWNoT25seTogZmFsc2UsXG4gICAgdG91Y2hTdGFydFRocmVzaG9sZDogKE51bWJlci5wYXJzZUludCA/IE51bWJlciA6IHdpbmRvdykucGFyc2VJbnQod2luZG93LmRldmljZVBpeGVsUmF0aW8sIDEwKSB8fCAxLFxuICAgIGZvcmNlRmFsbGJhY2s6IGZhbHNlLFxuICAgIGZhbGxiYWNrQ2xhc3M6ICdzb3J0YWJsZS1mYWxsYmFjaycsXG4gICAgZmFsbGJhY2tPbkJvZHk6IGZhbHNlLFxuICAgIGZhbGxiYWNrVG9sZXJhbmNlOiAwLFxuICAgIGZhbGxiYWNrT2Zmc2V0OiB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMFxuICAgIH0sXG4gICAgc3VwcG9ydFBvaW50ZXI6IFNvcnRhYmxlLnN1cHBvcnRQb2ludGVyICE9PSBmYWxzZSAmJiAnUG9pbnRlckV2ZW50JyBpbiB3aW5kb3cgJiYgIVNhZmFyaSxcbiAgICBlbXB0eUluc2VydFRocmVzaG9sZDogNVxuICB9O1xuICBQbHVnaW5NYW5hZ2VyLmluaXRpYWxpemVQbHVnaW5zKHRoaXMsIGVsLCBkZWZhdWx0cyk7IC8vIFNldCBkZWZhdWx0IG9wdGlvbnNcblxuICBmb3IgKHZhciBuYW1lIGluIGRlZmF1bHRzKSB7XG4gICAgIShuYW1lIGluIG9wdGlvbnMpICYmIChvcHRpb25zW25hbWVdID0gZGVmYXVsdHNbbmFtZV0pO1xuICB9XG5cbiAgX3ByZXBhcmVHcm91cChvcHRpb25zKTsgLy8gQmluZCBhbGwgcHJpdmF0ZSBtZXRob2RzXG5cblxuICBmb3IgKHZhciBmbiBpbiB0aGlzKSB7XG4gICAgaWYgKGZuLmNoYXJBdCgwKSA9PT0gJ18nICYmIHR5cGVvZiB0aGlzW2ZuXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpc1tmbl0gPSB0aGlzW2ZuXS5iaW5kKHRoaXMpO1xuICAgIH1cbiAgfSAvLyBTZXR1cCBkcmFnIG1vZGVcblxuXG4gIHRoaXMubmF0aXZlRHJhZ2dhYmxlID0gb3B0aW9ucy5mb3JjZUZhbGxiYWNrID8gZmFsc2UgOiBzdXBwb3J0RHJhZ2dhYmxlO1xuXG4gIGlmICh0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgIC8vIFRvdWNoIHN0YXJ0IHRocmVzaG9sZCBjYW5ub3QgYmUgZ3JlYXRlciB0aGFuIHRoZSBuYXRpdmUgZHJhZ3N0YXJ0IHRocmVzaG9sZFxuICAgIHRoaXMub3B0aW9ucy50b3VjaFN0YXJ0VGhyZXNob2xkID0gMTtcbiAgfSAvLyBCaW5kIGV2ZW50c1xuXG5cbiAgaWYgKG9wdGlvbnMuc3VwcG9ydFBvaW50ZXIpIHtcbiAgICBvbihlbCwgJ3BvaW50ZXJkb3duJywgdGhpcy5fb25UYXBTdGFydCk7XG4gIH0gZWxzZSB7XG4gICAgb24oZWwsICdtb3VzZWRvd24nLCB0aGlzLl9vblRhcFN0YXJ0KTtcbiAgICBvbihlbCwgJ3RvdWNoc3RhcnQnLCB0aGlzLl9vblRhcFN0YXJ0KTtcbiAgfVxuXG4gIGlmICh0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgIG9uKGVsLCAnZHJhZ292ZXInLCB0aGlzKTtcbiAgICBvbihlbCwgJ2RyYWdlbnRlcicsIHRoaXMpO1xuICB9XG5cbiAgc29ydGFibGVzLnB1c2godGhpcy5lbCk7IC8vIFJlc3RvcmUgc29ydGluZ1xuXG4gIG9wdGlvbnMuc3RvcmUgJiYgb3B0aW9ucy5zdG9yZS5nZXQgJiYgdGhpcy5zb3J0KG9wdGlvbnMuc3RvcmUuZ2V0KHRoaXMpIHx8IFtdKTsgLy8gQWRkIGFuaW1hdGlvbiBzdGF0ZSBtYW5hZ2VyXG5cbiAgX2V4dGVuZHModGhpcywgQW5pbWF0aW9uU3RhdGVNYW5hZ2VyKCkpO1xufVxuXG5Tb3J0YWJsZS5wcm90b3R5cGUgPVxuLyoqIEBsZW5kcyBTb3J0YWJsZS5wcm90b3R5cGUgKi9cbntcbiAgY29uc3RydWN0b3I6IFNvcnRhYmxlLFxuICBfaXNPdXRzaWRlVGhpc0VsOiBmdW5jdGlvbiBfaXNPdXRzaWRlVGhpc0VsKHRhcmdldCkge1xuICAgIGlmICghdGhpcy5lbC5jb250YWlucyh0YXJnZXQpICYmIHRhcmdldCAhPT0gdGhpcy5lbCkge1xuICAgICAgbGFzdFRhcmdldCA9IG51bGw7XG4gICAgfVxuICB9LFxuICBfZ2V0RGlyZWN0aW9uOiBmdW5jdGlvbiBfZ2V0RGlyZWN0aW9uKGV2dCwgdGFyZ2V0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uID09PSAnZnVuY3Rpb24nID8gdGhpcy5vcHRpb25zLmRpcmVjdGlvbi5jYWxsKHRoaXMsIGV2dCwgdGFyZ2V0LCBkcmFnRWwpIDogdGhpcy5vcHRpb25zLmRpcmVjdGlvbjtcbiAgfSxcbiAgX29uVGFwU3RhcnQ6IGZ1bmN0aW9uIF9vblRhcFN0YXJ0KFxuICAvKiogRXZlbnR8VG91Y2hFdmVudCAqL1xuICBldnQpIHtcbiAgICBpZiAoIWV2dC5jYW5jZWxhYmxlKSByZXR1cm47XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBlbCA9IHRoaXMuZWwsXG4gICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgIHByZXZlbnRPbkZpbHRlciA9IG9wdGlvbnMucHJldmVudE9uRmlsdGVyLFxuICAgICAgICB0eXBlID0gZXZ0LnR5cGUsXG4gICAgICAgIHRvdWNoID0gZXZ0LnRvdWNoZXMgJiYgZXZ0LnRvdWNoZXNbMF0gfHwgZXZ0LnBvaW50ZXJUeXBlICYmIGV2dC5wb2ludGVyVHlwZSA9PT0gJ3RvdWNoJyAmJiBldnQsXG4gICAgICAgIHRhcmdldCA9ICh0b3VjaCB8fCBldnQpLnRhcmdldCxcbiAgICAgICAgb3JpZ2luYWxUYXJnZXQgPSBldnQudGFyZ2V0LnNoYWRvd1Jvb3QgJiYgKGV2dC5wYXRoICYmIGV2dC5wYXRoWzBdIHx8IGV2dC5jb21wb3NlZFBhdGggJiYgZXZ0LmNvbXBvc2VkUGF0aCgpWzBdKSB8fCB0YXJnZXQsXG4gICAgICAgIGZpbHRlciA9IG9wdGlvbnMuZmlsdGVyO1xuXG4gICAgX3NhdmVJbnB1dENoZWNrZWRTdGF0ZShlbCk7IC8vIERvbid0IHRyaWdnZXIgc3RhcnQgZXZlbnQgd2hlbiBhbiBlbGVtZW50IGlzIGJlZW4gZHJhZ2dlZCwgb3RoZXJ3aXNlIHRoZSBldnQub2xkaW5kZXggYWx3YXlzIHdyb25nIHdoZW4gc2V0IG9wdGlvbi5ncm91cC5cblxuXG4gICAgaWYgKGRyYWdFbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICgvbW91c2Vkb3dufHBvaW50ZXJkb3duLy50ZXN0KHR5cGUpICYmIGV2dC5idXR0b24gIT09IDAgfHwgb3B0aW9ucy5kaXNhYmxlZCkge1xuICAgICAgcmV0dXJuOyAvLyBvbmx5IGxlZnQgYnV0dG9uIGFuZCBlbmFibGVkXG4gICAgfSAvLyBjYW5jZWwgZG5kIGlmIG9yaWdpbmFsIHRhcmdldCBpcyBjb250ZW50IGVkaXRhYmxlXG5cblxuICAgIGlmIChvcmlnaW5hbFRhcmdldC5pc0NvbnRlbnRFZGl0YWJsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gU2FmYXJpIGlnbm9yZXMgZnVydGhlciBldmVudCBoYW5kbGluZyBhZnRlciBtb3VzZWRvd25cblxuXG4gICAgaWYgKCF0aGlzLm5hdGl2ZURyYWdnYWJsZSAmJiBTYWZhcmkgJiYgdGFyZ2V0ICYmIHRhcmdldC50YWdOYW1lLnRvVXBwZXJDYXNlKCkgPT09ICdTRUxFQ1QnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGFyZ2V0ID0gY2xvc2VzdCh0YXJnZXQsIG9wdGlvbnMuZHJhZ2dhYmxlLCBlbCwgZmFsc2UpO1xuXG4gICAgaWYgKHRhcmdldCAmJiB0YXJnZXQuYW5pbWF0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAobGFzdERvd25FbCA9PT0gdGFyZ2V0KSB7XG4gICAgICAvLyBJZ25vcmluZyBkdXBsaWNhdGUgYGRvd25gXG4gICAgICByZXR1cm47XG4gICAgfSAvLyBHZXQgdGhlIGluZGV4IG9mIHRoZSBkcmFnZ2VkIGVsZW1lbnQgd2l0aGluIGl0cyBwYXJlbnRcblxuXG4gICAgb2xkSW5kZXggPSBpbmRleCh0YXJnZXQpO1xuICAgIG9sZERyYWdnYWJsZUluZGV4ID0gaW5kZXgodGFyZ2V0LCBvcHRpb25zLmRyYWdnYWJsZSk7IC8vIENoZWNrIGZpbHRlclxuXG4gICAgaWYgKHR5cGVvZiBmaWx0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChmaWx0ZXIuY2FsbCh0aGlzLCBldnQsIHRhcmdldCwgdGhpcykpIHtcbiAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgIHNvcnRhYmxlOiBfdGhpcyxcbiAgICAgICAgICByb290RWw6IG9yaWdpbmFsVGFyZ2V0LFxuICAgICAgICAgIG5hbWU6ICdmaWx0ZXInLFxuICAgICAgICAgIHRhcmdldEVsOiB0YXJnZXQsXG4gICAgICAgICAgdG9FbDogZWwsXG4gICAgICAgICAgZnJvbUVsOiBlbFxuICAgICAgICB9KTtcblxuICAgICAgICBwbHVnaW5FdmVudCgnZmlsdGVyJywgX3RoaXMsIHtcbiAgICAgICAgICBldnQ6IGV2dFxuICAgICAgICB9KTtcbiAgICAgICAgcHJldmVudE9uRmlsdGVyICYmIGV2dC5jYW5jZWxhYmxlICYmIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICByZXR1cm47IC8vIGNhbmNlbCBkbmRcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGZpbHRlcikge1xuICAgICAgZmlsdGVyID0gZmlsdGVyLnNwbGl0KCcsJykuc29tZShmdW5jdGlvbiAoY3JpdGVyaWEpIHtcbiAgICAgICAgY3JpdGVyaWEgPSBjbG9zZXN0KG9yaWdpbmFsVGFyZ2V0LCBjcml0ZXJpYS50cmltKCksIGVsLCBmYWxzZSk7XG5cbiAgICAgICAgaWYgKGNyaXRlcmlhKSB7XG4gICAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgc29ydGFibGU6IF90aGlzLFxuICAgICAgICAgICAgcm9vdEVsOiBjcml0ZXJpYSxcbiAgICAgICAgICAgIG5hbWU6ICdmaWx0ZXInLFxuICAgICAgICAgICAgdGFyZ2V0RWw6IHRhcmdldCxcbiAgICAgICAgICAgIGZyb21FbDogZWwsXG4gICAgICAgICAgICB0b0VsOiBlbFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcGx1Z2luRXZlbnQoJ2ZpbHRlcicsIF90aGlzLCB7XG4gICAgICAgICAgICBldnQ6IGV2dFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKGZpbHRlcikge1xuICAgICAgICBwcmV2ZW50T25GaWx0ZXIgJiYgZXZ0LmNhbmNlbGFibGUgJiYgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHJldHVybjsgLy8gY2FuY2VsIGRuZFxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmhhbmRsZSAmJiAhY2xvc2VzdChvcmlnaW5hbFRhcmdldCwgb3B0aW9ucy5oYW5kbGUsIGVsLCBmYWxzZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFByZXBhcmUgYGRyYWdzdGFydGBcblxuXG4gICAgdGhpcy5fcHJlcGFyZURyYWdTdGFydChldnQsIHRvdWNoLCB0YXJnZXQpO1xuICB9LFxuICBfcHJlcGFyZURyYWdTdGFydDogZnVuY3Rpb24gX3ByZXBhcmVEcmFnU3RhcnQoXG4gIC8qKiBFdmVudCAqL1xuICBldnQsXG4gIC8qKiBUb3VjaCAqL1xuICB0b3VjaCxcbiAgLyoqIEhUTUxFbGVtZW50ICovXG4gIHRhcmdldCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgIGVsID0gX3RoaXMuZWwsXG4gICAgICAgIG9wdGlvbnMgPSBfdGhpcy5vcHRpb25zLFxuICAgICAgICBvd25lckRvY3VtZW50ID0gZWwub3duZXJEb2N1bWVudCxcbiAgICAgICAgZHJhZ1N0YXJ0Rm47XG5cbiAgICBpZiAodGFyZ2V0ICYmICFkcmFnRWwgJiYgdGFyZ2V0LnBhcmVudE5vZGUgPT09IGVsKSB7XG4gICAgICB2YXIgZHJhZ1JlY3QgPSBnZXRSZWN0KHRhcmdldCk7XG4gICAgICByb290RWwgPSBlbDtcbiAgICAgIGRyYWdFbCA9IHRhcmdldDtcbiAgICAgIHBhcmVudEVsID0gZHJhZ0VsLnBhcmVudE5vZGU7XG4gICAgICBuZXh0RWwgPSBkcmFnRWwubmV4dFNpYmxpbmc7XG4gICAgICBsYXN0RG93bkVsID0gdGFyZ2V0O1xuICAgICAgYWN0aXZlR3JvdXAgPSBvcHRpb25zLmdyb3VwO1xuICAgICAgU29ydGFibGUuZHJhZ2dlZCA9IGRyYWdFbDtcbiAgICAgIHRhcEV2dCA9IHtcbiAgICAgICAgdGFyZ2V0OiBkcmFnRWwsXG4gICAgICAgIGNsaWVudFg6ICh0b3VjaCB8fCBldnQpLmNsaWVudFgsXG4gICAgICAgIGNsaWVudFk6ICh0b3VjaCB8fCBldnQpLmNsaWVudFlcbiAgICAgIH07XG4gICAgICB0YXBEaXN0YW5jZUxlZnQgPSB0YXBFdnQuY2xpZW50WCAtIGRyYWdSZWN0LmxlZnQ7XG4gICAgICB0YXBEaXN0YW5jZVRvcCA9IHRhcEV2dC5jbGllbnRZIC0gZHJhZ1JlY3QudG9wO1xuICAgICAgdGhpcy5fbGFzdFggPSAodG91Y2ggfHwgZXZ0KS5jbGllbnRYO1xuICAgICAgdGhpcy5fbGFzdFkgPSAodG91Y2ggfHwgZXZ0KS5jbGllbnRZO1xuICAgICAgZHJhZ0VsLnN0eWxlWyd3aWxsLWNoYW5nZSddID0gJ2FsbCc7XG5cbiAgICAgIGRyYWdTdGFydEZuID0gZnVuY3Rpb24gZHJhZ1N0YXJ0Rm4oKSB7XG4gICAgICAgIHBsdWdpbkV2ZW50KCdkZWxheUVuZGVkJywgX3RoaXMsIHtcbiAgICAgICAgICBldnQ6IGV2dFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkge1xuICAgICAgICAgIF90aGlzLl9vbkRyb3AoKTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBEZWxheWVkIGRyYWcgaGFzIGJlZW4gdHJpZ2dlcmVkXG4gICAgICAgIC8vIHdlIGNhbiByZS1lbmFibGUgdGhlIGV2ZW50czogdG91Y2htb3ZlL21vdXNlbW92ZVxuXG5cbiAgICAgICAgX3RoaXMuX2Rpc2FibGVEZWxheWVkRHJhZ0V2ZW50cygpO1xuXG4gICAgICAgIGlmICghRmlyZUZveCAmJiBfdGhpcy5uYXRpdmVEcmFnZ2FibGUpIHtcbiAgICAgICAgICBkcmFnRWwuZHJhZ2dhYmxlID0gdHJ1ZTtcbiAgICAgICAgfSAvLyBCaW5kIHRoZSBldmVudHM6IGRyYWdzdGFydC9kcmFnZW5kXG5cblxuICAgICAgICBfdGhpcy5fdHJpZ2dlckRyYWdTdGFydChldnQsIHRvdWNoKTsgLy8gRHJhZyBzdGFydCBldmVudFxuXG5cbiAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgIHNvcnRhYmxlOiBfdGhpcyxcbiAgICAgICAgICBuYW1lOiAnY2hvb3NlJyxcbiAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgfSk7IC8vIENob3NlbiBpdGVtXG5cblxuICAgICAgICB0b2dnbGVDbGFzcyhkcmFnRWwsIG9wdGlvbnMuY2hvc2VuQ2xhc3MsIHRydWUpO1xuICAgICAgfTsgLy8gRGlzYWJsZSBcImRyYWdnYWJsZVwiXG5cblxuICAgICAgb3B0aW9ucy5pZ25vcmUuc3BsaXQoJywnKS5mb3JFYWNoKGZ1bmN0aW9uIChjcml0ZXJpYSkge1xuICAgICAgICBmaW5kKGRyYWdFbCwgY3JpdGVyaWEudHJpbSgpLCBfZGlzYWJsZURyYWdnYWJsZSk7XG4gICAgICB9KTtcbiAgICAgIG9uKG93bmVyRG9jdW1lbnQsICdkcmFnb3ZlcicsIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50KTtcbiAgICAgIG9uKG93bmVyRG9jdW1lbnQsICdtb3VzZW1vdmUnLCBuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudCk7XG4gICAgICBvbihvd25lckRvY3VtZW50LCAndG91Y2htb3ZlJywgbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQpO1xuICAgICAgb24ob3duZXJEb2N1bWVudCwgJ21vdXNldXAnLCBfdGhpcy5fb25Ecm9wKTtcbiAgICAgIG9uKG93bmVyRG9jdW1lbnQsICd0b3VjaGVuZCcsIF90aGlzLl9vbkRyb3ApO1xuICAgICAgb24ob3duZXJEb2N1bWVudCwgJ3RvdWNoY2FuY2VsJywgX3RoaXMuX29uRHJvcCk7IC8vIE1ha2UgZHJhZ0VsIGRyYWdnYWJsZSAobXVzdCBiZSBiZWZvcmUgZGVsYXkgZm9yIEZpcmVGb3gpXG5cbiAgICAgIGlmIChGaXJlRm94ICYmIHRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy50b3VjaFN0YXJ0VGhyZXNob2xkID0gNDtcbiAgICAgICAgZHJhZ0VsLmRyYWdnYWJsZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHBsdWdpbkV2ZW50KCdkZWxheVN0YXJ0JywgdGhpcywge1xuICAgICAgICBldnQ6IGV2dFxuICAgICAgfSk7IC8vIERlbGF5IGlzIGltcG9zc2libGUgZm9yIG5hdGl2ZSBEbkQgaW4gRWRnZSBvciBJRVxuXG4gICAgICBpZiAob3B0aW9ucy5kZWxheSAmJiAoIW9wdGlvbnMuZGVsYXlPblRvdWNoT25seSB8fCB0b3VjaCkgJiYgKCF0aGlzLm5hdGl2ZURyYWdnYWJsZSB8fCAhKEVkZ2UgfHwgSUUxMU9yTGVzcykpKSB7XG4gICAgICAgIGlmIChTb3J0YWJsZS5ldmVudENhbmNlbGVkKSB7XG4gICAgICAgICAgdGhpcy5fb25Ecm9wKCk7XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gSWYgdGhlIHVzZXIgbW92ZXMgdGhlIHBvaW50ZXIgb3IgbGV0IGdvIHRoZSBjbGljayBvciB0b3VjaFxuICAgICAgICAvLyBiZWZvcmUgdGhlIGRlbGF5IGhhcyBiZWVuIHJlYWNoZWQ6XG4gICAgICAgIC8vIGRpc2FibGUgdGhlIGRlbGF5ZWQgZHJhZ1xuXG5cbiAgICAgICAgb24ob3duZXJEb2N1bWVudCwgJ21vdXNldXAnLCBfdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnKTtcbiAgICAgICAgb24ob3duZXJEb2N1bWVudCwgJ3RvdWNoZW5kJywgX3RoaXMuX2Rpc2FibGVEZWxheWVkRHJhZyk7XG4gICAgICAgIG9uKG93bmVyRG9jdW1lbnQsICd0b3VjaGNhbmNlbCcsIF90aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuICAgICAgICBvbihvd25lckRvY3VtZW50LCAnbW91c2Vtb3ZlJywgX3RoaXMuX2RlbGF5ZWREcmFnVG91Y2hNb3ZlSGFuZGxlcik7XG4gICAgICAgIG9uKG93bmVyRG9jdW1lbnQsICd0b3VjaG1vdmUnLCBfdGhpcy5fZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKTtcbiAgICAgICAgb3B0aW9ucy5zdXBwb3J0UG9pbnRlciAmJiBvbihvd25lckRvY3VtZW50LCAncG9pbnRlcm1vdmUnLCBfdGhpcy5fZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKTtcbiAgICAgICAgX3RoaXMuX2RyYWdTdGFydFRpbWVyID0gc2V0VGltZW91dChkcmFnU3RhcnRGbiwgb3B0aW9ucy5kZWxheSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkcmFnU3RhcnRGbigpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgX2RlbGF5ZWREcmFnVG91Y2hNb3ZlSGFuZGxlcjogZnVuY3Rpb24gX2RlbGF5ZWREcmFnVG91Y2hNb3ZlSGFuZGxlcihcbiAgLyoqIFRvdWNoRXZlbnR8UG9pbnRlckV2ZW50ICoqL1xuICBlKSB7XG4gICAgdmFyIHRvdWNoID0gZS50b3VjaGVzID8gZS50b3VjaGVzWzBdIDogZTtcblxuICAgIGlmIChNYXRoLm1heChNYXRoLmFicyh0b3VjaC5jbGllbnRYIC0gdGhpcy5fbGFzdFgpLCBNYXRoLmFicyh0b3VjaC5jbGllbnRZIC0gdGhpcy5fbGFzdFkpKSA+PSBNYXRoLmZsb29yKHRoaXMub3B0aW9ucy50b3VjaFN0YXJ0VGhyZXNob2xkIC8gKHRoaXMubmF0aXZlRHJhZ2dhYmxlICYmIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDEpKSkge1xuICAgICAgdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnKCk7XG4gICAgfVxuICB9LFxuICBfZGlzYWJsZURlbGF5ZWREcmFnOiBmdW5jdGlvbiBfZGlzYWJsZURlbGF5ZWREcmFnKCkge1xuICAgIGRyYWdFbCAmJiBfZGlzYWJsZURyYWdnYWJsZShkcmFnRWwpO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLl9kcmFnU3RhcnRUaW1lcik7XG5cbiAgICB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWdFdmVudHMoKTtcbiAgfSxcbiAgX2Rpc2FibGVEZWxheWVkRHJhZ0V2ZW50czogZnVuY3Rpb24gX2Rpc2FibGVEZWxheWVkRHJhZ0V2ZW50cygpIHtcbiAgICB2YXIgb3duZXJEb2N1bWVudCA9IHRoaXMuZWwub3duZXJEb2N1bWVudDtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ21vdXNldXAnLCB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuICAgIG9mZihvd25lckRvY3VtZW50LCAndG91Y2hlbmQnLCB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuICAgIG9mZihvd25lckRvY3VtZW50LCAndG91Y2hjYW5jZWwnLCB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuICAgIG9mZihvd25lckRvY3VtZW50LCAnbW91c2Vtb3ZlJywgdGhpcy5fZGVsYXllZERyYWdUb3VjaE1vdmVIYW5kbGVyKTtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ3RvdWNobW92ZScsIHRoaXMuX2RlbGF5ZWREcmFnVG91Y2hNb3ZlSGFuZGxlcik7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICdwb2ludGVybW92ZScsIHRoaXMuX2RlbGF5ZWREcmFnVG91Y2hNb3ZlSGFuZGxlcik7XG4gIH0sXG4gIF90cmlnZ2VyRHJhZ1N0YXJ0OiBmdW5jdGlvbiBfdHJpZ2dlckRyYWdTdGFydChcbiAgLyoqIEV2ZW50ICovXG4gIGV2dCxcbiAgLyoqIFRvdWNoICovXG4gIHRvdWNoKSB7XG4gICAgdG91Y2ggPSB0b3VjaCB8fCBldnQucG9pbnRlclR5cGUgPT0gJ3RvdWNoJyAmJiBldnQ7XG5cbiAgICBpZiAoIXRoaXMubmF0aXZlRHJhZ2dhYmxlIHx8IHRvdWNoKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnN1cHBvcnRQb2ludGVyKSB7XG4gICAgICAgIG9uKGRvY3VtZW50LCAncG9pbnRlcm1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG4gICAgICB9IGVsc2UgaWYgKHRvdWNoKSB7XG4gICAgICAgIG9uKGRvY3VtZW50LCAndG91Y2htb3ZlJywgdGhpcy5fb25Ub3VjaE1vdmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb24oZG9jdW1lbnQsICdtb3VzZW1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uKGRyYWdFbCwgJ2RyYWdlbmQnLCB0aGlzKTtcbiAgICAgIG9uKHJvb3RFbCwgJ2RyYWdzdGFydCcsIHRoaXMuX29uRHJhZ1N0YXJ0KTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaWYgKGRvY3VtZW50LnNlbGVjdGlvbikge1xuICAgICAgICAvLyBUaW1lb3V0IG5lY2Nlc3NhcnkgZm9yIElFOVxuICAgICAgICBfbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRvY3VtZW50LnNlbGVjdGlvbi5lbXB0eSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHt9XG4gIH0sXG4gIF9kcmFnU3RhcnRlZDogZnVuY3Rpb24gX2RyYWdTdGFydGVkKGZhbGxiYWNrLCBldnQpIHtcblxuICAgIGF3YWl0aW5nRHJhZ1N0YXJ0ZWQgPSBmYWxzZTtcblxuICAgIGlmIChyb290RWwgJiYgZHJhZ0VsKSB7XG4gICAgICBwbHVnaW5FdmVudCgnZHJhZ1N0YXJ0ZWQnLCB0aGlzLCB7XG4gICAgICAgIGV2dDogZXZ0XG4gICAgICB9KTtcblxuICAgICAgaWYgKHRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgICAgIG9uKGRvY3VtZW50LCAnZHJhZ292ZXInLCBfY2hlY2tPdXRzaWRlVGFyZ2V0RWwpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9uczsgLy8gQXBwbHkgZWZmZWN0XG5cbiAgICAgICFmYWxsYmFjayAmJiB0b2dnbGVDbGFzcyhkcmFnRWwsIG9wdGlvbnMuZHJhZ0NsYXNzLCBmYWxzZSk7XG4gICAgICB0b2dnbGVDbGFzcyhkcmFnRWwsIG9wdGlvbnMuZ2hvc3RDbGFzcywgdHJ1ZSk7XG4gICAgICBTb3J0YWJsZS5hY3RpdmUgPSB0aGlzO1xuICAgICAgZmFsbGJhY2sgJiYgdGhpcy5fYXBwZW5kR2hvc3QoKTsgLy8gRHJhZyBzdGFydCBldmVudFxuXG4gICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICBuYW1lOiAnc3RhcnQnLFxuICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9udWxsaW5nKCk7XG4gICAgfVxuICB9LFxuICBfZW11bGF0ZURyYWdPdmVyOiBmdW5jdGlvbiBfZW11bGF0ZURyYWdPdmVyKCkge1xuICAgIGlmICh0b3VjaEV2dCkge1xuICAgICAgdGhpcy5fbGFzdFggPSB0b3VjaEV2dC5jbGllbnRYO1xuICAgICAgdGhpcy5fbGFzdFkgPSB0b3VjaEV2dC5jbGllbnRZO1xuXG4gICAgICBfaGlkZUdob3N0Rm9yVGFyZ2V0KCk7XG5cbiAgICAgIHZhciB0YXJnZXQgPSBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KHRvdWNoRXZ0LmNsaWVudFgsIHRvdWNoRXZ0LmNsaWVudFkpO1xuICAgICAgdmFyIHBhcmVudCA9IHRhcmdldDtcblxuICAgICAgd2hpbGUgKHRhcmdldCAmJiB0YXJnZXQuc2hhZG93Um9vdCkge1xuICAgICAgICB0YXJnZXQgPSB0YXJnZXQuc2hhZG93Um9vdC5lbGVtZW50RnJvbVBvaW50KHRvdWNoRXZ0LmNsaWVudFgsIHRvdWNoRXZ0LmNsaWVudFkpO1xuICAgICAgICBpZiAodGFyZ2V0ID09PSBwYXJlbnQpIGJyZWFrO1xuICAgICAgICBwYXJlbnQgPSB0YXJnZXQ7XG4gICAgICB9XG5cbiAgICAgIGRyYWdFbC5wYXJlbnROb2RlW2V4cGFuZG9dLl9pc091dHNpZGVUaGlzRWwodGFyZ2V0KTtcblxuICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICBkbyB7XG4gICAgICAgICAgaWYgKHBhcmVudFtleHBhbmRvXSkge1xuICAgICAgICAgICAgdmFyIGluc2VydGVkID0gdm9pZCAwO1xuICAgICAgICAgICAgaW5zZXJ0ZWQgPSBwYXJlbnRbZXhwYW5kb10uX29uRHJhZ092ZXIoe1xuICAgICAgICAgICAgICBjbGllbnRYOiB0b3VjaEV2dC5jbGllbnRYLFxuICAgICAgICAgICAgICBjbGllbnRZOiB0b3VjaEV2dC5jbGllbnRZLFxuICAgICAgICAgICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgICAgICAgICAgcm9vdEVsOiBwYXJlbnRcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoaW5zZXJ0ZWQgJiYgIXRoaXMub3B0aW9ucy5kcmFnb3ZlckJ1YmJsZSkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0YXJnZXQgPSBwYXJlbnQ7IC8vIHN0b3JlIGxhc3QgZWxlbWVudFxuICAgICAgICB9XG4gICAgICAgIC8qIGpzaGludCBib3NzOnRydWUgKi9cbiAgICAgICAgd2hpbGUgKHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlKTtcbiAgICAgIH1cblxuICAgICAgX3VuaGlkZUdob3N0Rm9yVGFyZ2V0KCk7XG4gICAgfVxuICB9LFxuICBfb25Ub3VjaE1vdmU6IGZ1bmN0aW9uIF9vblRvdWNoTW92ZShcbiAgLyoqVG91Y2hFdmVudCovXG4gIGV2dCkge1xuICAgIGlmICh0YXBFdnQpIHtcbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgIGZhbGxiYWNrVG9sZXJhbmNlID0gb3B0aW9ucy5mYWxsYmFja1RvbGVyYW5jZSxcbiAgICAgICAgICBmYWxsYmFja09mZnNldCA9IG9wdGlvbnMuZmFsbGJhY2tPZmZzZXQsXG4gICAgICAgICAgdG91Y2ggPSBldnQudG91Y2hlcyA/IGV2dC50b3VjaGVzWzBdIDogZXZ0LFxuICAgICAgICAgIGdob3N0TWF0cml4ID0gZ2hvc3RFbCAmJiBtYXRyaXgoZ2hvc3RFbCwgdHJ1ZSksXG4gICAgICAgICAgc2NhbGVYID0gZ2hvc3RFbCAmJiBnaG9zdE1hdHJpeCAmJiBnaG9zdE1hdHJpeC5hLFxuICAgICAgICAgIHNjYWxlWSA9IGdob3N0RWwgJiYgZ2hvc3RNYXRyaXggJiYgZ2hvc3RNYXRyaXguZCxcbiAgICAgICAgICByZWxhdGl2ZVNjcm9sbE9mZnNldCA9IFBvc2l0aW9uR2hvc3RBYnNvbHV0ZWx5ICYmIGdob3N0UmVsYXRpdmVQYXJlbnQgJiYgZ2V0UmVsYXRpdmVTY3JvbGxPZmZzZXQoZ2hvc3RSZWxhdGl2ZVBhcmVudCksXG4gICAgICAgICAgZHggPSAodG91Y2guY2xpZW50WCAtIHRhcEV2dC5jbGllbnRYICsgZmFsbGJhY2tPZmZzZXQueCkgLyAoc2NhbGVYIHx8IDEpICsgKHJlbGF0aXZlU2Nyb2xsT2Zmc2V0ID8gcmVsYXRpdmVTY3JvbGxPZmZzZXRbMF0gLSBnaG9zdFJlbGF0aXZlUGFyZW50SW5pdGlhbFNjcm9sbFswXSA6IDApIC8gKHNjYWxlWCB8fCAxKSxcbiAgICAgICAgICBkeSA9ICh0b3VjaC5jbGllbnRZIC0gdGFwRXZ0LmNsaWVudFkgKyBmYWxsYmFja09mZnNldC55KSAvIChzY2FsZVkgfHwgMSkgKyAocmVsYXRpdmVTY3JvbGxPZmZzZXQgPyByZWxhdGl2ZVNjcm9sbE9mZnNldFsxXSAtIGdob3N0UmVsYXRpdmVQYXJlbnRJbml0aWFsU2Nyb2xsWzFdIDogMCkgLyAoc2NhbGVZIHx8IDEpOyAvLyBvbmx5IHNldCB0aGUgc3RhdHVzIHRvIGRyYWdnaW5nLCB3aGVuIHdlIGFyZSBhY3R1YWxseSBkcmFnZ2luZ1xuXG4gICAgICBpZiAoIVNvcnRhYmxlLmFjdGl2ZSAmJiAhYXdhaXRpbmdEcmFnU3RhcnRlZCkge1xuICAgICAgICBpZiAoZmFsbGJhY2tUb2xlcmFuY2UgJiYgTWF0aC5tYXgoTWF0aC5hYnModG91Y2guY2xpZW50WCAtIHRoaXMuX2xhc3RYKSwgTWF0aC5hYnModG91Y2guY2xpZW50WSAtIHRoaXMuX2xhc3RZKSkgPCBmYWxsYmFja1RvbGVyYW5jZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX29uRHJhZ1N0YXJ0KGV2dCwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChnaG9zdEVsKSB7XG4gICAgICAgIGlmIChnaG9zdE1hdHJpeCkge1xuICAgICAgICAgIGdob3N0TWF0cml4LmUgKz0gZHggLSAobGFzdER4IHx8IDApO1xuICAgICAgICAgIGdob3N0TWF0cml4LmYgKz0gZHkgLSAobGFzdER5IHx8IDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGdob3N0TWF0cml4ID0ge1xuICAgICAgICAgICAgYTogMSxcbiAgICAgICAgICAgIGI6IDAsXG4gICAgICAgICAgICBjOiAwLFxuICAgICAgICAgICAgZDogMSxcbiAgICAgICAgICAgIGU6IGR4LFxuICAgICAgICAgICAgZjogZHlcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNzc01hdHJpeCA9IFwibWF0cml4KFwiLmNvbmNhdChnaG9zdE1hdHJpeC5hLCBcIixcIikuY29uY2F0KGdob3N0TWF0cml4LmIsIFwiLFwiKS5jb25jYXQoZ2hvc3RNYXRyaXguYywgXCIsXCIpLmNvbmNhdChnaG9zdE1hdHJpeC5kLCBcIixcIikuY29uY2F0KGdob3N0TWF0cml4LmUsIFwiLFwiKS5jb25jYXQoZ2hvc3RNYXRyaXguZiwgXCIpXCIpO1xuICAgICAgICBjc3MoZ2hvc3RFbCwgJ3dlYmtpdFRyYW5zZm9ybScsIGNzc01hdHJpeCk7XG4gICAgICAgIGNzcyhnaG9zdEVsLCAnbW96VHJhbnNmb3JtJywgY3NzTWF0cml4KTtcbiAgICAgICAgY3NzKGdob3N0RWwsICdtc1RyYW5zZm9ybScsIGNzc01hdHJpeCk7XG4gICAgICAgIGNzcyhnaG9zdEVsLCAndHJhbnNmb3JtJywgY3NzTWF0cml4KTtcbiAgICAgICAgbGFzdER4ID0gZHg7XG4gICAgICAgIGxhc3REeSA9IGR5O1xuICAgICAgICB0b3VjaEV2dCA9IHRvdWNoO1xuICAgICAgfVxuXG4gICAgICBldnQuY2FuY2VsYWJsZSAmJiBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH0sXG4gIF9hcHBlbmRHaG9zdDogZnVuY3Rpb24gX2FwcGVuZEdob3N0KCkge1xuICAgIC8vIEJ1ZyBpZiB1c2luZyBzY2FsZSgpOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yNjM3MDU4XG4gICAgLy8gTm90IGJlaW5nIGFkanVzdGVkIGZvclxuICAgIGlmICghZ2hvc3RFbCkge1xuICAgICAgdmFyIGNvbnRhaW5lciA9IHRoaXMub3B0aW9ucy5mYWxsYmFja09uQm9keSA/IGRvY3VtZW50LmJvZHkgOiByb290RWwsXG4gICAgICAgICAgcmVjdCA9IGdldFJlY3QoZHJhZ0VsLCB0cnVlLCBQb3NpdGlvbkdob3N0QWJzb2x1dGVseSwgdHJ1ZSwgY29udGFpbmVyKSxcbiAgICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zOyAvLyBQb3NpdGlvbiBhYnNvbHV0ZWx5XG5cbiAgICAgIGlmIChQb3NpdGlvbkdob3N0QWJzb2x1dGVseSkge1xuICAgICAgICAvLyBHZXQgcmVsYXRpdmVseSBwb3NpdGlvbmVkIHBhcmVudFxuICAgICAgICBnaG9zdFJlbGF0aXZlUGFyZW50ID0gY29udGFpbmVyO1xuXG4gICAgICAgIHdoaWxlIChjc3MoZ2hvc3RSZWxhdGl2ZVBhcmVudCwgJ3Bvc2l0aW9uJykgPT09ICdzdGF0aWMnICYmIGNzcyhnaG9zdFJlbGF0aXZlUGFyZW50LCAndHJhbnNmb3JtJykgPT09ICdub25lJyAmJiBnaG9zdFJlbGF0aXZlUGFyZW50ICE9PSBkb2N1bWVudCkge1xuICAgICAgICAgIGdob3N0UmVsYXRpdmVQYXJlbnQgPSBnaG9zdFJlbGF0aXZlUGFyZW50LnBhcmVudE5vZGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZ2hvc3RSZWxhdGl2ZVBhcmVudCAhPT0gZG9jdW1lbnQuYm9keSAmJiBnaG9zdFJlbGF0aXZlUGFyZW50ICE9PSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgICBpZiAoZ2hvc3RSZWxhdGl2ZVBhcmVudCA9PT0gZG9jdW1lbnQpIGdob3N0UmVsYXRpdmVQYXJlbnQgPSBnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50KCk7XG4gICAgICAgICAgcmVjdC50b3AgKz0gZ2hvc3RSZWxhdGl2ZVBhcmVudC5zY3JvbGxUb3A7XG4gICAgICAgICAgcmVjdC5sZWZ0ICs9IGdob3N0UmVsYXRpdmVQYXJlbnQuc2Nyb2xsTGVmdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBnaG9zdFJlbGF0aXZlUGFyZW50ID0gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2hvc3RSZWxhdGl2ZVBhcmVudEluaXRpYWxTY3JvbGwgPSBnZXRSZWxhdGl2ZVNjcm9sbE9mZnNldChnaG9zdFJlbGF0aXZlUGFyZW50KTtcbiAgICAgIH1cblxuICAgICAgZ2hvc3RFbCA9IGRyYWdFbC5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICB0b2dnbGVDbGFzcyhnaG9zdEVsLCBvcHRpb25zLmdob3N0Q2xhc3MsIGZhbHNlKTtcbiAgICAgIHRvZ2dsZUNsYXNzKGdob3N0RWwsIG9wdGlvbnMuZmFsbGJhY2tDbGFzcywgdHJ1ZSk7XG4gICAgICB0b2dnbGVDbGFzcyhnaG9zdEVsLCBvcHRpb25zLmRyYWdDbGFzcywgdHJ1ZSk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ3RyYW5zaXRpb24nLCAnJyk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ3RyYW5zZm9ybScsICcnKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAnYm94LXNpemluZycsICdib3JkZXItYm94Jyk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ21hcmdpbicsIDApO1xuICAgICAgY3NzKGdob3N0RWwsICd0b3AnLCByZWN0LnRvcCk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ2xlZnQnLCByZWN0LmxlZnQpO1xuICAgICAgY3NzKGdob3N0RWwsICd3aWR0aCcsIHJlY3Qud2lkdGgpO1xuICAgICAgY3NzKGdob3N0RWwsICdoZWlnaHQnLCByZWN0LmhlaWdodCk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ29wYWNpdHknLCAnMC44Jyk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ3Bvc2l0aW9uJywgUG9zaXRpb25HaG9zdEFic29sdXRlbHkgPyAnYWJzb2x1dGUnIDogJ2ZpeGVkJyk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ3pJbmRleCcsICcxMDAwMDAnKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAncG9pbnRlckV2ZW50cycsICdub25lJyk7XG4gICAgICBTb3J0YWJsZS5naG9zdCA9IGdob3N0RWw7XG4gICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZ2hvc3RFbCk7IC8vIFNldCB0cmFuc2Zvcm0tb3JpZ2luXG5cbiAgICAgIGNzcyhnaG9zdEVsLCAndHJhbnNmb3JtLW9yaWdpbicsIHRhcERpc3RhbmNlTGVmdCAvIHBhcnNlSW50KGdob3N0RWwuc3R5bGUud2lkdGgpICogMTAwICsgJyUgJyArIHRhcERpc3RhbmNlVG9wIC8gcGFyc2VJbnQoZ2hvc3RFbC5zdHlsZS5oZWlnaHQpICogMTAwICsgJyUnKTtcbiAgICB9XG4gIH0sXG4gIF9vbkRyYWdTdGFydDogZnVuY3Rpb24gX29uRHJhZ1N0YXJ0KFxuICAvKipFdmVudCovXG4gIGV2dCxcbiAgLyoqYm9vbGVhbiovXG4gIGZhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBkYXRhVHJhbnNmZXIgPSBldnQuZGF0YVRyYW5zZmVyO1xuICAgIHZhciBvcHRpb25zID0gX3RoaXMub3B0aW9ucztcbiAgICBwbHVnaW5FdmVudCgnZHJhZ1N0YXJ0JywgdGhpcywge1xuICAgICAgZXZ0OiBldnRcbiAgICB9KTtcblxuICAgIGlmIChTb3J0YWJsZS5ldmVudENhbmNlbGVkKSB7XG4gICAgICB0aGlzLl9vbkRyb3AoKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHBsdWdpbkV2ZW50KCdzZXR1cENsb25lJywgdGhpcyk7XG5cbiAgICBpZiAoIVNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHtcbiAgICAgIGNsb25lRWwgPSBjbG9uZShkcmFnRWwpO1xuICAgICAgY2xvbmVFbC5yZW1vdmVBdHRyaWJ1dGUoXCJpZFwiKTtcbiAgICAgIGNsb25lRWwuZHJhZ2dhYmxlID0gZmFsc2U7XG4gICAgICBjbG9uZUVsLnN0eWxlWyd3aWxsLWNoYW5nZSddID0gJyc7XG5cbiAgICAgIHRoaXMuX2hpZGVDbG9uZSgpO1xuXG4gICAgICB0b2dnbGVDbGFzcyhjbG9uZUVsLCB0aGlzLm9wdGlvbnMuY2hvc2VuQ2xhc3MsIGZhbHNlKTtcbiAgICAgIFNvcnRhYmxlLmNsb25lID0gY2xvbmVFbDtcbiAgICB9IC8vICMxMTQzOiBJRnJhbWUgc3VwcG9ydCB3b3JrYXJvdW5kXG5cblxuICAgIF90aGlzLmNsb25lSWQgPSBfbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgcGx1Z2luRXZlbnQoJ2Nsb25lJywgX3RoaXMpO1xuICAgICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHJldHVybjtcblxuICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLnJlbW92ZUNsb25lT25IaWRlKSB7XG4gICAgICAgIHJvb3RFbC5pbnNlcnRCZWZvcmUoY2xvbmVFbCwgZHJhZ0VsKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuX2hpZGVDbG9uZSgpO1xuXG4gICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgIHNvcnRhYmxlOiBfdGhpcyxcbiAgICAgICAgbmFtZTogJ2Nsb25lJ1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgIWZhbGxiYWNrICYmIHRvZ2dsZUNsYXNzKGRyYWdFbCwgb3B0aW9ucy5kcmFnQ2xhc3MsIHRydWUpOyAvLyBTZXQgcHJvcGVyIGRyb3AgZXZlbnRzXG5cbiAgICBpZiAoZmFsbGJhY2spIHtcbiAgICAgIGlnbm9yZU5leHRDbGljayA9IHRydWU7XG4gICAgICBfdGhpcy5fbG9vcElkID0gc2V0SW50ZXJ2YWwoX3RoaXMuX2VtdWxhdGVEcmFnT3ZlciwgNTApO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBVbmRvIHdoYXQgd2FzIHNldCBpbiBfcHJlcGFyZURyYWdTdGFydCBiZWZvcmUgZHJhZyBzdGFydGVkXG4gICAgICBvZmYoZG9jdW1lbnQsICdtb3VzZXVwJywgX3RoaXMuX29uRHJvcCk7XG4gICAgICBvZmYoZG9jdW1lbnQsICd0b3VjaGVuZCcsIF90aGlzLl9vbkRyb3ApO1xuICAgICAgb2ZmKGRvY3VtZW50LCAndG91Y2hjYW5jZWwnLCBfdGhpcy5fb25Ecm9wKTtcblxuICAgICAgaWYgKGRhdGFUcmFuc2Zlcikge1xuICAgICAgICBkYXRhVHJhbnNmZXIuZWZmZWN0QWxsb3dlZCA9ICdtb3ZlJztcbiAgICAgICAgb3B0aW9ucy5zZXREYXRhICYmIG9wdGlvbnMuc2V0RGF0YS5jYWxsKF90aGlzLCBkYXRhVHJhbnNmZXIsIGRyYWdFbCk7XG4gICAgICB9XG5cbiAgICAgIG9uKGRvY3VtZW50LCAnZHJvcCcsIF90aGlzKTsgLy8gIzEyNzYgZml4OlxuXG4gICAgICBjc3MoZHJhZ0VsLCAndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZVooMCknKTtcbiAgICB9XG5cbiAgICBhd2FpdGluZ0RyYWdTdGFydGVkID0gdHJ1ZTtcbiAgICBfdGhpcy5fZHJhZ1N0YXJ0SWQgPSBfbmV4dFRpY2soX3RoaXMuX2RyYWdTdGFydGVkLmJpbmQoX3RoaXMsIGZhbGxiYWNrLCBldnQpKTtcbiAgICBvbihkb2N1bWVudCwgJ3NlbGVjdHN0YXJ0JywgX3RoaXMpO1xuICAgIG1vdmVkID0gdHJ1ZTtcblxuICAgIGlmIChTYWZhcmkpIHtcbiAgICAgIGNzcyhkb2N1bWVudC5ib2R5LCAndXNlci1zZWxlY3QnLCAnbm9uZScpO1xuICAgIH1cbiAgfSxcbiAgLy8gUmV0dXJucyB0cnVlIC0gaWYgbm8gZnVydGhlciBhY3Rpb24gaXMgbmVlZGVkIChlaXRoZXIgaW5zZXJ0ZWQgb3IgYW5vdGhlciBjb25kaXRpb24pXG4gIF9vbkRyYWdPdmVyOiBmdW5jdGlvbiBfb25EcmFnT3ZlcihcbiAgLyoqRXZlbnQqL1xuICBldnQpIHtcbiAgICB2YXIgZWwgPSB0aGlzLmVsLFxuICAgICAgICB0YXJnZXQgPSBldnQudGFyZ2V0LFxuICAgICAgICBkcmFnUmVjdCxcbiAgICAgICAgdGFyZ2V0UmVjdCxcbiAgICAgICAgcmV2ZXJ0LFxuICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICBncm91cCA9IG9wdGlvbnMuZ3JvdXAsXG4gICAgICAgIGFjdGl2ZVNvcnRhYmxlID0gU29ydGFibGUuYWN0aXZlLFxuICAgICAgICBpc093bmVyID0gYWN0aXZlR3JvdXAgPT09IGdyb3VwLFxuICAgICAgICBjYW5Tb3J0ID0gb3B0aW9ucy5zb3J0LFxuICAgICAgICBmcm9tU29ydGFibGUgPSBwdXRTb3J0YWJsZSB8fCBhY3RpdmVTb3J0YWJsZSxcbiAgICAgICAgdmVydGljYWwsXG4gICAgICAgIF90aGlzID0gdGhpcyxcbiAgICAgICAgY29tcGxldGVkRmlyZWQgPSBmYWxzZTtcblxuICAgIGlmIChfc2lsZW50KSByZXR1cm47XG5cbiAgICBmdW5jdGlvbiBkcmFnT3ZlckV2ZW50KG5hbWUsIGV4dHJhKSB7XG4gICAgICBwbHVnaW5FdmVudChuYW1lLCBfdGhpcywgX29iamVjdFNwcmVhZDIoe1xuICAgICAgICBldnQ6IGV2dCxcbiAgICAgICAgaXNPd25lcjogaXNPd25lcixcbiAgICAgICAgYXhpczogdmVydGljYWwgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnLFxuICAgICAgICByZXZlcnQ6IHJldmVydCxcbiAgICAgICAgZHJhZ1JlY3Q6IGRyYWdSZWN0LFxuICAgICAgICB0YXJnZXRSZWN0OiB0YXJnZXRSZWN0LFxuICAgICAgICBjYW5Tb3J0OiBjYW5Tb3J0LFxuICAgICAgICBmcm9tU29ydGFibGU6IGZyb21Tb3J0YWJsZSxcbiAgICAgICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgICAgIGNvbXBsZXRlZDogY29tcGxldGVkLFxuICAgICAgICBvbk1vdmU6IGZ1bmN0aW9uIG9uTW92ZSh0YXJnZXQsIGFmdGVyKSB7XG4gICAgICAgICAgcmV0dXJuIF9vbk1vdmUocm9vdEVsLCBlbCwgZHJhZ0VsLCBkcmFnUmVjdCwgdGFyZ2V0LCBnZXRSZWN0KHRhcmdldCksIGV2dCwgYWZ0ZXIpO1xuICAgICAgICB9LFxuICAgICAgICBjaGFuZ2VkOiBjaGFuZ2VkXG4gICAgICB9LCBleHRyYSkpO1xuICAgIH0gLy8gQ2FwdHVyZSBhbmltYXRpb24gc3RhdGVcblxuXG4gICAgZnVuY3Rpb24gY2FwdHVyZSgpIHtcbiAgICAgIGRyYWdPdmVyRXZlbnQoJ2RyYWdPdmVyQW5pbWF0aW9uQ2FwdHVyZScpO1xuXG4gICAgICBfdGhpcy5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcblxuICAgICAgaWYgKF90aGlzICE9PSBmcm9tU29ydGFibGUpIHtcbiAgICAgICAgZnJvbVNvcnRhYmxlLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuICAgICAgfVxuICAgIH0gLy8gUmV0dXJuIGludm9jYXRpb24gd2hlbiBkcmFnRWwgaXMgaW5zZXJ0ZWQgKG9yIGNvbXBsZXRlZClcblxuXG4gICAgZnVuY3Rpb24gY29tcGxldGVkKGluc2VydGlvbikge1xuICAgICAgZHJhZ092ZXJFdmVudCgnZHJhZ092ZXJDb21wbGV0ZWQnLCB7XG4gICAgICAgIGluc2VydGlvbjogaW5zZXJ0aW9uXG4gICAgICB9KTtcblxuICAgICAgaWYgKGluc2VydGlvbikge1xuICAgICAgICAvLyBDbG9uZXMgbXVzdCBiZSBoaWRkZW4gYmVmb3JlIGZvbGRpbmcgYW5pbWF0aW9uIHRvIGNhcHR1cmUgZHJhZ1JlY3RBYnNvbHV0ZSBwcm9wZXJseVxuICAgICAgICBpZiAoaXNPd25lcikge1xuICAgICAgICAgIGFjdGl2ZVNvcnRhYmxlLl9oaWRlQ2xvbmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhY3RpdmVTb3J0YWJsZS5fc2hvd0Nsb25lKF90aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfdGhpcyAhPT0gZnJvbVNvcnRhYmxlKSB7XG4gICAgICAgICAgLy8gU2V0IGdob3N0IGNsYXNzIHRvIG5ldyBzb3J0YWJsZSdzIGdob3N0IGNsYXNzXG4gICAgICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBwdXRTb3J0YWJsZSA/IHB1dFNvcnRhYmxlLm9wdGlvbnMuZ2hvc3RDbGFzcyA6IGFjdGl2ZVNvcnRhYmxlLm9wdGlvbnMuZ2hvc3RDbGFzcywgZmFsc2UpO1xuICAgICAgICAgIHRvZ2dsZUNsYXNzKGRyYWdFbCwgb3B0aW9ucy5naG9zdENsYXNzLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwdXRTb3J0YWJsZSAhPT0gX3RoaXMgJiYgX3RoaXMgIT09IFNvcnRhYmxlLmFjdGl2ZSkge1xuICAgICAgICAgIHB1dFNvcnRhYmxlID0gX3RoaXM7XG4gICAgICAgIH0gZWxzZSBpZiAoX3RoaXMgPT09IFNvcnRhYmxlLmFjdGl2ZSAmJiBwdXRTb3J0YWJsZSkge1xuICAgICAgICAgIHB1dFNvcnRhYmxlID0gbnVsbDtcbiAgICAgICAgfSAvLyBBbmltYXRpb25cblxuXG4gICAgICAgIGlmIChmcm9tU29ydGFibGUgPT09IF90aGlzKSB7XG4gICAgICAgICAgX3RoaXMuX2lnbm9yZVdoaWxlQW5pbWF0aW5nID0gdGFyZ2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMuYW5pbWF0ZUFsbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZHJhZ092ZXJFdmVudCgnZHJhZ092ZXJBbmltYXRpb25Db21wbGV0ZScpO1xuICAgICAgICAgIF90aGlzLl9pZ25vcmVXaGlsZUFuaW1hdGluZyA9IG51bGw7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChfdGhpcyAhPT0gZnJvbVNvcnRhYmxlKSB7XG4gICAgICAgICAgZnJvbVNvcnRhYmxlLmFuaW1hdGVBbGwoKTtcbiAgICAgICAgICBmcm9tU29ydGFibGUuX2lnbm9yZVdoaWxlQW5pbWF0aW5nID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSAvLyBOdWxsIGxhc3RUYXJnZXQgaWYgaXQgaXMgbm90IGluc2lkZSBhIHByZXZpb3VzbHkgc3dhcHBlZCBlbGVtZW50XG5cblxuICAgICAgaWYgKHRhcmdldCA9PT0gZHJhZ0VsICYmICFkcmFnRWwuYW5pbWF0ZWQgfHwgdGFyZ2V0ID09PSBlbCAmJiAhdGFyZ2V0LmFuaW1hdGVkKSB7XG4gICAgICAgIGxhc3RUYXJnZXQgPSBudWxsO1xuICAgICAgfSAvLyBubyBidWJibGluZyBhbmQgbm90IGZhbGxiYWNrXG5cblxuICAgICAgaWYgKCFvcHRpb25zLmRyYWdvdmVyQnViYmxlICYmICFldnQucm9vdEVsICYmIHRhcmdldCAhPT0gZG9jdW1lbnQpIHtcbiAgICAgICAgZHJhZ0VsLnBhcmVudE5vZGVbZXhwYW5kb10uX2lzT3V0c2lkZVRoaXNFbChldnQudGFyZ2V0KTsgLy8gRG8gbm90IGRldGVjdCBmb3IgZW1wdHkgaW5zZXJ0IGlmIGFscmVhZHkgaW5zZXJ0ZWRcblxuXG4gICAgICAgICFpbnNlcnRpb24gJiYgbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQoZXZ0KTtcbiAgICAgIH1cblxuICAgICAgIW9wdGlvbnMuZHJhZ292ZXJCdWJibGUgJiYgZXZ0LnN0b3BQcm9wYWdhdGlvbiAmJiBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICByZXR1cm4gY29tcGxldGVkRmlyZWQgPSB0cnVlO1xuICAgIH0gLy8gQ2FsbCB3aGVuIGRyYWdFbCBoYXMgYmVlbiBpbnNlcnRlZFxuXG5cbiAgICBmdW5jdGlvbiBjaGFuZ2VkKCkge1xuICAgICAgbmV3SW5kZXggPSBpbmRleChkcmFnRWwpO1xuICAgICAgbmV3RHJhZ2dhYmxlSW5kZXggPSBpbmRleChkcmFnRWwsIG9wdGlvbnMuZHJhZ2dhYmxlKTtcblxuICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICBzb3J0YWJsZTogX3RoaXMsXG4gICAgICAgIG5hbWU6ICdjaGFuZ2UnLFxuICAgICAgICB0b0VsOiBlbCxcbiAgICAgICAgbmV3SW5kZXg6IG5ld0luZGV4LFxuICAgICAgICBuZXdEcmFnZ2FibGVJbmRleDogbmV3RHJhZ2dhYmxlSW5kZXgsXG4gICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGV2dC5wcmV2ZW50RGVmYXVsdCAhPT0gdm9pZCAwKSB7XG4gICAgICBldnQuY2FuY2VsYWJsZSAmJiBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICB0YXJnZXQgPSBjbG9zZXN0KHRhcmdldCwgb3B0aW9ucy5kcmFnZ2FibGUsIGVsLCB0cnVlKTtcbiAgICBkcmFnT3ZlckV2ZW50KCdkcmFnT3ZlcicpO1xuICAgIGlmIChTb3J0YWJsZS5ldmVudENhbmNlbGVkKSByZXR1cm4gY29tcGxldGVkRmlyZWQ7XG5cbiAgICBpZiAoZHJhZ0VsLmNvbnRhaW5zKGV2dC50YXJnZXQpIHx8IHRhcmdldC5hbmltYXRlZCAmJiB0YXJnZXQuYW5pbWF0aW5nWCAmJiB0YXJnZXQuYW5pbWF0aW5nWSB8fCBfdGhpcy5faWdub3JlV2hpbGVBbmltYXRpbmcgPT09IHRhcmdldCkge1xuICAgICAgcmV0dXJuIGNvbXBsZXRlZChmYWxzZSk7XG4gICAgfVxuXG4gICAgaWdub3JlTmV4dENsaWNrID0gZmFsc2U7XG5cbiAgICBpZiAoYWN0aXZlU29ydGFibGUgJiYgIW9wdGlvbnMuZGlzYWJsZWQgJiYgKGlzT3duZXIgPyBjYW5Tb3J0IHx8IChyZXZlcnQgPSBwYXJlbnRFbCAhPT0gcm9vdEVsKSAvLyBSZXZlcnRpbmcgaXRlbSBpbnRvIHRoZSBvcmlnaW5hbCBsaXN0XG4gICAgOiBwdXRTb3J0YWJsZSA9PT0gdGhpcyB8fCAodGhpcy5sYXN0UHV0TW9kZSA9IGFjdGl2ZUdyb3VwLmNoZWNrUHVsbCh0aGlzLCBhY3RpdmVTb3J0YWJsZSwgZHJhZ0VsLCBldnQpKSAmJiBncm91cC5jaGVja1B1dCh0aGlzLCBhY3RpdmVTb3J0YWJsZSwgZHJhZ0VsLCBldnQpKSkge1xuICAgICAgdmVydGljYWwgPSB0aGlzLl9nZXREaXJlY3Rpb24oZXZ0LCB0YXJnZXQpID09PSAndmVydGljYWwnO1xuICAgICAgZHJhZ1JlY3QgPSBnZXRSZWN0KGRyYWdFbCk7XG4gICAgICBkcmFnT3ZlckV2ZW50KCdkcmFnT3ZlclZhbGlkJyk7XG4gICAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkgcmV0dXJuIGNvbXBsZXRlZEZpcmVkO1xuXG4gICAgICBpZiAocmV2ZXJ0KSB7XG4gICAgICAgIHBhcmVudEVsID0gcm9vdEVsOyAvLyBhY3R1YWxpemF0aW9uXG5cbiAgICAgICAgY2FwdHVyZSgpO1xuXG4gICAgICAgIHRoaXMuX2hpZGVDbG9uZSgpO1xuXG4gICAgICAgIGRyYWdPdmVyRXZlbnQoJ3JldmVydCcpO1xuXG4gICAgICAgIGlmICghU29ydGFibGUuZXZlbnRDYW5jZWxlZCkge1xuICAgICAgICAgIGlmIChuZXh0RWwpIHtcbiAgICAgICAgICAgIHJvb3RFbC5pbnNlcnRCZWZvcmUoZHJhZ0VsLCBuZXh0RWwpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByb290RWwuYXBwZW5kQ2hpbGQoZHJhZ0VsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29tcGxldGVkKHRydWUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZWxMYXN0Q2hpbGQgPSBsYXN0Q2hpbGQoZWwsIG9wdGlvbnMuZHJhZ2dhYmxlKTtcblxuICAgICAgaWYgKCFlbExhc3RDaGlsZCB8fCBfZ2hvc3RJc0xhc3QoZXZ0LCB2ZXJ0aWNhbCwgdGhpcykgJiYgIWVsTGFzdENoaWxkLmFuaW1hdGVkKSB7XG4gICAgICAgIC8vIEluc2VydCB0byBlbmQgb2YgbGlzdFxuICAgICAgICAvLyBJZiBhbHJlYWR5IGF0IGVuZCBvZiBsaXN0OiBEbyBub3QgaW5zZXJ0XG4gICAgICAgIGlmIChlbExhc3RDaGlsZCA9PT0gZHJhZ0VsKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbXBsZXRlZChmYWxzZSk7XG4gICAgICAgIH0gLy8gaWYgdGhlcmUgaXMgYSBsYXN0IGVsZW1lbnQsIGl0IGlzIHRoZSB0YXJnZXRcblxuXG4gICAgICAgIGlmIChlbExhc3RDaGlsZCAmJiBlbCA9PT0gZXZ0LnRhcmdldCkge1xuICAgICAgICAgIHRhcmdldCA9IGVsTGFzdENoaWxkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICAgIHRhcmdldFJlY3QgPSBnZXRSZWN0KHRhcmdldCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX29uTW92ZShyb290RWwsIGVsLCBkcmFnRWwsIGRyYWdSZWN0LCB0YXJnZXQsIHRhcmdldFJlY3QsIGV2dCwgISF0YXJnZXQpICE9PSBmYWxzZSkge1xuICAgICAgICAgIGNhcHR1cmUoKTtcblxuICAgICAgICAgIGlmIChlbExhc3RDaGlsZCAmJiBlbExhc3RDaGlsZC5uZXh0U2libGluZykge1xuICAgICAgICAgICAgLy8gdGhlIGxhc3QgZHJhZ2dhYmxlIGVsZW1lbnQgaXMgbm90IHRoZSBsYXN0IG5vZGVcbiAgICAgICAgICAgIGVsLmluc2VydEJlZm9yZShkcmFnRWwsIGVsTGFzdENoaWxkLm5leHRTaWJsaW5nKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWwuYXBwZW5kQ2hpbGQoZHJhZ0VsKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXJlbnRFbCA9IGVsOyAvLyBhY3R1YWxpemF0aW9uXG5cbiAgICAgICAgICBjaGFuZ2VkKCk7XG4gICAgICAgICAgcmV0dXJuIGNvbXBsZXRlZCh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChlbExhc3RDaGlsZCAmJiBfZ2hvc3RJc0ZpcnN0KGV2dCwgdmVydGljYWwsIHRoaXMpKSB7XG4gICAgICAgIC8vIEluc2VydCB0byBzdGFydCBvZiBsaXN0XG4gICAgICAgIHZhciBmaXJzdENoaWxkID0gZ2V0Q2hpbGQoZWwsIDAsIG9wdGlvbnMsIHRydWUpO1xuXG4gICAgICAgIGlmIChmaXJzdENoaWxkID09PSBkcmFnRWwpIHtcbiAgICAgICAgICByZXR1cm4gY29tcGxldGVkKGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRhcmdldCA9IGZpcnN0Q2hpbGQ7XG4gICAgICAgIHRhcmdldFJlY3QgPSBnZXRSZWN0KHRhcmdldCk7XG5cbiAgICAgICAgaWYgKF9vbk1vdmUocm9vdEVsLCBlbCwgZHJhZ0VsLCBkcmFnUmVjdCwgdGFyZ2V0LCB0YXJnZXRSZWN0LCBldnQsIGZhbHNlKSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBjYXB0dXJlKCk7XG4gICAgICAgICAgZWwuaW5zZXJ0QmVmb3JlKGRyYWdFbCwgZmlyc3RDaGlsZCk7XG4gICAgICAgICAgcGFyZW50RWwgPSBlbDsgLy8gYWN0dWFsaXphdGlvblxuXG4gICAgICAgICAgY2hhbmdlZCgpO1xuICAgICAgICAgIHJldHVybiBjb21wbGV0ZWQodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGFyZ2V0LnBhcmVudE5vZGUgPT09IGVsKSB7XG4gICAgICAgIHRhcmdldFJlY3QgPSBnZXRSZWN0KHRhcmdldCk7XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSAwLFxuICAgICAgICAgICAgdGFyZ2V0QmVmb3JlRmlyc3RTd2FwLFxuICAgICAgICAgICAgZGlmZmVyZW50TGV2ZWwgPSBkcmFnRWwucGFyZW50Tm9kZSAhPT0gZWwsXG4gICAgICAgICAgICBkaWZmZXJlbnRSb3dDb2wgPSAhX2RyYWdFbEluUm93Q29sdW1uKGRyYWdFbC5hbmltYXRlZCAmJiBkcmFnRWwudG9SZWN0IHx8IGRyYWdSZWN0LCB0YXJnZXQuYW5pbWF0ZWQgJiYgdGFyZ2V0LnRvUmVjdCB8fCB0YXJnZXRSZWN0LCB2ZXJ0aWNhbCksXG4gICAgICAgICAgICBzaWRlMSA9IHZlcnRpY2FsID8gJ3RvcCcgOiAnbGVmdCcsXG4gICAgICAgICAgICBzY3JvbGxlZFBhc3RUb3AgPSBpc1Njcm9sbGVkUGFzdCh0YXJnZXQsICd0b3AnLCAndG9wJykgfHwgaXNTY3JvbGxlZFBhc3QoZHJhZ0VsLCAndG9wJywgJ3RvcCcpLFxuICAgICAgICAgICAgc2Nyb2xsQmVmb3JlID0gc2Nyb2xsZWRQYXN0VG9wID8gc2Nyb2xsZWRQYXN0VG9wLnNjcm9sbFRvcCA6IHZvaWQgMDtcblxuICAgICAgICBpZiAobGFzdFRhcmdldCAhPT0gdGFyZ2V0KSB7XG4gICAgICAgICAgdGFyZ2V0QmVmb3JlRmlyc3RTd2FwID0gdGFyZ2V0UmVjdFtzaWRlMV07XG4gICAgICAgICAgcGFzdEZpcnN0SW52ZXJ0VGhyZXNoID0gZmFsc2U7XG4gICAgICAgICAgaXNDaXJjdW1zdGFudGlhbEludmVydCA9ICFkaWZmZXJlbnRSb3dDb2wgJiYgb3B0aW9ucy5pbnZlcnRTd2FwIHx8IGRpZmZlcmVudExldmVsO1xuICAgICAgICB9XG5cbiAgICAgICAgZGlyZWN0aW9uID0gX2dldFN3YXBEaXJlY3Rpb24oZXZ0LCB0YXJnZXQsIHRhcmdldFJlY3QsIHZlcnRpY2FsLCBkaWZmZXJlbnRSb3dDb2wgPyAxIDogb3B0aW9ucy5zd2FwVGhyZXNob2xkLCBvcHRpb25zLmludmVydGVkU3dhcFRocmVzaG9sZCA9PSBudWxsID8gb3B0aW9ucy5zd2FwVGhyZXNob2xkIDogb3B0aW9ucy5pbnZlcnRlZFN3YXBUaHJlc2hvbGQsIGlzQ2lyY3Vtc3RhbnRpYWxJbnZlcnQsIGxhc3RUYXJnZXQgPT09IHRhcmdldCk7XG4gICAgICAgIHZhciBzaWJsaW5nO1xuXG4gICAgICAgIGlmIChkaXJlY3Rpb24gIT09IDApIHtcbiAgICAgICAgICAvLyBDaGVjayBpZiB0YXJnZXQgaXMgYmVzaWRlIGRyYWdFbCBpbiByZXNwZWN0aXZlIGRpcmVjdGlvbiAoaWdub3JpbmcgaGlkZGVuIGVsZW1lbnRzKVxuICAgICAgICAgIHZhciBkcmFnSW5kZXggPSBpbmRleChkcmFnRWwpO1xuXG4gICAgICAgICAgZG8ge1xuICAgICAgICAgICAgZHJhZ0luZGV4IC09IGRpcmVjdGlvbjtcbiAgICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnRFbC5jaGlsZHJlbltkcmFnSW5kZXhdO1xuICAgICAgICAgIH0gd2hpbGUgKHNpYmxpbmcgJiYgKGNzcyhzaWJsaW5nLCAnZGlzcGxheScpID09PSAnbm9uZScgfHwgc2libGluZyA9PT0gZ2hvc3RFbCkpO1xuICAgICAgICB9IC8vIElmIGRyYWdFbCBpcyBhbHJlYWR5IGJlc2lkZSB0YXJnZXQ6IERvIG5vdCBpbnNlcnRcblxuXG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09IDAgfHwgc2libGluZyA9PT0gdGFyZ2V0KSB7XG4gICAgICAgICAgcmV0dXJuIGNvbXBsZXRlZChmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICBsYXN0VGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICBsYXN0RGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuICAgICAgICB2YXIgbmV4dFNpYmxpbmcgPSB0YXJnZXQubmV4dEVsZW1lbnRTaWJsaW5nLFxuICAgICAgICAgICAgYWZ0ZXIgPSBmYWxzZTtcbiAgICAgICAgYWZ0ZXIgPSBkaXJlY3Rpb24gPT09IDE7XG5cbiAgICAgICAgdmFyIG1vdmVWZWN0b3IgPSBfb25Nb3ZlKHJvb3RFbCwgZWwsIGRyYWdFbCwgZHJhZ1JlY3QsIHRhcmdldCwgdGFyZ2V0UmVjdCwgZXZ0LCBhZnRlcik7XG5cbiAgICAgICAgaWYgKG1vdmVWZWN0b3IgIT09IGZhbHNlKSB7XG4gICAgICAgICAgaWYgKG1vdmVWZWN0b3IgPT09IDEgfHwgbW92ZVZlY3RvciA9PT0gLTEpIHtcbiAgICAgICAgICAgIGFmdGVyID0gbW92ZVZlY3RvciA9PT0gMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfc2lsZW50ID0gdHJ1ZTtcbiAgICAgICAgICBzZXRUaW1lb3V0KF91bnNpbGVudCwgMzApO1xuICAgICAgICAgIGNhcHR1cmUoKTtcblxuICAgICAgICAgIGlmIChhZnRlciAmJiAhbmV4dFNpYmxpbmcpIHtcbiAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKGRyYWdFbCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShkcmFnRWwsIGFmdGVyID8gbmV4dFNpYmxpbmcgOiB0YXJnZXQpO1xuICAgICAgICAgIH0gLy8gVW5kbyBjaHJvbWUncyBzY3JvbGwgYWRqdXN0bWVudCAoaGFzIG5vIGVmZmVjdCBvbiBvdGhlciBicm93c2VycylcblxuXG4gICAgICAgICAgaWYgKHNjcm9sbGVkUGFzdFRvcCkge1xuICAgICAgICAgICAgc2Nyb2xsQnkoc2Nyb2xsZWRQYXN0VG9wLCAwLCBzY3JvbGxCZWZvcmUgLSBzY3JvbGxlZFBhc3RUb3Auc2Nyb2xsVG9wKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXJlbnRFbCA9IGRyYWdFbC5wYXJlbnROb2RlOyAvLyBhY3R1YWxpemF0aW9uXG4gICAgICAgICAgLy8gbXVzdCBiZSBkb25lIGJlZm9yZSBhbmltYXRpb25cblxuICAgICAgICAgIGlmICh0YXJnZXRCZWZvcmVGaXJzdFN3YXAgIT09IHVuZGVmaW5lZCAmJiAhaXNDaXJjdW1zdGFudGlhbEludmVydCkge1xuICAgICAgICAgICAgdGFyZ2V0TW92ZURpc3RhbmNlID0gTWF0aC5hYnModGFyZ2V0QmVmb3JlRmlyc3RTd2FwIC0gZ2V0UmVjdCh0YXJnZXQpW3NpZGUxXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hhbmdlZCgpO1xuICAgICAgICAgIHJldHVybiBjb21wbGV0ZWQodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGVsLmNvbnRhaW5zKGRyYWdFbCkpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBsZXRlZChmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBfaWdub3JlV2hpbGVBbmltYXRpbmc6IG51bGwsXG4gIF9vZmZNb3ZlRXZlbnRzOiBmdW5jdGlvbiBfb2ZmTW92ZUV2ZW50cygpIHtcbiAgICBvZmYoZG9jdW1lbnQsICdtb3VzZW1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG4gICAgb2ZmKGRvY3VtZW50LCAndG91Y2htb3ZlJywgdGhpcy5fb25Ub3VjaE1vdmUpO1xuICAgIG9mZihkb2N1bWVudCwgJ3BvaW50ZXJtb3ZlJywgdGhpcy5fb25Ub3VjaE1vdmUpO1xuICAgIG9mZihkb2N1bWVudCwgJ2RyYWdvdmVyJywgbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQpO1xuICAgIG9mZihkb2N1bWVudCwgJ21vdXNlbW92ZScsIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50KTtcbiAgICBvZmYoZG9jdW1lbnQsICd0b3VjaG1vdmUnLCBuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudCk7XG4gIH0sXG4gIF9vZmZVcEV2ZW50czogZnVuY3Rpb24gX29mZlVwRXZlbnRzKCkge1xuICAgIHZhciBvd25lckRvY3VtZW50ID0gdGhpcy5lbC5vd25lckRvY3VtZW50O1xuICAgIG9mZihvd25lckRvY3VtZW50LCAnbW91c2V1cCcsIHRoaXMuX29uRHJvcCk7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICd0b3VjaGVuZCcsIHRoaXMuX29uRHJvcCk7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICdwb2ludGVydXAnLCB0aGlzLl9vbkRyb3ApO1xuICAgIG9mZihvd25lckRvY3VtZW50LCAndG91Y2hjYW5jZWwnLCB0aGlzLl9vbkRyb3ApO1xuICAgIG9mZihkb2N1bWVudCwgJ3NlbGVjdHN0YXJ0JywgdGhpcyk7XG4gIH0sXG4gIF9vbkRyb3A6IGZ1bmN0aW9uIF9vbkRyb3AoXG4gIC8qKkV2ZW50Ki9cbiAgZXZ0KSB7XG4gICAgdmFyIGVsID0gdGhpcy5lbCxcbiAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9uczsgLy8gR2V0IHRoZSBpbmRleCBvZiB0aGUgZHJhZ2dlZCBlbGVtZW50IHdpdGhpbiBpdHMgcGFyZW50XG5cbiAgICBuZXdJbmRleCA9IGluZGV4KGRyYWdFbCk7XG4gICAgbmV3RHJhZ2dhYmxlSW5kZXggPSBpbmRleChkcmFnRWwsIG9wdGlvbnMuZHJhZ2dhYmxlKTtcbiAgICBwbHVnaW5FdmVudCgnZHJvcCcsIHRoaXMsIHtcbiAgICAgIGV2dDogZXZ0XG4gICAgfSk7XG4gICAgcGFyZW50RWwgPSBkcmFnRWwgJiYgZHJhZ0VsLnBhcmVudE5vZGU7IC8vIEdldCBhZ2FpbiBhZnRlciBwbHVnaW4gZXZlbnRcblxuICAgIG5ld0luZGV4ID0gaW5kZXgoZHJhZ0VsKTtcbiAgICBuZXdEcmFnZ2FibGVJbmRleCA9IGluZGV4KGRyYWdFbCwgb3B0aW9ucy5kcmFnZ2FibGUpO1xuXG4gICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHtcbiAgICAgIHRoaXMuX251bGxpbmcoKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGF3YWl0aW5nRHJhZ1N0YXJ0ZWQgPSBmYWxzZTtcbiAgICBpc0NpcmN1bXN0YW50aWFsSW52ZXJ0ID0gZmFsc2U7XG4gICAgcGFzdEZpcnN0SW52ZXJ0VGhyZXNoID0gZmFsc2U7XG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9sb29wSWQpO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLl9kcmFnU3RhcnRUaW1lcik7XG5cbiAgICBfY2FuY2VsTmV4dFRpY2sodGhpcy5jbG9uZUlkKTtcblxuICAgIF9jYW5jZWxOZXh0VGljayh0aGlzLl9kcmFnU3RhcnRJZCk7IC8vIFVuYmluZCBldmVudHNcblxuXG4gICAgaWYgKHRoaXMubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgICBvZmYoZG9jdW1lbnQsICdkcm9wJywgdGhpcyk7XG4gICAgICBvZmYoZWwsICdkcmFnc3RhcnQnLCB0aGlzLl9vbkRyYWdTdGFydCk7XG4gICAgfVxuXG4gICAgdGhpcy5fb2ZmTW92ZUV2ZW50cygpO1xuXG4gICAgdGhpcy5fb2ZmVXBFdmVudHMoKTtcblxuICAgIGlmIChTYWZhcmkpIHtcbiAgICAgIGNzcyhkb2N1bWVudC5ib2R5LCAndXNlci1zZWxlY3QnLCAnJyk7XG4gICAgfVxuXG4gICAgY3NzKGRyYWdFbCwgJ3RyYW5zZm9ybScsICcnKTtcblxuICAgIGlmIChldnQpIHtcbiAgICAgIGlmIChtb3ZlZCkge1xuICAgICAgICBldnQuY2FuY2VsYWJsZSAmJiBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgIW9wdGlvbnMuZHJvcEJ1YmJsZSAmJiBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB9XG5cbiAgICAgIGdob3N0RWwgJiYgZ2hvc3RFbC5wYXJlbnROb2RlICYmIGdob3N0RWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChnaG9zdEVsKTtcblxuICAgICAgaWYgKHJvb3RFbCA9PT0gcGFyZW50RWwgfHwgcHV0U29ydGFibGUgJiYgcHV0U29ydGFibGUubGFzdFB1dE1vZGUgIT09ICdjbG9uZScpIHtcbiAgICAgICAgLy8gUmVtb3ZlIGNsb25lKHMpXG4gICAgICAgIGNsb25lRWwgJiYgY2xvbmVFbC5wYXJlbnROb2RlICYmIGNsb25lRWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjbG9uZUVsKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRyYWdFbCkge1xuICAgICAgICBpZiAodGhpcy5uYXRpdmVEcmFnZ2FibGUpIHtcbiAgICAgICAgICBvZmYoZHJhZ0VsLCAnZHJhZ2VuZCcsIHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgX2Rpc2FibGVEcmFnZ2FibGUoZHJhZ0VsKTtcblxuICAgICAgICBkcmFnRWwuc3R5bGVbJ3dpbGwtY2hhbmdlJ10gPSAnJzsgLy8gUmVtb3ZlIGNsYXNzZXNcbiAgICAgICAgLy8gZ2hvc3RDbGFzcyBpcyBhZGRlZCBpbiBkcmFnU3RhcnRlZFxuXG4gICAgICAgIGlmIChtb3ZlZCAmJiAhYXdhaXRpbmdEcmFnU3RhcnRlZCkge1xuICAgICAgICAgIHRvZ2dsZUNsYXNzKGRyYWdFbCwgcHV0U29ydGFibGUgPyBwdXRTb3J0YWJsZS5vcHRpb25zLmdob3N0Q2xhc3MgOiB0aGlzLm9wdGlvbnMuZ2hvc3RDbGFzcywgZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCB0aGlzLm9wdGlvbnMuY2hvc2VuQ2xhc3MsIGZhbHNlKTsgLy8gRHJhZyBzdG9wIGV2ZW50XG5cbiAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICAgIG5hbWU6ICd1bmNob29zZScsXG4gICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgbmV3SW5kZXg6IG51bGwsXG4gICAgICAgICAgbmV3RHJhZ2dhYmxlSW5kZXg6IG51bGwsXG4gICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChyb290RWwgIT09IHBhcmVudEVsKSB7XG4gICAgICAgICAgaWYgKG5ld0luZGV4ID49IDApIHtcbiAgICAgICAgICAgIC8vIEFkZCBldmVudFxuICAgICAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgICByb290RWw6IHBhcmVudEVsLFxuICAgICAgICAgICAgICBuYW1lOiAnYWRkJyxcbiAgICAgICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgIGZyb21FbDogcm9vdEVsLFxuICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgICAgIH0pOyAvLyBSZW1vdmUgZXZlbnRcblxuXG4gICAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICAgICAgICBuYW1lOiAncmVtb3ZlJyxcbiAgICAgICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICAgICAgfSk7IC8vIGRyYWcgZnJvbSBvbmUgbGlzdCBhbmQgZHJvcCBpbnRvIGFub3RoZXJcblxuXG4gICAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICAgIHJvb3RFbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgIG5hbWU6ICdzb3J0JyxcbiAgICAgICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgIGZyb21FbDogcm9vdEVsLFxuICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICAgICAgICBuYW1lOiAnc29ydCcsXG4gICAgICAgICAgICAgIHRvRWw6IHBhcmVudEVsLFxuICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHB1dFNvcnRhYmxlICYmIHB1dFNvcnRhYmxlLnNhdmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAobmV3SW5kZXggIT09IG9sZEluZGV4KSB7XG4gICAgICAgICAgICBpZiAobmV3SW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAvLyBkcmFnICYgZHJvcCB3aXRoaW4gdGhlIHNhbWUgbGlzdFxuICAgICAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICAgICAgc29ydGFibGU6IHRoaXMsXG4gICAgICAgICAgICAgICAgbmFtZTogJ3VwZGF0ZScsXG4gICAgICAgICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgICAgICBzb3J0YWJsZTogdGhpcyxcbiAgICAgICAgICAgICAgICBuYW1lOiAnc29ydCcsXG4gICAgICAgICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChTb3J0YWJsZS5hY3RpdmUpIHtcbiAgICAgICAgICAvKiBqc2hpbnQgZXFudWxsOnRydWUgKi9cbiAgICAgICAgICBpZiAobmV3SW5kZXggPT0gbnVsbCB8fCBuZXdJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIG5ld0luZGV4ID0gb2xkSW5kZXg7XG4gICAgICAgICAgICBuZXdEcmFnZ2FibGVJbmRleCA9IG9sZERyYWdnYWJsZUluZGV4O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICAgICAgbmFtZTogJ2VuZCcsXG4gICAgICAgICAgICB0b0VsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICAgIH0pOyAvLyBTYXZlIHNvcnRpbmdcblxuXG4gICAgICAgICAgdGhpcy5zYXZlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9udWxsaW5nKCk7XG4gIH0sXG4gIF9udWxsaW5nOiBmdW5jdGlvbiBfbnVsbGluZygpIHtcbiAgICBwbHVnaW5FdmVudCgnbnVsbGluZycsIHRoaXMpO1xuICAgIHJvb3RFbCA9IGRyYWdFbCA9IHBhcmVudEVsID0gZ2hvc3RFbCA9IG5leHRFbCA9IGNsb25lRWwgPSBsYXN0RG93bkVsID0gY2xvbmVIaWRkZW4gPSB0YXBFdnQgPSB0b3VjaEV2dCA9IG1vdmVkID0gbmV3SW5kZXggPSBuZXdEcmFnZ2FibGVJbmRleCA9IG9sZEluZGV4ID0gb2xkRHJhZ2dhYmxlSW5kZXggPSBsYXN0VGFyZ2V0ID0gbGFzdERpcmVjdGlvbiA9IHB1dFNvcnRhYmxlID0gYWN0aXZlR3JvdXAgPSBTb3J0YWJsZS5kcmFnZ2VkID0gU29ydGFibGUuZ2hvc3QgPSBTb3J0YWJsZS5jbG9uZSA9IFNvcnRhYmxlLmFjdGl2ZSA9IG51bGw7XG4gICAgc2F2ZWRJbnB1dENoZWNrZWQuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgIGVsLmNoZWNrZWQgPSB0cnVlO1xuICAgIH0pO1xuICAgIHNhdmVkSW5wdXRDaGVja2VkLmxlbmd0aCA9IGxhc3REeCA9IGxhc3REeSA9IDA7XG4gIH0sXG4gIGhhbmRsZUV2ZW50OiBmdW5jdGlvbiBoYW5kbGVFdmVudChcbiAgLyoqRXZlbnQqL1xuICBldnQpIHtcbiAgICBzd2l0Y2ggKGV2dC50eXBlKSB7XG4gICAgICBjYXNlICdkcm9wJzpcbiAgICAgIGNhc2UgJ2RyYWdlbmQnOlxuICAgICAgICB0aGlzLl9vbkRyb3AoZXZ0KTtcblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnZHJhZ2VudGVyJzpcbiAgICAgIGNhc2UgJ2RyYWdvdmVyJzpcbiAgICAgICAgaWYgKGRyYWdFbCkge1xuICAgICAgICAgIHRoaXMuX29uRHJhZ092ZXIoZXZ0KTtcblxuICAgICAgICAgIF9nbG9iYWxEcmFnT3ZlcihldnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3NlbGVjdHN0YXJ0JzpcbiAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSxcblxuICAvKipcclxuICAgKiBTZXJpYWxpemVzIHRoZSBpdGVtIGludG8gYW4gYXJyYXkgb2Ygc3RyaW5nLlxyXG4gICAqIEByZXR1cm5zIHtTdHJpbmdbXX1cclxuICAgKi9cbiAgdG9BcnJheTogZnVuY3Rpb24gdG9BcnJheSgpIHtcbiAgICB2YXIgb3JkZXIgPSBbXSxcbiAgICAgICAgZWwsXG4gICAgICAgIGNoaWxkcmVuID0gdGhpcy5lbC5jaGlsZHJlbixcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIG4gPSBjaGlsZHJlbi5sZW5ndGgsXG4gICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICBmb3IgKDsgaSA8IG47IGkrKykge1xuICAgICAgZWwgPSBjaGlsZHJlbltpXTtcblxuICAgICAgaWYgKGNsb3Nlc3QoZWwsIG9wdGlvbnMuZHJhZ2dhYmxlLCB0aGlzLmVsLCBmYWxzZSkpIHtcbiAgICAgICAgb3JkZXIucHVzaChlbC5nZXRBdHRyaWJ1dGUob3B0aW9ucy5kYXRhSWRBdHRyKSB8fCBfZ2VuZXJhdGVJZChlbCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvcmRlcjtcbiAgfSxcblxuICAvKipcclxuICAgKiBTb3J0cyB0aGUgZWxlbWVudHMgYWNjb3JkaW5nIHRvIHRoZSBhcnJheS5cclxuICAgKiBAcGFyYW0gIHtTdHJpbmdbXX0gIG9yZGVyICBvcmRlciBvZiB0aGUgaXRlbXNcclxuICAgKi9cbiAgc29ydDogZnVuY3Rpb24gc29ydChvcmRlciwgdXNlQW5pbWF0aW9uKSB7XG4gICAgdmFyIGl0ZW1zID0ge30sXG4gICAgICAgIHJvb3RFbCA9IHRoaXMuZWw7XG4gICAgdGhpcy50b0FycmF5KCkuZm9yRWFjaChmdW5jdGlvbiAoaWQsIGkpIHtcbiAgICAgIHZhciBlbCA9IHJvb3RFbC5jaGlsZHJlbltpXTtcblxuICAgICAgaWYgKGNsb3Nlc3QoZWwsIHRoaXMub3B0aW9ucy5kcmFnZ2FibGUsIHJvb3RFbCwgZmFsc2UpKSB7XG4gICAgICAgIGl0ZW1zW2lkXSA9IGVsO1xuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuICAgIHVzZUFuaW1hdGlvbiAmJiB0aGlzLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuICAgIG9yZGVyLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG4gICAgICBpZiAoaXRlbXNbaWRdKSB7XG4gICAgICAgIHJvb3RFbC5yZW1vdmVDaGlsZChpdGVtc1tpZF0pO1xuICAgICAgICByb290RWwuYXBwZW5kQ2hpbGQoaXRlbXNbaWRdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1c2VBbmltYXRpb24gJiYgdGhpcy5hbmltYXRlQWxsKCk7XG4gIH0sXG5cbiAgLyoqXHJcbiAgICogU2F2ZSB0aGUgY3VycmVudCBzb3J0aW5nXHJcbiAgICovXG4gIHNhdmU6IGZ1bmN0aW9uIHNhdmUoKSB7XG4gICAgdmFyIHN0b3JlID0gdGhpcy5vcHRpb25zLnN0b3JlO1xuICAgIHN0b3JlICYmIHN0b3JlLnNldCAmJiBzdG9yZS5zZXQodGhpcyk7XG4gIH0sXG5cbiAgLyoqXHJcbiAgICogRm9yIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0LCBnZXQgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBtYXRjaGVzIHRoZSBzZWxlY3RvciBieSB0ZXN0aW5nIHRoZSBlbGVtZW50IGl0c2VsZiBhbmQgdHJhdmVyc2luZyB1cCB0aHJvdWdoIGl0cyBhbmNlc3RvcnMgaW4gdGhlIERPTSB0cmVlLlxyXG4gICAqIEBwYXJhbSAgIHtIVE1MRWxlbWVudH0gIGVsXHJcbiAgICogQHBhcmFtICAge1N0cmluZ30gICAgICAgW3NlbGVjdG9yXSAgZGVmYXVsdDogYG9wdGlvbnMuZHJhZ2dhYmxlYFxyXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudHxudWxsfVxyXG4gICAqL1xuICBjbG9zZXN0OiBmdW5jdGlvbiBjbG9zZXN0JDEoZWwsIHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGNsb3Nlc3QoZWwsIHNlbGVjdG9yIHx8IHRoaXMub3B0aW9ucy5kcmFnZ2FibGUsIHRoaXMuZWwsIGZhbHNlKTtcbiAgfSxcblxuICAvKipcclxuICAgKiBTZXQvZ2V0IG9wdGlvblxyXG4gICAqIEBwYXJhbSAgIHtzdHJpbmd9IG5hbWVcclxuICAgKiBAcGFyYW0gICB7Kn0gICAgICBbdmFsdWVdXHJcbiAgICogQHJldHVybnMgeyp9XHJcbiAgICovXG4gIG9wdGlvbjogZnVuY3Rpb24gb3B0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICBpZiAodmFsdWUgPT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuIG9wdGlvbnNbbmFtZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBtb2RpZmllZFZhbHVlID0gUGx1Z2luTWFuYWdlci5tb2RpZnlPcHRpb24odGhpcywgbmFtZSwgdmFsdWUpO1xuXG4gICAgICBpZiAodHlwZW9mIG1vZGlmaWVkVmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIG9wdGlvbnNbbmFtZV0gPSBtb2RpZmllZFZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3B0aW9uc1tuYW1lXSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobmFtZSA9PT0gJ2dyb3VwJykge1xuICAgICAgICBfcHJlcGFyZUdyb3VwKG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcclxuICAgKiBEZXN0cm95XHJcbiAgICovXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgcGx1Z2luRXZlbnQoJ2Rlc3Ryb3knLCB0aGlzKTtcbiAgICB2YXIgZWwgPSB0aGlzLmVsO1xuICAgIGVsW2V4cGFuZG9dID0gbnVsbDtcbiAgICBvZmYoZWwsICdtb3VzZWRvd24nLCB0aGlzLl9vblRhcFN0YXJ0KTtcbiAgICBvZmYoZWwsICd0b3VjaHN0YXJ0JywgdGhpcy5fb25UYXBTdGFydCk7XG4gICAgb2ZmKGVsLCAncG9pbnRlcmRvd24nLCB0aGlzLl9vblRhcFN0YXJ0KTtcblxuICAgIGlmICh0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgICAgb2ZmKGVsLCAnZHJhZ292ZXInLCB0aGlzKTtcbiAgICAgIG9mZihlbCwgJ2RyYWdlbnRlcicsIHRoaXMpO1xuICAgIH0gLy8gUmVtb3ZlIGRyYWdnYWJsZSBhdHRyaWJ1dGVzXG5cblxuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZWwucXVlcnlTZWxlY3RvckFsbCgnW2RyYWdnYWJsZV0nKSwgZnVuY3Rpb24gKGVsKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2RyYWdnYWJsZScpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fb25Ecm9wKCk7XG5cbiAgICB0aGlzLl9kaXNhYmxlRGVsYXllZERyYWdFdmVudHMoKTtcblxuICAgIHNvcnRhYmxlcy5zcGxpY2Uoc29ydGFibGVzLmluZGV4T2YodGhpcy5lbCksIDEpO1xuICAgIHRoaXMuZWwgPSBlbCA9IG51bGw7XG4gIH0sXG4gIF9oaWRlQ2xvbmU6IGZ1bmN0aW9uIF9oaWRlQ2xvbmUoKSB7XG4gICAgaWYgKCFjbG9uZUhpZGRlbikge1xuICAgICAgcGx1Z2luRXZlbnQoJ2hpZGVDbG9uZScsIHRoaXMpO1xuICAgICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHJldHVybjtcbiAgICAgIGNzcyhjbG9uZUVsLCAnZGlzcGxheScsICdub25lJyk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucmVtb3ZlQ2xvbmVPbkhpZGUgJiYgY2xvbmVFbC5wYXJlbnROb2RlKSB7XG4gICAgICAgIGNsb25lRWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjbG9uZUVsKTtcbiAgICAgIH1cblxuICAgICAgY2xvbmVIaWRkZW4gPSB0cnVlO1xuICAgIH1cbiAgfSxcbiAgX3Nob3dDbG9uZTogZnVuY3Rpb24gX3Nob3dDbG9uZShwdXRTb3J0YWJsZSkge1xuICAgIGlmIChwdXRTb3J0YWJsZS5sYXN0UHV0TW9kZSAhPT0gJ2Nsb25lJykge1xuICAgICAgdGhpcy5faGlkZUNsb25lKCk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoY2xvbmVIaWRkZW4pIHtcbiAgICAgIHBsdWdpbkV2ZW50KCdzaG93Q2xvbmUnLCB0aGlzKTtcbiAgICAgIGlmIChTb3J0YWJsZS5ldmVudENhbmNlbGVkKSByZXR1cm47IC8vIHNob3cgY2xvbmUgYXQgZHJhZ0VsIG9yIG9yaWdpbmFsIHBvc2l0aW9uXG5cbiAgICAgIGlmIChkcmFnRWwucGFyZW50Tm9kZSA9PSByb290RWwgJiYgIXRoaXMub3B0aW9ucy5ncm91cC5yZXZlcnRDbG9uZSkge1xuICAgICAgICByb290RWwuaW5zZXJ0QmVmb3JlKGNsb25lRWwsIGRyYWdFbCk7XG4gICAgICB9IGVsc2UgaWYgKG5leHRFbCkge1xuICAgICAgICByb290RWwuaW5zZXJ0QmVmb3JlKGNsb25lRWwsIG5leHRFbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb290RWwuYXBwZW5kQ2hpbGQoY2xvbmVFbCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZ3JvdXAucmV2ZXJ0Q2xvbmUpIHtcbiAgICAgICAgdGhpcy5hbmltYXRlKGRyYWdFbCwgY2xvbmVFbCk7XG4gICAgICB9XG5cbiAgICAgIGNzcyhjbG9uZUVsLCAnZGlzcGxheScsICcnKTtcbiAgICAgIGNsb25lSGlkZGVuID0gZmFsc2U7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBfZ2xvYmFsRHJhZ092ZXIoXG4vKipFdmVudCovXG5ldnQpIHtcbiAgaWYgKGV2dC5kYXRhVHJhbnNmZXIpIHtcbiAgICBldnQuZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3QgPSAnbW92ZSc7XG4gIH1cblxuICBldnQuY2FuY2VsYWJsZSAmJiBldnQucHJldmVudERlZmF1bHQoKTtcbn1cblxuZnVuY3Rpb24gX29uTW92ZShmcm9tRWwsIHRvRWwsIGRyYWdFbCwgZHJhZ1JlY3QsIHRhcmdldEVsLCB0YXJnZXRSZWN0LCBvcmlnaW5hbEV2ZW50LCB3aWxsSW5zZXJ0QWZ0ZXIpIHtcbiAgdmFyIGV2dCxcbiAgICAgIHNvcnRhYmxlID0gZnJvbUVsW2V4cGFuZG9dLFxuICAgICAgb25Nb3ZlRm4gPSBzb3J0YWJsZS5vcHRpb25zLm9uTW92ZSxcbiAgICAgIHJldFZhbDsgLy8gU3VwcG9ydCBmb3IgbmV3IEN1c3RvbUV2ZW50IGZlYXR1cmVcblxuICBpZiAod2luZG93LkN1c3RvbUV2ZW50ICYmICFJRTExT3JMZXNzICYmICFFZGdlKSB7XG4gICAgZXZ0ID0gbmV3IEN1c3RvbUV2ZW50KCdtb3ZlJywge1xuICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICBldnQuaW5pdEV2ZW50KCdtb3ZlJywgdHJ1ZSwgdHJ1ZSk7XG4gIH1cblxuICBldnQudG8gPSB0b0VsO1xuICBldnQuZnJvbSA9IGZyb21FbDtcbiAgZXZ0LmRyYWdnZWQgPSBkcmFnRWw7XG4gIGV2dC5kcmFnZ2VkUmVjdCA9IGRyYWdSZWN0O1xuICBldnQucmVsYXRlZCA9IHRhcmdldEVsIHx8IHRvRWw7XG4gIGV2dC5yZWxhdGVkUmVjdCA9IHRhcmdldFJlY3QgfHwgZ2V0UmVjdCh0b0VsKTtcbiAgZXZ0LndpbGxJbnNlcnRBZnRlciA9IHdpbGxJbnNlcnRBZnRlcjtcbiAgZXZ0Lm9yaWdpbmFsRXZlbnQgPSBvcmlnaW5hbEV2ZW50O1xuICBmcm9tRWwuZGlzcGF0Y2hFdmVudChldnQpO1xuXG4gIGlmIChvbk1vdmVGbikge1xuICAgIHJldFZhbCA9IG9uTW92ZUZuLmNhbGwoc29ydGFibGUsIGV2dCwgb3JpZ2luYWxFdmVudCk7XG4gIH1cblxuICByZXR1cm4gcmV0VmFsO1xufVxuXG5mdW5jdGlvbiBfZGlzYWJsZURyYWdnYWJsZShlbCkge1xuICBlbC5kcmFnZ2FibGUgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gX3Vuc2lsZW50KCkge1xuICBfc2lsZW50ID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIF9naG9zdElzRmlyc3QoZXZ0LCB2ZXJ0aWNhbCwgc29ydGFibGUpIHtcbiAgdmFyIHJlY3QgPSBnZXRSZWN0KGdldENoaWxkKHNvcnRhYmxlLmVsLCAwLCBzb3J0YWJsZS5vcHRpb25zLCB0cnVlKSk7XG4gIHZhciBzcGFjZXIgPSAxMDtcbiAgcmV0dXJuIHZlcnRpY2FsID8gZXZ0LmNsaWVudFggPCByZWN0LmxlZnQgLSBzcGFjZXIgfHwgZXZ0LmNsaWVudFkgPCByZWN0LnRvcCAmJiBldnQuY2xpZW50WCA8IHJlY3QucmlnaHQgOiBldnQuY2xpZW50WSA8IHJlY3QudG9wIC0gc3BhY2VyIHx8IGV2dC5jbGllbnRZIDwgcmVjdC5ib3R0b20gJiYgZXZ0LmNsaWVudFggPCByZWN0LmxlZnQ7XG59XG5cbmZ1bmN0aW9uIF9naG9zdElzTGFzdChldnQsIHZlcnRpY2FsLCBzb3J0YWJsZSkge1xuICB2YXIgcmVjdCA9IGdldFJlY3QobGFzdENoaWxkKHNvcnRhYmxlLmVsLCBzb3J0YWJsZS5vcHRpb25zLmRyYWdnYWJsZSkpO1xuICB2YXIgc3BhY2VyID0gMTA7XG4gIHJldHVybiB2ZXJ0aWNhbCA/IGV2dC5jbGllbnRYID4gcmVjdC5yaWdodCArIHNwYWNlciB8fCBldnQuY2xpZW50WCA8PSByZWN0LnJpZ2h0ICYmIGV2dC5jbGllbnRZID4gcmVjdC5ib3R0b20gJiYgZXZ0LmNsaWVudFggPj0gcmVjdC5sZWZ0IDogZXZ0LmNsaWVudFggPiByZWN0LnJpZ2h0ICYmIGV2dC5jbGllbnRZID4gcmVjdC50b3AgfHwgZXZ0LmNsaWVudFggPD0gcmVjdC5yaWdodCAmJiBldnQuY2xpZW50WSA+IHJlY3QuYm90dG9tICsgc3BhY2VyO1xufVxuXG5mdW5jdGlvbiBfZ2V0U3dhcERpcmVjdGlvbihldnQsIHRhcmdldCwgdGFyZ2V0UmVjdCwgdmVydGljYWwsIHN3YXBUaHJlc2hvbGQsIGludmVydGVkU3dhcFRocmVzaG9sZCwgaW52ZXJ0U3dhcCwgaXNMYXN0VGFyZ2V0KSB7XG4gIHZhciBtb3VzZU9uQXhpcyA9IHZlcnRpY2FsID8gZXZ0LmNsaWVudFkgOiBldnQuY2xpZW50WCxcbiAgICAgIHRhcmdldExlbmd0aCA9IHZlcnRpY2FsID8gdGFyZ2V0UmVjdC5oZWlnaHQgOiB0YXJnZXRSZWN0LndpZHRoLFxuICAgICAgdGFyZ2V0UzEgPSB2ZXJ0aWNhbCA/IHRhcmdldFJlY3QudG9wIDogdGFyZ2V0UmVjdC5sZWZ0LFxuICAgICAgdGFyZ2V0UzIgPSB2ZXJ0aWNhbCA/IHRhcmdldFJlY3QuYm90dG9tIDogdGFyZ2V0UmVjdC5yaWdodCxcbiAgICAgIGludmVydCA9IGZhbHNlO1xuXG4gIGlmICghaW52ZXJ0U3dhcCkge1xuICAgIC8vIE5ldmVyIGludmVydCBvciBjcmVhdGUgZHJhZ0VsIHNoYWRvdyB3aGVuIHRhcmdldCBtb3ZlbWVuZXQgY2F1c2VzIG1vdXNlIHRvIG1vdmUgcGFzdCB0aGUgZW5kIG9mIHJlZ3VsYXIgc3dhcFRocmVzaG9sZFxuICAgIGlmIChpc0xhc3RUYXJnZXQgJiYgdGFyZ2V0TW92ZURpc3RhbmNlIDwgdGFyZ2V0TGVuZ3RoICogc3dhcFRocmVzaG9sZCkge1xuICAgICAgLy8gbXVsdGlwbGllZCBvbmx5IGJ5IHN3YXBUaHJlc2hvbGQgYmVjYXVzZSBtb3VzZSB3aWxsIGFscmVhZHkgYmUgaW5zaWRlIHRhcmdldCBieSAoMSAtIHRocmVzaG9sZCkgKiB0YXJnZXRMZW5ndGggLyAyXG4gICAgICAvLyBjaGVjayBpZiBwYXN0IGZpcnN0IGludmVydCB0aHJlc2hvbGQgb24gc2lkZSBvcHBvc2l0ZSBvZiBsYXN0RGlyZWN0aW9uXG4gICAgICBpZiAoIXBhc3RGaXJzdEludmVydFRocmVzaCAmJiAobGFzdERpcmVjdGlvbiA9PT0gMSA/IG1vdXNlT25BeGlzID4gdGFyZ2V0UzEgKyB0YXJnZXRMZW5ndGggKiBpbnZlcnRlZFN3YXBUaHJlc2hvbGQgLyAyIDogbW91c2VPbkF4aXMgPCB0YXJnZXRTMiAtIHRhcmdldExlbmd0aCAqIGludmVydGVkU3dhcFRocmVzaG9sZCAvIDIpKSB7XG4gICAgICAgIC8vIHBhc3QgZmlyc3QgaW52ZXJ0IHRocmVzaG9sZCwgZG8gbm90IHJlc3RyaWN0IGludmVydGVkIHRocmVzaG9sZCB0byBkcmFnRWwgc2hhZG93XG4gICAgICAgIHBhc3RGaXJzdEludmVydFRocmVzaCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICghcGFzdEZpcnN0SW52ZXJ0VGhyZXNoKSB7XG4gICAgICAgIC8vIGRyYWdFbCBzaGFkb3cgKHRhcmdldCBtb3ZlIGRpc3RhbmNlIHNoYWRvdylcbiAgICAgICAgaWYgKGxhc3REaXJlY3Rpb24gPT09IDEgPyBtb3VzZU9uQXhpcyA8IHRhcmdldFMxICsgdGFyZ2V0TW92ZURpc3RhbmNlIC8vIG92ZXIgZHJhZ0VsIHNoYWRvd1xuICAgICAgICA6IG1vdXNlT25BeGlzID4gdGFyZ2V0UzIgLSB0YXJnZXRNb3ZlRGlzdGFuY2UpIHtcbiAgICAgICAgICByZXR1cm4gLWxhc3REaXJlY3Rpb247XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGludmVydCA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlZ3VsYXJcbiAgICAgIGlmIChtb3VzZU9uQXhpcyA+IHRhcmdldFMxICsgdGFyZ2V0TGVuZ3RoICogKDEgLSBzd2FwVGhyZXNob2xkKSAvIDIgJiYgbW91c2VPbkF4aXMgPCB0YXJnZXRTMiAtIHRhcmdldExlbmd0aCAqICgxIC0gc3dhcFRocmVzaG9sZCkgLyAyKSB7XG4gICAgICAgIHJldHVybiBfZ2V0SW5zZXJ0RGlyZWN0aW9uKHRhcmdldCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaW52ZXJ0ID0gaW52ZXJ0IHx8IGludmVydFN3YXA7XG5cbiAgaWYgKGludmVydCkge1xuICAgIC8vIEludmVydCBvZiByZWd1bGFyXG4gICAgaWYgKG1vdXNlT25BeGlzIDwgdGFyZ2V0UzEgKyB0YXJnZXRMZW5ndGggKiBpbnZlcnRlZFN3YXBUaHJlc2hvbGQgLyAyIHx8IG1vdXNlT25BeGlzID4gdGFyZ2V0UzIgLSB0YXJnZXRMZW5ndGggKiBpbnZlcnRlZFN3YXBUaHJlc2hvbGQgLyAyKSB7XG4gICAgICByZXR1cm4gbW91c2VPbkF4aXMgPiB0YXJnZXRTMSArIHRhcmdldExlbmd0aCAvIDIgPyAxIDogLTE7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIDA7XG59XG4vKipcclxuICogR2V0cyB0aGUgZGlyZWN0aW9uIGRyYWdFbCBtdXN0IGJlIHN3YXBwZWQgcmVsYXRpdmUgdG8gdGFyZ2V0IGluIG9yZGVyIHRvIG1ha2UgaXRcclxuICogc2VlbSB0aGF0IGRyYWdFbCBoYXMgYmVlbiBcImluc2VydGVkXCIgaW50byB0aGF0IGVsZW1lbnQncyBwb3NpdGlvblxyXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gdGFyZ2V0ICAgICAgIFRoZSB0YXJnZXQgd2hvc2UgcG9zaXRpb24gZHJhZ0VsIGlzIGJlaW5nIGluc2VydGVkIGF0XHJcbiAqIEByZXR1cm4ge051bWJlcn0gICAgICAgICAgICAgICAgICAgRGlyZWN0aW9uIGRyYWdFbCBtdXN0IGJlIHN3YXBwZWRcclxuICovXG5cblxuZnVuY3Rpb24gX2dldEluc2VydERpcmVjdGlvbih0YXJnZXQpIHtcbiAgaWYgKGluZGV4KGRyYWdFbCkgPCBpbmRleCh0YXJnZXQpKSB7XG4gICAgcmV0dXJuIDE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG59XG4vKipcclxuICogR2VuZXJhdGUgaWRcclxuICogQHBhcmFtICAge0hUTUxFbGVtZW50fSBlbFxyXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cblxuXG5mdW5jdGlvbiBfZ2VuZXJhdGVJZChlbCkge1xuICB2YXIgc3RyID0gZWwudGFnTmFtZSArIGVsLmNsYXNzTmFtZSArIGVsLnNyYyArIGVsLmhyZWYgKyBlbC50ZXh0Q29udGVudCxcbiAgICAgIGkgPSBzdHIubGVuZ3RoLFxuICAgICAgc3VtID0gMDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgc3VtICs9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICB9XG5cbiAgcmV0dXJuIHN1bS50b1N0cmluZygzNik7XG59XG5cbmZ1bmN0aW9uIF9zYXZlSW5wdXRDaGVja2VkU3RhdGUocm9vdCkge1xuICBzYXZlZElucHV0Q2hlY2tlZC5sZW5ndGggPSAwO1xuICB2YXIgaW5wdXRzID0gcm9vdC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaW5wdXQnKTtcbiAgdmFyIGlkeCA9IGlucHV0cy5sZW5ndGg7XG5cbiAgd2hpbGUgKGlkeC0tKSB7XG4gICAgdmFyIGVsID0gaW5wdXRzW2lkeF07XG4gICAgZWwuY2hlY2tlZCAmJiBzYXZlZElucHV0Q2hlY2tlZC5wdXNoKGVsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfbmV4dFRpY2soZm4pIHtcbiAgcmV0dXJuIHNldFRpbWVvdXQoZm4sIDApO1xufVxuXG5mdW5jdGlvbiBfY2FuY2VsTmV4dFRpY2soaWQpIHtcbiAgcmV0dXJuIGNsZWFyVGltZW91dChpZCk7XG59IC8vIEZpeGVkICM5NzM6XG5cblxuaWYgKGRvY3VtZW50RXhpc3RzKSB7XG4gIG9uKGRvY3VtZW50LCAndG91Y2htb3ZlJywgZnVuY3Rpb24gKGV2dCkge1xuICAgIGlmICgoU29ydGFibGUuYWN0aXZlIHx8IGF3YWl0aW5nRHJhZ1N0YXJ0ZWQpICYmIGV2dC5jYW5jZWxhYmxlKSB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH0pO1xufSAvLyBFeHBvcnQgdXRpbHNcblxuXG5Tb3J0YWJsZS51dGlscyA9IHtcbiAgb246IG9uLFxuICBvZmY6IG9mZixcbiAgY3NzOiBjc3MsXG4gIGZpbmQ6IGZpbmQsXG4gIGlzOiBmdW5jdGlvbiBpcyhlbCwgc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gISFjbG9zZXN0KGVsLCBzZWxlY3RvciwgZWwsIGZhbHNlKTtcbiAgfSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRocm90dGxlOiB0aHJvdHRsZSxcbiAgY2xvc2VzdDogY2xvc2VzdCxcbiAgdG9nZ2xlQ2xhc3M6IHRvZ2dsZUNsYXNzLFxuICBjbG9uZTogY2xvbmUsXG4gIGluZGV4OiBpbmRleCxcbiAgbmV4dFRpY2s6IF9uZXh0VGljayxcbiAgY2FuY2VsTmV4dFRpY2s6IF9jYW5jZWxOZXh0VGljayxcbiAgZGV0ZWN0RGlyZWN0aW9uOiBfZGV0ZWN0RGlyZWN0aW9uLFxuICBnZXRDaGlsZDogZ2V0Q2hpbGRcbn07XG4vKipcclxuICogR2V0IHRoZSBTb3J0YWJsZSBpbnN0YW5jZSBvZiBhbiBlbGVtZW50XHJcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50XHJcbiAqIEByZXR1cm4ge1NvcnRhYmxlfHVuZGVmaW5lZH0gICAgICAgICBUaGUgaW5zdGFuY2Ugb2YgU29ydGFibGVcclxuICovXG5cblNvcnRhYmxlLmdldCA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50W2V4cGFuZG9dO1xufTtcbi8qKlxyXG4gKiBNb3VudCBhIHBsdWdpbiB0byBTb3J0YWJsZVxyXG4gKiBAcGFyYW0gIHsuLi5Tb3J0YWJsZVBsdWdpbnxTb3J0YWJsZVBsdWdpbltdfSBwbHVnaW5zICAgICAgIFBsdWdpbnMgYmVpbmcgbW91bnRlZFxyXG4gKi9cblxuXG5Tb3J0YWJsZS5tb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHBsdWdpbnMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgcGx1Z2luc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChwbHVnaW5zWzBdLmNvbnN0cnVjdG9yID09PSBBcnJheSkgcGx1Z2lucyA9IHBsdWdpbnNbMF07XG4gIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgaWYgKCFwbHVnaW4ucHJvdG90eXBlIHx8ICFwbHVnaW4ucHJvdG90eXBlLmNvbnN0cnVjdG9yKSB7XG4gICAgICB0aHJvdyBcIlNvcnRhYmxlOiBNb3VudGVkIHBsdWdpbiBtdXN0IGJlIGEgY29uc3RydWN0b3IgZnVuY3Rpb24sIG5vdCBcIi5jb25jYXQoe30udG9TdHJpbmcuY2FsbChwbHVnaW4pKTtcbiAgICB9XG5cbiAgICBpZiAocGx1Z2luLnV0aWxzKSBTb3J0YWJsZS51dGlscyA9IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBTb3J0YWJsZS51dGlscyksIHBsdWdpbi51dGlscyk7XG4gICAgUGx1Z2luTWFuYWdlci5tb3VudChwbHVnaW4pO1xuICB9KTtcbn07XG4vKipcclxuICogQ3JlYXRlIHNvcnRhYmxlIGluc3RhbmNlXHJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9ICBlbFxyXG4gKiBAcGFyYW0ge09iamVjdH0gICAgICBbb3B0aW9uc11cclxuICovXG5cblxuU29ydGFibGUuY3JlYXRlID0gZnVuY3Rpb24gKGVsLCBvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgU29ydGFibGUoZWwsIG9wdGlvbnMpO1xufTsgLy8gRXhwb3J0XG5cblxuU29ydGFibGUudmVyc2lvbiA9IHZlcnNpb247XG5cbnZhciBhdXRvU2Nyb2xscyA9IFtdLFxuICAgIHNjcm9sbEVsLFxuICAgIHNjcm9sbFJvb3RFbCxcbiAgICBzY3JvbGxpbmcgPSBmYWxzZSxcbiAgICBsYXN0QXV0b1Njcm9sbFgsXG4gICAgbGFzdEF1dG9TY3JvbGxZLFxuICAgIHRvdWNoRXZ0JDEsXG4gICAgcG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWw7XG5cbmZ1bmN0aW9uIEF1dG9TY3JvbGxQbHVnaW4oKSB7XG4gIGZ1bmN0aW9uIEF1dG9TY3JvbGwoKSB7XG4gICAgdGhpcy5kZWZhdWx0cyA9IHtcbiAgICAgIHNjcm9sbDogdHJ1ZSxcbiAgICAgIGZvcmNlQXV0b1Njcm9sbEZhbGxiYWNrOiBmYWxzZSxcbiAgICAgIHNjcm9sbFNlbnNpdGl2aXR5OiAzMCxcbiAgICAgIHNjcm9sbFNwZWVkOiAxMCxcbiAgICAgIGJ1YmJsZVNjcm9sbDogdHJ1ZVxuICAgIH07IC8vIEJpbmQgYWxsIHByaXZhdGUgbWV0aG9kc1xuXG4gICAgZm9yICh2YXIgZm4gaW4gdGhpcykge1xuICAgICAgaWYgKGZuLmNoYXJBdCgwKSA9PT0gJ18nICYmIHR5cGVvZiB0aGlzW2ZuXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzW2ZuXSA9IHRoaXNbZm5dLmJpbmQodGhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgQXV0b1Njcm9sbC5wcm90b3R5cGUgPSB7XG4gICAgZHJhZ1N0YXJ0ZWQ6IGZ1bmN0aW9uIGRyYWdTdGFydGVkKF9yZWYpIHtcbiAgICAgIHZhciBvcmlnaW5hbEV2ZW50ID0gX3JlZi5vcmlnaW5hbEV2ZW50O1xuXG4gICAgICBpZiAodGhpcy5zb3J0YWJsZS5uYXRpdmVEcmFnZ2FibGUpIHtcbiAgICAgICAgb24oZG9jdW1lbnQsICdkcmFnb3ZlcicsIHRoaXMuX2hhbmRsZUF1dG9TY3JvbGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zdXBwb3J0UG9pbnRlcikge1xuICAgICAgICAgIG9uKGRvY3VtZW50LCAncG9pbnRlcm1vdmUnLCB0aGlzLl9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGwpO1xuICAgICAgICB9IGVsc2UgaWYgKG9yaWdpbmFsRXZlbnQudG91Y2hlcykge1xuICAgICAgICAgIG9uKGRvY3VtZW50LCAndG91Y2htb3ZlJywgdGhpcy5faGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvbihkb2N1bWVudCwgJ21vdXNlbW92ZScsIHRoaXMuX2hhbmRsZUZhbGxiYWNrQXV0b1Njcm9sbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGRyYWdPdmVyQ29tcGxldGVkOiBmdW5jdGlvbiBkcmFnT3ZlckNvbXBsZXRlZChfcmVmMikge1xuICAgICAgdmFyIG9yaWdpbmFsRXZlbnQgPSBfcmVmMi5vcmlnaW5hbEV2ZW50O1xuXG4gICAgICAvLyBGb3Igd2hlbiBidWJibGluZyBpcyBjYW5jZWxlZCBhbmQgdXNpbmcgZmFsbGJhY2sgKGZhbGxiYWNrICd0b3VjaG1vdmUnIGFsd2F5cyByZWFjaGVkKVxuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuZHJhZ092ZXJCdWJibGUgJiYgIW9yaWdpbmFsRXZlbnQucm9vdEVsKSB7XG4gICAgICAgIHRoaXMuX2hhbmRsZUF1dG9TY3JvbGwob3JpZ2luYWxFdmVudCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkcm9wOiBmdW5jdGlvbiBkcm9wKCkge1xuICAgICAgaWYgKHRoaXMuc29ydGFibGUubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgICAgIG9mZihkb2N1bWVudCwgJ2RyYWdvdmVyJywgdGhpcy5faGFuZGxlQXV0b1Njcm9sbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvZmYoZG9jdW1lbnQsICdwb2ludGVybW92ZScsIHRoaXMuX2hhbmRsZUZhbGxiYWNrQXV0b1Njcm9sbCk7XG4gICAgICAgIG9mZihkb2N1bWVudCwgJ3RvdWNobW92ZScsIHRoaXMuX2hhbmRsZUZhbGxiYWNrQXV0b1Njcm9sbCk7XG4gICAgICAgIG9mZihkb2N1bWVudCwgJ21vdXNlbW92ZScsIHRoaXMuX2hhbmRsZUZhbGxiYWNrQXV0b1Njcm9sbCk7XG4gICAgICB9XG5cbiAgICAgIGNsZWFyUG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwoKTtcbiAgICAgIGNsZWFyQXV0b1Njcm9sbHMoKTtcbiAgICAgIGNhbmNlbFRocm90dGxlKCk7XG4gICAgfSxcbiAgICBudWxsaW5nOiBmdW5jdGlvbiBudWxsaW5nKCkge1xuICAgICAgdG91Y2hFdnQkMSA9IHNjcm9sbFJvb3RFbCA9IHNjcm9sbEVsID0gc2Nyb2xsaW5nID0gcG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwgPSBsYXN0QXV0b1Njcm9sbFggPSBsYXN0QXV0b1Njcm9sbFkgPSBudWxsO1xuICAgICAgYXV0b1Njcm9sbHMubGVuZ3RoID0gMDtcbiAgICB9LFxuICAgIF9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGw6IGZ1bmN0aW9uIF9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGwoZXZ0KSB7XG4gICAgICB0aGlzLl9oYW5kbGVBdXRvU2Nyb2xsKGV2dCwgdHJ1ZSk7XG4gICAgfSxcbiAgICBfaGFuZGxlQXV0b1Njcm9sbDogZnVuY3Rpb24gX2hhbmRsZUF1dG9TY3JvbGwoZXZ0LCBmYWxsYmFjaykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIHggPSAoZXZ0LnRvdWNoZXMgPyBldnQudG91Y2hlc1swXSA6IGV2dCkuY2xpZW50WCxcbiAgICAgICAgICB5ID0gKGV2dC50b3VjaGVzID8gZXZ0LnRvdWNoZXNbMF0gOiBldnQpLmNsaWVudFksXG4gICAgICAgICAgZWxlbSA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQoeCwgeSk7XG4gICAgICB0b3VjaEV2dCQxID0gZXZ0OyAvLyBJRSBkb2VzIG5vdCBzZWVtIHRvIGhhdmUgbmF0aXZlIGF1dG9zY3JvbGwsXG4gICAgICAvLyBFZGdlJ3MgYXV0b3Njcm9sbCBzZWVtcyB0b28gY29uZGl0aW9uYWwsXG4gICAgICAvLyBNQUNPUyBTYWZhcmkgZG9lcyBub3QgaGF2ZSBhdXRvc2Nyb2xsLFxuICAgICAgLy8gRmlyZWZveCBhbmQgQ2hyb21lIGFyZSBnb29kXG5cbiAgICAgIGlmIChmYWxsYmFjayB8fCB0aGlzLm9wdGlvbnMuZm9yY2VBdXRvU2Nyb2xsRmFsbGJhY2sgfHwgRWRnZSB8fCBJRTExT3JMZXNzIHx8IFNhZmFyaSkge1xuICAgICAgICBhdXRvU2Nyb2xsKGV2dCwgdGhpcy5vcHRpb25zLCBlbGVtLCBmYWxsYmFjayk7IC8vIExpc3RlbmVyIGZvciBwb2ludGVyIGVsZW1lbnQgY2hhbmdlXG5cbiAgICAgICAgdmFyIG9nRWxlbVNjcm9sbGVyID0gZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQoZWxlbSwgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKHNjcm9sbGluZyAmJiAoIXBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsIHx8IHggIT09IGxhc3RBdXRvU2Nyb2xsWCB8fCB5ICE9PSBsYXN0QXV0b1Njcm9sbFkpKSB7XG4gICAgICAgICAgcG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwgJiYgY2xlYXJQb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCgpOyAvLyBEZXRlY3QgZm9yIHBvaW50ZXIgZWxlbSBjaGFuZ2UsIGVtdWxhdGluZyBuYXRpdmUgRG5EIGJlaGF2aW91clxuXG4gICAgICAgICAgcG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbmV3RWxlbSA9IGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQoeCwgeSksIHRydWUpO1xuXG4gICAgICAgICAgICBpZiAobmV3RWxlbSAhPT0gb2dFbGVtU2Nyb2xsZXIpIHtcbiAgICAgICAgICAgICAgb2dFbGVtU2Nyb2xsZXIgPSBuZXdFbGVtO1xuICAgICAgICAgICAgICBjbGVhckF1dG9TY3JvbGxzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGF1dG9TY3JvbGwoZXZ0LCBfdGhpcy5vcHRpb25zLCBuZXdFbGVtLCBmYWxsYmFjayk7XG4gICAgICAgICAgfSwgMTApO1xuICAgICAgICAgIGxhc3RBdXRvU2Nyb2xsWCA9IHg7XG4gICAgICAgICAgbGFzdEF1dG9TY3JvbGxZID0geTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaWYgRG5EIGlzIGVuYWJsZWQgKGFuZCBicm93c2VyIGhhcyBnb29kIGF1dG9zY3JvbGxpbmcpLCBmaXJzdCBhdXRvc2Nyb2xsIHdpbGwgYWxyZWFkeSBzY3JvbGwsIHNvIGdldCBwYXJlbnQgYXV0b3Njcm9sbCBvZiBmaXJzdCBhdXRvc2Nyb2xsXG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLmJ1YmJsZVNjcm9sbCB8fCBnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudChlbGVtLCB0cnVlKSA9PT0gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpKSB7XG4gICAgICAgICAgY2xlYXJBdXRvU2Nyb2xscygpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGF1dG9TY3JvbGwoZXZ0LCB0aGlzLm9wdGlvbnMsIGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KGVsZW0sIGZhbHNlKSwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzKEF1dG9TY3JvbGwsIHtcbiAgICBwbHVnaW5OYW1lOiAnc2Nyb2xsJyxcbiAgICBpbml0aWFsaXplQnlEZWZhdWx0OiB0cnVlXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjbGVhckF1dG9TY3JvbGxzKCkge1xuICBhdXRvU2Nyb2xscy5mb3JFYWNoKGZ1bmN0aW9uIChhdXRvU2Nyb2xsKSB7XG4gICAgY2xlYXJJbnRlcnZhbChhdXRvU2Nyb2xsLnBpZCk7XG4gIH0pO1xuICBhdXRvU2Nyb2xscyA9IFtdO1xufVxuXG5mdW5jdGlvbiBjbGVhclBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsKCkge1xuICBjbGVhckludGVydmFsKHBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsKTtcbn1cblxudmFyIGF1dG9TY3JvbGwgPSB0aHJvdHRsZShmdW5jdGlvbiAoZXZ0LCBvcHRpb25zLCByb290RWwsIGlzRmFsbGJhY2spIHtcbiAgLy8gQnVnOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD01MDU1MjFcbiAgaWYgKCFvcHRpb25zLnNjcm9sbCkgcmV0dXJuO1xuICB2YXIgeCA9IChldnQudG91Y2hlcyA/IGV2dC50b3VjaGVzWzBdIDogZXZ0KS5jbGllbnRYLFxuICAgICAgeSA9IChldnQudG91Y2hlcyA/IGV2dC50b3VjaGVzWzBdIDogZXZ0KS5jbGllbnRZLFxuICAgICAgc2VucyA9IG9wdGlvbnMuc2Nyb2xsU2Vuc2l0aXZpdHksXG4gICAgICBzcGVlZCA9IG9wdGlvbnMuc2Nyb2xsU3BlZWQsXG4gICAgICB3aW5TY3JvbGxlciA9IGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTtcbiAgdmFyIHNjcm9sbFRoaXNJbnN0YW5jZSA9IGZhbHNlLFxuICAgICAgc2Nyb2xsQ3VzdG9tRm47IC8vIE5ldyBzY3JvbGwgcm9vdCwgc2V0IHNjcm9sbEVsXG5cbiAgaWYgKHNjcm9sbFJvb3RFbCAhPT0gcm9vdEVsKSB7XG4gICAgc2Nyb2xsUm9vdEVsID0gcm9vdEVsO1xuICAgIGNsZWFyQXV0b1Njcm9sbHMoKTtcbiAgICBzY3JvbGxFbCA9IG9wdGlvbnMuc2Nyb2xsO1xuICAgIHNjcm9sbEN1c3RvbUZuID0gb3B0aW9ucy5zY3JvbGxGbjtcblxuICAgIGlmIChzY3JvbGxFbCA9PT0gdHJ1ZSkge1xuICAgICAgc2Nyb2xsRWwgPSBnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudChyb290RWwsIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBsYXllcnNPdXQgPSAwO1xuICB2YXIgY3VycmVudFBhcmVudCA9IHNjcm9sbEVsO1xuXG4gIGRvIHtcbiAgICB2YXIgZWwgPSBjdXJyZW50UGFyZW50LFxuICAgICAgICByZWN0ID0gZ2V0UmVjdChlbCksXG4gICAgICAgIHRvcCA9IHJlY3QudG9wLFxuICAgICAgICBib3R0b20gPSByZWN0LmJvdHRvbSxcbiAgICAgICAgbGVmdCA9IHJlY3QubGVmdCxcbiAgICAgICAgcmlnaHQgPSByZWN0LnJpZ2h0LFxuICAgICAgICB3aWR0aCA9IHJlY3Qud2lkdGgsXG4gICAgICAgIGhlaWdodCA9IHJlY3QuaGVpZ2h0LFxuICAgICAgICBjYW5TY3JvbGxYID0gdm9pZCAwLFxuICAgICAgICBjYW5TY3JvbGxZID0gdm9pZCAwLFxuICAgICAgICBzY3JvbGxXaWR0aCA9IGVsLnNjcm9sbFdpZHRoLFxuICAgICAgICBzY3JvbGxIZWlnaHQgPSBlbC5zY3JvbGxIZWlnaHQsXG4gICAgICAgIGVsQ1NTID0gY3NzKGVsKSxcbiAgICAgICAgc2Nyb2xsUG9zWCA9IGVsLnNjcm9sbExlZnQsXG4gICAgICAgIHNjcm9sbFBvc1kgPSBlbC5zY3JvbGxUb3A7XG5cbiAgICBpZiAoZWwgPT09IHdpblNjcm9sbGVyKSB7XG4gICAgICBjYW5TY3JvbGxYID0gd2lkdGggPCBzY3JvbGxXaWR0aCAmJiAoZWxDU1Mub3ZlcmZsb3dYID09PSAnYXV0bycgfHwgZWxDU1Mub3ZlcmZsb3dYID09PSAnc2Nyb2xsJyB8fCBlbENTUy5vdmVyZmxvd1ggPT09ICd2aXNpYmxlJyk7XG4gICAgICBjYW5TY3JvbGxZID0gaGVpZ2h0IDwgc2Nyb2xsSGVpZ2h0ICYmIChlbENTUy5vdmVyZmxvd1kgPT09ICdhdXRvJyB8fCBlbENTUy5vdmVyZmxvd1kgPT09ICdzY3JvbGwnIHx8IGVsQ1NTLm92ZXJmbG93WSA9PT0gJ3Zpc2libGUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FuU2Nyb2xsWCA9IHdpZHRoIDwgc2Nyb2xsV2lkdGggJiYgKGVsQ1NTLm92ZXJmbG93WCA9PT0gJ2F1dG8nIHx8IGVsQ1NTLm92ZXJmbG93WCA9PT0gJ3Njcm9sbCcpO1xuICAgICAgY2FuU2Nyb2xsWSA9IGhlaWdodCA8IHNjcm9sbEhlaWdodCAmJiAoZWxDU1Mub3ZlcmZsb3dZID09PSAnYXV0bycgfHwgZWxDU1Mub3ZlcmZsb3dZID09PSAnc2Nyb2xsJyk7XG4gICAgfVxuXG4gICAgdmFyIHZ4ID0gY2FuU2Nyb2xsWCAmJiAoTWF0aC5hYnMocmlnaHQgLSB4KSA8PSBzZW5zICYmIHNjcm9sbFBvc1ggKyB3aWR0aCA8IHNjcm9sbFdpZHRoKSAtIChNYXRoLmFicyhsZWZ0IC0geCkgPD0gc2VucyAmJiAhIXNjcm9sbFBvc1gpO1xuICAgIHZhciB2eSA9IGNhblNjcm9sbFkgJiYgKE1hdGguYWJzKGJvdHRvbSAtIHkpIDw9IHNlbnMgJiYgc2Nyb2xsUG9zWSArIGhlaWdodCA8IHNjcm9sbEhlaWdodCkgLSAoTWF0aC5hYnModG9wIC0geSkgPD0gc2VucyAmJiAhIXNjcm9sbFBvc1kpO1xuXG4gICAgaWYgKCFhdXRvU2Nyb2xsc1tsYXllcnNPdXRdKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBsYXllcnNPdXQ7IGkrKykge1xuICAgICAgICBpZiAoIWF1dG9TY3JvbGxzW2ldKSB7XG4gICAgICAgICAgYXV0b1Njcm9sbHNbaV0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChhdXRvU2Nyb2xsc1tsYXllcnNPdXRdLnZ4ICE9IHZ4IHx8IGF1dG9TY3JvbGxzW2xheWVyc091dF0udnkgIT0gdnkgfHwgYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XS5lbCAhPT0gZWwpIHtcbiAgICAgIGF1dG9TY3JvbGxzW2xheWVyc091dF0uZWwgPSBlbDtcbiAgICAgIGF1dG9TY3JvbGxzW2xheWVyc091dF0udnggPSB2eDtcbiAgICAgIGF1dG9TY3JvbGxzW2xheWVyc091dF0udnkgPSB2eTtcbiAgICAgIGNsZWFySW50ZXJ2YWwoYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XS5waWQpO1xuXG4gICAgICBpZiAodnggIT0gMCB8fCB2eSAhPSAwKSB7XG4gICAgICAgIHNjcm9sbFRoaXNJbnN0YW5jZSA9IHRydWU7XG4gICAgICAgIC8qIGpzaGludCBsb29wZnVuYzp0cnVlICovXG5cbiAgICAgICAgYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XS5waWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gZW11bGF0ZSBkcmFnIG92ZXIgZHVyaW5nIGF1dG9zY3JvbGwgKGZhbGxiYWNrKSwgZW11bGF0aW5nIG5hdGl2ZSBEbkQgYmVoYXZpb3VyXG4gICAgICAgICAgaWYgKGlzRmFsbGJhY2sgJiYgdGhpcy5sYXllciA9PT0gMCkge1xuICAgICAgICAgICAgU29ydGFibGUuYWN0aXZlLl9vblRvdWNoTW92ZSh0b3VjaEV2dCQxKTsgLy8gVG8gbW92ZSBnaG9zdCBpZiBpdCBpcyBwb3NpdGlvbmVkIGFic29sdXRlbHlcblxuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBzY3JvbGxPZmZzZXRZID0gYXV0b1Njcm9sbHNbdGhpcy5sYXllcl0udnkgPyBhdXRvU2Nyb2xsc1t0aGlzLmxheWVyXS52eSAqIHNwZWVkIDogMDtcbiAgICAgICAgICB2YXIgc2Nyb2xsT2Zmc2V0WCA9IGF1dG9TY3JvbGxzW3RoaXMubGF5ZXJdLnZ4ID8gYXV0b1Njcm9sbHNbdGhpcy5sYXllcl0udnggKiBzcGVlZCA6IDA7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIHNjcm9sbEN1c3RvbUZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBpZiAoc2Nyb2xsQ3VzdG9tRm4uY2FsbChTb3J0YWJsZS5kcmFnZ2VkLnBhcmVudE5vZGVbZXhwYW5kb10sIHNjcm9sbE9mZnNldFgsIHNjcm9sbE9mZnNldFksIGV2dCwgdG91Y2hFdnQkMSwgYXV0b1Njcm9sbHNbdGhpcy5sYXllcl0uZWwpICE9PSAnY29udGludWUnKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzY3JvbGxCeShhdXRvU2Nyb2xsc1t0aGlzLmxheWVyXS5lbCwgc2Nyb2xsT2Zmc2V0WCwgc2Nyb2xsT2Zmc2V0WSk7XG4gICAgICAgIH0uYmluZCh7XG4gICAgICAgICAgbGF5ZXI6IGxheWVyc091dFxuICAgICAgICB9KSwgMjQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxheWVyc091dCsrO1xuICB9IHdoaWxlIChvcHRpb25zLmJ1YmJsZVNjcm9sbCAmJiBjdXJyZW50UGFyZW50ICE9PSB3aW5TY3JvbGxlciAmJiAoY3VycmVudFBhcmVudCA9IGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KGN1cnJlbnRQYXJlbnQsIGZhbHNlKSkpO1xuXG4gIHNjcm9sbGluZyA9IHNjcm9sbFRoaXNJbnN0YW5jZTsgLy8gaW4gY2FzZSBhbm90aGVyIGZ1bmN0aW9uIGNhdGNoZXMgc2Nyb2xsaW5nIGFzIGZhbHNlIGluIGJldHdlZW4gd2hlbiBpdCBpcyBub3Rcbn0sIDMwKTtcblxudmFyIGRyb3AgPSBmdW5jdGlvbiBkcm9wKF9yZWYpIHtcbiAgdmFyIG9yaWdpbmFsRXZlbnQgPSBfcmVmLm9yaWdpbmFsRXZlbnQsXG4gICAgICBwdXRTb3J0YWJsZSA9IF9yZWYucHV0U29ydGFibGUsXG4gICAgICBkcmFnRWwgPSBfcmVmLmRyYWdFbCxcbiAgICAgIGFjdGl2ZVNvcnRhYmxlID0gX3JlZi5hY3RpdmVTb3J0YWJsZSxcbiAgICAgIGRpc3BhdGNoU29ydGFibGVFdmVudCA9IF9yZWYuZGlzcGF0Y2hTb3J0YWJsZUV2ZW50LFxuICAgICAgaGlkZUdob3N0Rm9yVGFyZ2V0ID0gX3JlZi5oaWRlR2hvc3RGb3JUYXJnZXQsXG4gICAgICB1bmhpZGVHaG9zdEZvclRhcmdldCA9IF9yZWYudW5oaWRlR2hvc3RGb3JUYXJnZXQ7XG4gIGlmICghb3JpZ2luYWxFdmVudCkgcmV0dXJuO1xuICB2YXIgdG9Tb3J0YWJsZSA9IHB1dFNvcnRhYmxlIHx8IGFjdGl2ZVNvcnRhYmxlO1xuICBoaWRlR2hvc3RGb3JUYXJnZXQoKTtcbiAgdmFyIHRvdWNoID0gb3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlcyAmJiBvcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aCA/IG9yaWdpbmFsRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0gOiBvcmlnaW5hbEV2ZW50O1xuICB2YXIgdGFyZ2V0ID0gZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludCh0b3VjaC5jbGllbnRYLCB0b3VjaC5jbGllbnRZKTtcbiAgdW5oaWRlR2hvc3RGb3JUYXJnZXQoKTtcblxuICBpZiAodG9Tb3J0YWJsZSAmJiAhdG9Tb3J0YWJsZS5lbC5jb250YWlucyh0YXJnZXQpKSB7XG4gICAgZGlzcGF0Y2hTb3J0YWJsZUV2ZW50KCdzcGlsbCcpO1xuICAgIHRoaXMub25TcGlsbCh7XG4gICAgICBkcmFnRWw6IGRyYWdFbCxcbiAgICAgIHB1dFNvcnRhYmxlOiBwdXRTb3J0YWJsZVxuICAgIH0pO1xuICB9XG59O1xuXG5mdW5jdGlvbiBSZXZlcnQoKSB7fVxuXG5SZXZlcnQucHJvdG90eXBlID0ge1xuICBzdGFydEluZGV4OiBudWxsLFxuICBkcmFnU3RhcnQ6IGZ1bmN0aW9uIGRyYWdTdGFydChfcmVmMikge1xuICAgIHZhciBvbGREcmFnZ2FibGVJbmRleCA9IF9yZWYyLm9sZERyYWdnYWJsZUluZGV4O1xuICAgIHRoaXMuc3RhcnRJbmRleCA9IG9sZERyYWdnYWJsZUluZGV4O1xuICB9LFxuICBvblNwaWxsOiBmdW5jdGlvbiBvblNwaWxsKF9yZWYzKSB7XG4gICAgdmFyIGRyYWdFbCA9IF9yZWYzLmRyYWdFbCxcbiAgICAgICAgcHV0U29ydGFibGUgPSBfcmVmMy5wdXRTb3J0YWJsZTtcbiAgICB0aGlzLnNvcnRhYmxlLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuXG4gICAgaWYgKHB1dFNvcnRhYmxlKSB7XG4gICAgICBwdXRTb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcbiAgICB9XG5cbiAgICB2YXIgbmV4dFNpYmxpbmcgPSBnZXRDaGlsZCh0aGlzLnNvcnRhYmxlLmVsLCB0aGlzLnN0YXJ0SW5kZXgsIHRoaXMub3B0aW9ucyk7XG5cbiAgICBpZiAobmV4dFNpYmxpbmcpIHtcbiAgICAgIHRoaXMuc29ydGFibGUuZWwuaW5zZXJ0QmVmb3JlKGRyYWdFbCwgbmV4dFNpYmxpbmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNvcnRhYmxlLmVsLmFwcGVuZENoaWxkKGRyYWdFbCk7XG4gICAgfVxuXG4gICAgdGhpcy5zb3J0YWJsZS5hbmltYXRlQWxsKCk7XG5cbiAgICBpZiAocHV0U29ydGFibGUpIHtcbiAgICAgIHB1dFNvcnRhYmxlLmFuaW1hdGVBbGwoKTtcbiAgICB9XG4gIH0sXG4gIGRyb3A6IGRyb3Bcbn07XG5cbl9leHRlbmRzKFJldmVydCwge1xuICBwbHVnaW5OYW1lOiAncmV2ZXJ0T25TcGlsbCdcbn0pO1xuXG5mdW5jdGlvbiBSZW1vdmUoKSB7fVxuXG5SZW1vdmUucHJvdG90eXBlID0ge1xuICBvblNwaWxsOiBmdW5jdGlvbiBvblNwaWxsKF9yZWY0KSB7XG4gICAgdmFyIGRyYWdFbCA9IF9yZWY0LmRyYWdFbCxcbiAgICAgICAgcHV0U29ydGFibGUgPSBfcmVmNC5wdXRTb3J0YWJsZTtcbiAgICB2YXIgcGFyZW50U29ydGFibGUgPSBwdXRTb3J0YWJsZSB8fCB0aGlzLnNvcnRhYmxlO1xuICAgIHBhcmVudFNvcnRhYmxlLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuICAgIGRyYWdFbC5wYXJlbnROb2RlICYmIGRyYWdFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGRyYWdFbCk7XG4gICAgcGFyZW50U29ydGFibGUuYW5pbWF0ZUFsbCgpO1xuICB9LFxuICBkcm9wOiBkcm9wXG59O1xuXG5fZXh0ZW5kcyhSZW1vdmUsIHtcbiAgcGx1Z2luTmFtZTogJ3JlbW92ZU9uU3BpbGwnXG59KTtcblxudmFyIGxhc3RTd2FwRWw7XG5cbmZ1bmN0aW9uIFN3YXBQbHVnaW4oKSB7XG4gIGZ1bmN0aW9uIFN3YXAoKSB7XG4gICAgdGhpcy5kZWZhdWx0cyA9IHtcbiAgICAgIHN3YXBDbGFzczogJ3NvcnRhYmxlLXN3YXAtaGlnaGxpZ2h0J1xuICAgIH07XG4gIH1cblxuICBTd2FwLnByb3RvdHlwZSA9IHtcbiAgICBkcmFnU3RhcnQ6IGZ1bmN0aW9uIGRyYWdTdGFydChfcmVmKSB7XG4gICAgICB2YXIgZHJhZ0VsID0gX3JlZi5kcmFnRWw7XG4gICAgICBsYXN0U3dhcEVsID0gZHJhZ0VsO1xuICAgIH0sXG4gICAgZHJhZ092ZXJWYWxpZDogZnVuY3Rpb24gZHJhZ092ZXJWYWxpZChfcmVmMikge1xuICAgICAgdmFyIGNvbXBsZXRlZCA9IF9yZWYyLmNvbXBsZXRlZCxcbiAgICAgICAgICB0YXJnZXQgPSBfcmVmMi50YXJnZXQsXG4gICAgICAgICAgb25Nb3ZlID0gX3JlZjIub25Nb3ZlLFxuICAgICAgICAgIGFjdGl2ZVNvcnRhYmxlID0gX3JlZjIuYWN0aXZlU29ydGFibGUsXG4gICAgICAgICAgY2hhbmdlZCA9IF9yZWYyLmNoYW5nZWQsXG4gICAgICAgICAgY2FuY2VsID0gX3JlZjIuY2FuY2VsO1xuICAgICAgaWYgKCFhY3RpdmVTb3J0YWJsZS5vcHRpb25zLnN3YXApIHJldHVybjtcbiAgICAgIHZhciBlbCA9IHRoaXMuc29ydGFibGUuZWwsXG4gICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgICAgaWYgKHRhcmdldCAmJiB0YXJnZXQgIT09IGVsKSB7XG4gICAgICAgIHZhciBwcmV2U3dhcEVsID0gbGFzdFN3YXBFbDtcblxuICAgICAgICBpZiAob25Nb3ZlKHRhcmdldCkgIT09IGZhbHNlKSB7XG4gICAgICAgICAgdG9nZ2xlQ2xhc3ModGFyZ2V0LCBvcHRpb25zLnN3YXBDbGFzcywgdHJ1ZSk7XG4gICAgICAgICAgbGFzdFN3YXBFbCA9IHRhcmdldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsYXN0U3dhcEVsID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcmV2U3dhcEVsICYmIHByZXZTd2FwRWwgIT09IGxhc3RTd2FwRWwpIHtcbiAgICAgICAgICB0b2dnbGVDbGFzcyhwcmV2U3dhcEVsLCBvcHRpb25zLnN3YXBDbGFzcywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNoYW5nZWQoKTtcbiAgICAgIGNvbXBsZXRlZCh0cnVlKTtcbiAgICAgIGNhbmNlbCgpO1xuICAgIH0sXG4gICAgZHJvcDogZnVuY3Rpb24gZHJvcChfcmVmMykge1xuICAgICAgdmFyIGFjdGl2ZVNvcnRhYmxlID0gX3JlZjMuYWN0aXZlU29ydGFibGUsXG4gICAgICAgICAgcHV0U29ydGFibGUgPSBfcmVmMy5wdXRTb3J0YWJsZSxcbiAgICAgICAgICBkcmFnRWwgPSBfcmVmMy5kcmFnRWw7XG4gICAgICB2YXIgdG9Tb3J0YWJsZSA9IHB1dFNvcnRhYmxlIHx8IHRoaXMuc29ydGFibGU7XG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgIGxhc3RTd2FwRWwgJiYgdG9nZ2xlQ2xhc3MobGFzdFN3YXBFbCwgb3B0aW9ucy5zd2FwQ2xhc3MsIGZhbHNlKTtcblxuICAgICAgaWYgKGxhc3RTd2FwRWwgJiYgKG9wdGlvbnMuc3dhcCB8fCBwdXRTb3J0YWJsZSAmJiBwdXRTb3J0YWJsZS5vcHRpb25zLnN3YXApKSB7XG4gICAgICAgIGlmIChkcmFnRWwgIT09IGxhc3RTd2FwRWwpIHtcbiAgICAgICAgICB0b1NvcnRhYmxlLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuICAgICAgICAgIGlmICh0b1NvcnRhYmxlICE9PSBhY3RpdmVTb3J0YWJsZSkgYWN0aXZlU29ydGFibGUuY2FwdHVyZUFuaW1hdGlvblN0YXRlKCk7XG4gICAgICAgICAgc3dhcE5vZGVzKGRyYWdFbCwgbGFzdFN3YXBFbCk7XG4gICAgICAgICAgdG9Tb3J0YWJsZS5hbmltYXRlQWxsKCk7XG4gICAgICAgICAgaWYgKHRvU29ydGFibGUgIT09IGFjdGl2ZVNvcnRhYmxlKSBhY3RpdmVTb3J0YWJsZS5hbmltYXRlQWxsKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIG51bGxpbmc6IGZ1bmN0aW9uIG51bGxpbmcoKSB7XG4gICAgICBsYXN0U3dhcEVsID0gbnVsbDtcbiAgICB9XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcyhTd2FwLCB7XG4gICAgcGx1Z2luTmFtZTogJ3N3YXAnLFxuICAgIGV2ZW50UHJvcGVydGllczogZnVuY3Rpb24gZXZlbnRQcm9wZXJ0aWVzKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3dhcEl0ZW06IGxhc3RTd2FwRWxcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc3dhcE5vZGVzKG4xLCBuMikge1xuICB2YXIgcDEgPSBuMS5wYXJlbnROb2RlLFxuICAgICAgcDIgPSBuMi5wYXJlbnROb2RlLFxuICAgICAgaTEsXG4gICAgICBpMjtcbiAgaWYgKCFwMSB8fCAhcDIgfHwgcDEuaXNFcXVhbE5vZGUobjIpIHx8IHAyLmlzRXF1YWxOb2RlKG4xKSkgcmV0dXJuO1xuICBpMSA9IGluZGV4KG4xKTtcbiAgaTIgPSBpbmRleChuMik7XG5cbiAgaWYgKHAxLmlzRXF1YWxOb2RlKHAyKSAmJiBpMSA8IGkyKSB7XG4gICAgaTIrKztcbiAgfVxuXG4gIHAxLmluc2VydEJlZm9yZShuMiwgcDEuY2hpbGRyZW5baTFdKTtcbiAgcDIuaW5zZXJ0QmVmb3JlKG4xLCBwMi5jaGlsZHJlbltpMl0pO1xufVxuXG52YXIgbXVsdGlEcmFnRWxlbWVudHMgPSBbXSxcbiAgICBtdWx0aURyYWdDbG9uZXMgPSBbXSxcbiAgICBsYXN0TXVsdGlEcmFnU2VsZWN0LFxuICAgIC8vIGZvciBzZWxlY3Rpb24gd2l0aCBtb2RpZmllciBrZXkgZG93biAoU0hJRlQpXG5tdWx0aURyYWdTb3J0YWJsZSxcbiAgICBpbml0aWFsRm9sZGluZyA9IGZhbHNlLFxuICAgIC8vIEluaXRpYWwgbXVsdGktZHJhZyBmb2xkIHdoZW4gZHJhZyBzdGFydGVkXG5mb2xkaW5nID0gZmFsc2UsXG4gICAgLy8gRm9sZGluZyBhbnkgb3RoZXIgdGltZVxuZHJhZ1N0YXJ0ZWQgPSBmYWxzZSxcbiAgICBkcmFnRWwkMSxcbiAgICBjbG9uZXNGcm9tUmVjdCxcbiAgICBjbG9uZXNIaWRkZW47XG5cbmZ1bmN0aW9uIE11bHRpRHJhZ1BsdWdpbigpIHtcbiAgZnVuY3Rpb24gTXVsdGlEcmFnKHNvcnRhYmxlKSB7XG4gICAgLy8gQmluZCBhbGwgcHJpdmF0ZSBtZXRob2RzXG4gICAgZm9yICh2YXIgZm4gaW4gdGhpcykge1xuICAgICAgaWYgKGZuLmNoYXJBdCgwKSA9PT0gJ18nICYmIHR5cGVvZiB0aGlzW2ZuXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzW2ZuXSA9IHRoaXNbZm5dLmJpbmQodGhpcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFzb3J0YWJsZS5vcHRpb25zLmF2b2lkSW1wbGljaXREZXNlbGVjdCkge1xuICAgICAgaWYgKHNvcnRhYmxlLm9wdGlvbnMuc3VwcG9ydFBvaW50ZXIpIHtcbiAgICAgICAgb24oZG9jdW1lbnQsICdwb2ludGVydXAnLCB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvbihkb2N1bWVudCwgJ21vdXNldXAnLCB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZyk7XG4gICAgICAgIG9uKGRvY3VtZW50LCAndG91Y2hlbmQnLCB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgb24oZG9jdW1lbnQsICdrZXlkb3duJywgdGhpcy5fY2hlY2tLZXlEb3duKTtcbiAgICBvbihkb2N1bWVudCwgJ2tleXVwJywgdGhpcy5fY2hlY2tLZXlVcCk7XG4gICAgdGhpcy5kZWZhdWx0cyA9IHtcbiAgICAgIHNlbGVjdGVkQ2xhc3M6ICdzb3J0YWJsZS1zZWxlY3RlZCcsXG4gICAgICBtdWx0aURyYWdLZXk6IG51bGwsXG4gICAgICBhdm9pZEltcGxpY2l0RGVzZWxlY3Q6IGZhbHNlLFxuICAgICAgc2V0RGF0YTogZnVuY3Rpb24gc2V0RGF0YShkYXRhVHJhbnNmZXIsIGRyYWdFbCkge1xuICAgICAgICB2YXIgZGF0YSA9ICcnO1xuXG4gICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50cy5sZW5ndGggJiYgbXVsdGlEcmFnU29ydGFibGUgPT09IHNvcnRhYmxlKSB7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCwgaSkge1xuICAgICAgICAgICAgZGF0YSArPSAoIWkgPyAnJyA6ICcsICcpICsgbXVsdGlEcmFnRWxlbWVudC50ZXh0Q29udGVudDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkYXRhID0gZHJhZ0VsLnRleHRDb250ZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgZGF0YVRyYW5zZmVyLnNldERhdGEoJ1RleHQnLCBkYXRhKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgTXVsdGlEcmFnLnByb3RvdHlwZSA9IHtcbiAgICBtdWx0aURyYWdLZXlEb3duOiBmYWxzZSxcbiAgICBpc011bHRpRHJhZzogZmFsc2UsXG4gICAgZGVsYXlTdGFydEdsb2JhbDogZnVuY3Rpb24gZGVsYXlTdGFydEdsb2JhbChfcmVmKSB7XG4gICAgICB2YXIgZHJhZ2dlZCA9IF9yZWYuZHJhZ0VsO1xuICAgICAgZHJhZ0VsJDEgPSBkcmFnZ2VkO1xuICAgIH0sXG4gICAgZGVsYXlFbmRlZDogZnVuY3Rpb24gZGVsYXlFbmRlZCgpIHtcbiAgICAgIHRoaXMuaXNNdWx0aURyYWcgPSB+bXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZihkcmFnRWwkMSk7XG4gICAgfSxcbiAgICBzZXR1cENsb25lOiBmdW5jdGlvbiBzZXR1cENsb25lKF9yZWYyKSB7XG4gICAgICB2YXIgc29ydGFibGUgPSBfcmVmMi5zb3J0YWJsZSxcbiAgICAgICAgICBjYW5jZWwgPSBfcmVmMi5jYW5jZWw7XG4gICAgICBpZiAoIXRoaXMuaXNNdWx0aURyYWcpIHJldHVybjtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtdWx0aURyYWdFbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBtdWx0aURyYWdDbG9uZXMucHVzaChjbG9uZShtdWx0aURyYWdFbGVtZW50c1tpXSkpO1xuICAgICAgICBtdWx0aURyYWdDbG9uZXNbaV0uc29ydGFibGVJbmRleCA9IG11bHRpRHJhZ0VsZW1lbnRzW2ldLnNvcnRhYmxlSW5kZXg7XG4gICAgICAgIG11bHRpRHJhZ0Nsb25lc1tpXS5kcmFnZ2FibGUgPSBmYWxzZTtcbiAgICAgICAgbXVsdGlEcmFnQ2xvbmVzW2ldLnN0eWxlWyd3aWxsLWNoYW5nZSddID0gJyc7XG4gICAgICAgIHRvZ2dsZUNsYXNzKG11bHRpRHJhZ0Nsb25lc1tpXSwgdGhpcy5vcHRpb25zLnNlbGVjdGVkQ2xhc3MsIGZhbHNlKTtcbiAgICAgICAgbXVsdGlEcmFnRWxlbWVudHNbaV0gPT09IGRyYWdFbCQxICYmIHRvZ2dsZUNsYXNzKG11bHRpRHJhZ0Nsb25lc1tpXSwgdGhpcy5vcHRpb25zLmNob3NlbkNsYXNzLCBmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIHNvcnRhYmxlLl9oaWRlQ2xvbmUoKTtcblxuICAgICAgY2FuY2VsKCk7XG4gICAgfSxcbiAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoX3JlZjMpIHtcbiAgICAgIHZhciBzb3J0YWJsZSA9IF9yZWYzLnNvcnRhYmxlLFxuICAgICAgICAgIHJvb3RFbCA9IF9yZWYzLnJvb3RFbCxcbiAgICAgICAgICBkaXNwYXRjaFNvcnRhYmxlRXZlbnQgPSBfcmVmMy5kaXNwYXRjaFNvcnRhYmxlRXZlbnQsXG4gICAgICAgICAgY2FuY2VsID0gX3JlZjMuY2FuY2VsO1xuICAgICAgaWYgKCF0aGlzLmlzTXVsdGlEcmFnKSByZXR1cm47XG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLnJlbW92ZUNsb25lT25IaWRlKSB7XG4gICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50cy5sZW5ndGggJiYgbXVsdGlEcmFnU29ydGFibGUgPT09IHNvcnRhYmxlKSB7XG4gICAgICAgICAgaW5zZXJ0TXVsdGlEcmFnQ2xvbmVzKHRydWUsIHJvb3RFbCk7XG4gICAgICAgICAgZGlzcGF0Y2hTb3J0YWJsZUV2ZW50KCdjbG9uZScpO1xuICAgICAgICAgIGNhbmNlbCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBzaG93Q2xvbmU6IGZ1bmN0aW9uIHNob3dDbG9uZShfcmVmNCkge1xuICAgICAgdmFyIGNsb25lTm93U2hvd24gPSBfcmVmNC5jbG9uZU5vd1Nob3duLFxuICAgICAgICAgIHJvb3RFbCA9IF9yZWY0LnJvb3RFbCxcbiAgICAgICAgICBjYW5jZWwgPSBfcmVmNC5jYW5jZWw7XG4gICAgICBpZiAoIXRoaXMuaXNNdWx0aURyYWcpIHJldHVybjtcbiAgICAgIGluc2VydE11bHRpRHJhZ0Nsb25lcyhmYWxzZSwgcm9vdEVsKTtcbiAgICAgIG11bHRpRHJhZ0Nsb25lcy5mb3JFYWNoKGZ1bmN0aW9uIChjbG9uZSkge1xuICAgICAgICBjc3MoY2xvbmUsICdkaXNwbGF5JywgJycpO1xuICAgICAgfSk7XG4gICAgICBjbG9uZU5vd1Nob3duKCk7XG4gICAgICBjbG9uZXNIaWRkZW4gPSBmYWxzZTtcbiAgICAgIGNhbmNlbCgpO1xuICAgIH0sXG4gICAgaGlkZUNsb25lOiBmdW5jdGlvbiBoaWRlQ2xvbmUoX3JlZjUpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHZhciBzb3J0YWJsZSA9IF9yZWY1LnNvcnRhYmxlLFxuICAgICAgICAgIGNsb25lTm93SGlkZGVuID0gX3JlZjUuY2xvbmVOb3dIaWRkZW4sXG4gICAgICAgICAgY2FuY2VsID0gX3JlZjUuY2FuY2VsO1xuICAgICAgaWYgKCF0aGlzLmlzTXVsdGlEcmFnKSByZXR1cm47XG4gICAgICBtdWx0aURyYWdDbG9uZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xvbmUpIHtcbiAgICAgICAgY3NzKGNsb25lLCAnZGlzcGxheScsICdub25lJyk7XG5cbiAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMucmVtb3ZlQ2xvbmVPbkhpZGUgJiYgY2xvbmUucGFyZW50Tm9kZSkge1xuICAgICAgICAgIGNsb25lLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY2xvbmUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNsb25lTm93SGlkZGVuKCk7XG4gICAgICBjbG9uZXNIaWRkZW4gPSB0cnVlO1xuICAgICAgY2FuY2VsKCk7XG4gICAgfSxcbiAgICBkcmFnU3RhcnRHbG9iYWw6IGZ1bmN0aW9uIGRyYWdTdGFydEdsb2JhbChfcmVmNikge1xuICAgICAgdmFyIHNvcnRhYmxlID0gX3JlZjYuc29ydGFibGU7XG5cbiAgICAgIGlmICghdGhpcy5pc011bHRpRHJhZyAmJiBtdWx0aURyYWdTb3J0YWJsZSkge1xuICAgICAgICBtdWx0aURyYWdTb3J0YWJsZS5tdWx0aURyYWcuX2Rlc2VsZWN0TXVsdGlEcmFnKCk7XG4gICAgICB9XG5cbiAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgbXVsdGlEcmFnRWxlbWVudC5zb3J0YWJsZUluZGV4ID0gaW5kZXgobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICB9KTsgLy8gU29ydCBtdWx0aS1kcmFnIGVsZW1lbnRzXG5cbiAgICAgIG11bHRpRHJhZ0VsZW1lbnRzID0gbXVsdGlEcmFnRWxlbWVudHMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICByZXR1cm4gYS5zb3J0YWJsZUluZGV4IC0gYi5zb3J0YWJsZUluZGV4O1xuICAgICAgfSk7XG4gICAgICBkcmFnU3RhcnRlZCA9IHRydWU7XG4gICAgfSxcbiAgICBkcmFnU3RhcnRlZDogZnVuY3Rpb24gZHJhZ1N0YXJ0ZWQoX3JlZjcpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgc29ydGFibGUgPSBfcmVmNy5zb3J0YWJsZTtcbiAgICAgIGlmICghdGhpcy5pc011bHRpRHJhZykgcmV0dXJuO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnNvcnQpIHtcbiAgICAgICAgLy8gQ2FwdHVyZSByZWN0cyxcbiAgICAgICAgLy8gaGlkZSBtdWx0aSBkcmFnIGVsZW1lbnRzIChieSBwb3NpdGlvbmluZyB0aGVtIGFic29sdXRlKSxcbiAgICAgICAgLy8gc2V0IG11bHRpIGRyYWcgZWxlbWVudHMgcmVjdHMgdG8gZHJhZ1JlY3QsXG4gICAgICAgIC8vIHNob3cgbXVsdGkgZHJhZyBlbGVtZW50cyxcbiAgICAgICAgLy8gYW5pbWF0ZSB0byByZWN0cyxcbiAgICAgICAgLy8gdW5zZXQgcmVjdHMgJiByZW1vdmUgZnJvbSBET01cbiAgICAgICAgc29ydGFibGUuY2FwdHVyZUFuaW1hdGlvblN0YXRlKCk7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRpb24pIHtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAobXVsdGlEcmFnRWxlbWVudCA9PT0gZHJhZ0VsJDEpIHJldHVybjtcbiAgICAgICAgICAgIGNzcyhtdWx0aURyYWdFbGVtZW50LCAncG9zaXRpb24nLCAnYWJzb2x1dGUnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YXIgZHJhZ1JlY3QgPSBnZXRSZWN0KGRyYWdFbCQxLCBmYWxzZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKG11bHRpRHJhZ0VsZW1lbnQgPT09IGRyYWdFbCQxKSByZXR1cm47XG4gICAgICAgICAgICBzZXRSZWN0KG11bHRpRHJhZ0VsZW1lbnQsIGRyYWdSZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBmb2xkaW5nID0gdHJ1ZTtcbiAgICAgICAgICBpbml0aWFsRm9sZGluZyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc29ydGFibGUuYW5pbWF0ZUFsbChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvbGRpbmcgPSBmYWxzZTtcbiAgICAgICAgaW5pdGlhbEZvbGRpbmcgPSBmYWxzZTtcblxuICAgICAgICBpZiAoX3RoaXMyLm9wdGlvbnMuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICAgICAgdW5zZXRSZWN0KG11bHRpRHJhZ0VsZW1lbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IC8vIFJlbW92ZSBhbGwgYXV4aWxpYXJ5IG11bHRpZHJhZyBpdGVtcyBmcm9tIGVsLCBpZiBzb3J0aW5nIGVuYWJsZWRcblxuXG4gICAgICAgIGlmIChfdGhpczIub3B0aW9ucy5zb3J0KSB7XG4gICAgICAgICAgcmVtb3ZlTXVsdGlEcmFnRWxlbWVudHMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBkcmFnT3ZlcjogZnVuY3Rpb24gZHJhZ092ZXIoX3JlZjgpIHtcbiAgICAgIHZhciB0YXJnZXQgPSBfcmVmOC50YXJnZXQsXG4gICAgICAgICAgY29tcGxldGVkID0gX3JlZjguY29tcGxldGVkLFxuICAgICAgICAgIGNhbmNlbCA9IF9yZWY4LmNhbmNlbDtcblxuICAgICAgaWYgKGZvbGRpbmcgJiYgfm11bHRpRHJhZ0VsZW1lbnRzLmluZGV4T2YodGFyZ2V0KSkge1xuICAgICAgICBjb21wbGV0ZWQoZmFsc2UpO1xuICAgICAgICBjYW5jZWwoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJldmVydDogZnVuY3Rpb24gcmV2ZXJ0KF9yZWY5KSB7XG4gICAgICB2YXIgZnJvbVNvcnRhYmxlID0gX3JlZjkuZnJvbVNvcnRhYmxlLFxuICAgICAgICAgIHJvb3RFbCA9IF9yZWY5LnJvb3RFbCxcbiAgICAgICAgICBzb3J0YWJsZSA9IF9yZWY5LnNvcnRhYmxlLFxuICAgICAgICAgIGRyYWdSZWN0ID0gX3JlZjkuZHJhZ1JlY3Q7XG5cbiAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIC8vIFNldHVwIHVuZm9sZCBhbmltYXRpb25cbiAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICAgIHNvcnRhYmxlLmFkZEFuaW1hdGlvblN0YXRlKHtcbiAgICAgICAgICAgIHRhcmdldDogbXVsdGlEcmFnRWxlbWVudCxcbiAgICAgICAgICAgIHJlY3Q6IGZvbGRpbmcgPyBnZXRSZWN0KG11bHRpRHJhZ0VsZW1lbnQpIDogZHJhZ1JlY3RcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB1bnNldFJlY3QobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudC5mcm9tUmVjdCA9IGRyYWdSZWN0O1xuICAgICAgICAgIGZyb21Tb3J0YWJsZS5yZW1vdmVBbmltYXRpb25TdGF0ZShtdWx0aURyYWdFbGVtZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZvbGRpbmcgPSBmYWxzZTtcbiAgICAgICAgaW5zZXJ0TXVsdGlEcmFnRWxlbWVudHMoIXRoaXMub3B0aW9ucy5yZW1vdmVDbG9uZU9uSGlkZSwgcm9vdEVsKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRyYWdPdmVyQ29tcGxldGVkOiBmdW5jdGlvbiBkcmFnT3ZlckNvbXBsZXRlZChfcmVmMTApIHtcbiAgICAgIHZhciBzb3J0YWJsZSA9IF9yZWYxMC5zb3J0YWJsZSxcbiAgICAgICAgICBpc093bmVyID0gX3JlZjEwLmlzT3duZXIsXG4gICAgICAgICAgaW5zZXJ0aW9uID0gX3JlZjEwLmluc2VydGlvbixcbiAgICAgICAgICBhY3RpdmVTb3J0YWJsZSA9IF9yZWYxMC5hY3RpdmVTb3J0YWJsZSxcbiAgICAgICAgICBwYXJlbnRFbCA9IF9yZWYxMC5wYXJlbnRFbCxcbiAgICAgICAgICBwdXRTb3J0YWJsZSA9IF9yZWYxMC5wdXRTb3J0YWJsZTtcbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICBpZiAoaW5zZXJ0aW9uKSB7XG4gICAgICAgIC8vIENsb25lcyBtdXN0IGJlIGhpZGRlbiBiZWZvcmUgZm9sZGluZyBhbmltYXRpb24gdG8gY2FwdHVyZSBkcmFnUmVjdEFic29sdXRlIHByb3Blcmx5XG4gICAgICAgIGlmIChpc093bmVyKSB7XG4gICAgICAgICAgYWN0aXZlU29ydGFibGUuX2hpZGVDbG9uZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5pdGlhbEZvbGRpbmcgPSBmYWxzZTsgLy8gSWYgbGVhdmluZyBzb3J0OmZhbHNlIHJvb3QsIG9yIGFscmVhZHkgZm9sZGluZyAtIEZvbGQgdG8gbmV3IGxvY2F0aW9uXG5cbiAgICAgICAgaWYgKG9wdGlvbnMuYW5pbWF0aW9uICYmIG11bHRpRHJhZ0VsZW1lbnRzLmxlbmd0aCA+IDEgJiYgKGZvbGRpbmcgfHwgIWlzT3duZXIgJiYgIWFjdGl2ZVNvcnRhYmxlLm9wdGlvbnMuc29ydCAmJiAhcHV0U29ydGFibGUpKSB7XG4gICAgICAgICAgLy8gRm9sZDogU2V0IGFsbCBtdWx0aSBkcmFnIGVsZW1lbnRzJ3MgcmVjdHMgdG8gZHJhZ0VsJ3MgcmVjdCB3aGVuIG11bHRpLWRyYWcgZWxlbWVudHMgYXJlIGludmlzaWJsZVxuICAgICAgICAgIHZhciBkcmFnUmVjdEFic29sdXRlID0gZ2V0UmVjdChkcmFnRWwkMSwgZmFsc2UsIHRydWUsIHRydWUpO1xuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50ID09PSBkcmFnRWwkMSkgcmV0dXJuO1xuICAgICAgICAgICAgc2V0UmVjdChtdWx0aURyYWdFbGVtZW50LCBkcmFnUmVjdEFic29sdXRlKTsgLy8gTW92ZSBlbGVtZW50KHMpIHRvIGVuZCBvZiBwYXJlbnRFbCBzbyB0aGF0IGl0IGRvZXMgbm90IGludGVyZmVyZSB3aXRoIG11bHRpLWRyYWcgY2xvbmVzIGluc2VydGlvbiBpZiB0aGV5IGFyZSBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gd2hpbGUgZm9sZGluZywgYW5kIHNvIHRoYXQgd2UgY2FuIGNhcHR1cmUgdGhlbSBhZ2FpbiBiZWNhdXNlIG9sZCBzb3J0YWJsZSB3aWxsIG5vIGxvbmdlciBiZSBmcm9tU29ydGFibGVcblxuICAgICAgICAgICAgcGFyZW50RWwuYXBwZW5kQ2hpbGQobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZm9sZGluZyA9IHRydWU7XG4gICAgICAgIH0gLy8gQ2xvbmVzIG11c3QgYmUgc2hvd24gKGFuZCBjaGVjayB0byByZW1vdmUgbXVsdGkgZHJhZ3MpIGFmdGVyIGZvbGRpbmcgd2hlbiBpbnRlcmZlcmluZyBtdWx0aURyYWdFbGVtZW50cyBhcmUgbW92ZWQgb3V0XG5cblxuICAgICAgICBpZiAoIWlzT3duZXIpIHtcbiAgICAgICAgICAvLyBPbmx5IHJlbW92ZSBpZiBub3QgZm9sZGluZyAoZm9sZGluZyB3aWxsIHJlbW92ZSB0aGVtIGFueXdheXMpXG4gICAgICAgICAgaWYgKCFmb2xkaW5nKSB7XG4gICAgICAgICAgICByZW1vdmVNdWx0aURyYWdFbGVtZW50cygpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB2YXIgY2xvbmVzSGlkZGVuQmVmb3JlID0gY2xvbmVzSGlkZGVuO1xuXG4gICAgICAgICAgICBhY3RpdmVTb3J0YWJsZS5fc2hvd0Nsb25lKHNvcnRhYmxlKTsgLy8gVW5mb2xkIGFuaW1hdGlvbiBmb3IgY2xvbmVzIGlmIHNob3dpbmcgZnJvbSBoaWRkZW5cblxuXG4gICAgICAgICAgICBpZiAoYWN0aXZlU29ydGFibGUub3B0aW9ucy5hbmltYXRpb24gJiYgIWNsb25lc0hpZGRlbiAmJiBjbG9uZXNIaWRkZW5CZWZvcmUpIHtcbiAgICAgICAgICAgICAgbXVsdGlEcmFnQ2xvbmVzLmZvckVhY2goZnVuY3Rpb24gKGNsb25lKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlU29ydGFibGUuYWRkQW5pbWF0aW9uU3RhdGUoe1xuICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBjbG9uZSxcbiAgICAgICAgICAgICAgICAgIHJlY3Q6IGNsb25lc0Zyb21SZWN0XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY2xvbmUuZnJvbVJlY3QgPSBjbG9uZXNGcm9tUmVjdDtcbiAgICAgICAgICAgICAgICBjbG9uZS50aGlzQW5pbWF0aW9uRHVyYXRpb24gPSBudWxsO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWN0aXZlU29ydGFibGUuX3Nob3dDbG9uZShzb3J0YWJsZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBkcmFnT3ZlckFuaW1hdGlvbkNhcHR1cmU6IGZ1bmN0aW9uIGRyYWdPdmVyQW5pbWF0aW9uQ2FwdHVyZShfcmVmMTEpIHtcbiAgICAgIHZhciBkcmFnUmVjdCA9IF9yZWYxMS5kcmFnUmVjdCxcbiAgICAgICAgICBpc093bmVyID0gX3JlZjExLmlzT3duZXIsXG4gICAgICAgICAgYWN0aXZlU29ydGFibGUgPSBfcmVmMTEuYWN0aXZlU29ydGFibGU7XG4gICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgIG11bHRpRHJhZ0VsZW1lbnQudGhpc0FuaW1hdGlvbkR1cmF0aW9uID0gbnVsbDtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoYWN0aXZlU29ydGFibGUub3B0aW9ucy5hbmltYXRpb24gJiYgIWlzT3duZXIgJiYgYWN0aXZlU29ydGFibGUubXVsdGlEcmFnLmlzTXVsdGlEcmFnKSB7XG4gICAgICAgIGNsb25lc0Zyb21SZWN0ID0gX2V4dGVuZHMoe30sIGRyYWdSZWN0KTtcbiAgICAgICAgdmFyIGRyYWdNYXRyaXggPSBtYXRyaXgoZHJhZ0VsJDEsIHRydWUpO1xuICAgICAgICBjbG9uZXNGcm9tUmVjdC50b3AgLT0gZHJhZ01hdHJpeC5mO1xuICAgICAgICBjbG9uZXNGcm9tUmVjdC5sZWZ0IC09IGRyYWdNYXRyaXguZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRyYWdPdmVyQW5pbWF0aW9uQ29tcGxldGU6IGZ1bmN0aW9uIGRyYWdPdmVyQW5pbWF0aW9uQ29tcGxldGUoKSB7XG4gICAgICBpZiAoZm9sZGluZykge1xuICAgICAgICBmb2xkaW5nID0gZmFsc2U7XG4gICAgICAgIHJlbW92ZU11bHRpRHJhZ0VsZW1lbnRzKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkcm9wOiBmdW5jdGlvbiBkcm9wKF9yZWYxMikge1xuICAgICAgdmFyIGV2dCA9IF9yZWYxMi5vcmlnaW5hbEV2ZW50LFxuICAgICAgICAgIHJvb3RFbCA9IF9yZWYxMi5yb290RWwsXG4gICAgICAgICAgcGFyZW50RWwgPSBfcmVmMTIucGFyZW50RWwsXG4gICAgICAgICAgc29ydGFibGUgPSBfcmVmMTIuc29ydGFibGUsXG4gICAgICAgICAgZGlzcGF0Y2hTb3J0YWJsZUV2ZW50ID0gX3JlZjEyLmRpc3BhdGNoU29ydGFibGVFdmVudCxcbiAgICAgICAgICBvbGRJbmRleCA9IF9yZWYxMi5vbGRJbmRleCxcbiAgICAgICAgICBwdXRTb3J0YWJsZSA9IF9yZWYxMi5wdXRTb3J0YWJsZTtcbiAgICAgIHZhciB0b1NvcnRhYmxlID0gcHV0U29ydGFibGUgfHwgdGhpcy5zb3J0YWJsZTtcbiAgICAgIGlmICghZXZ0KSByZXR1cm47XG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICBjaGlsZHJlbiA9IHBhcmVudEVsLmNoaWxkcmVuOyAvLyBNdWx0aS1kcmFnIHNlbGVjdGlvblxuXG4gICAgICBpZiAoIWRyYWdTdGFydGVkKSB7XG4gICAgICAgIGlmIChvcHRpb25zLm11bHRpRHJhZ0tleSAmJiAhdGhpcy5tdWx0aURyYWdLZXlEb3duKSB7XG4gICAgICAgICAgdGhpcy5fZGVzZWxlY3RNdWx0aURyYWcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRvZ2dsZUNsYXNzKGRyYWdFbCQxLCBvcHRpb25zLnNlbGVjdGVkQ2xhc3MsICF+bXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZihkcmFnRWwkMSkpO1xuXG4gICAgICAgIGlmICghfm11bHRpRHJhZ0VsZW1lbnRzLmluZGV4T2YoZHJhZ0VsJDEpKSB7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMucHVzaChkcmFnRWwkMSk7XG4gICAgICAgICAgZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICBzb3J0YWJsZTogc29ydGFibGUsXG4gICAgICAgICAgICByb290RWw6IHJvb3RFbCxcbiAgICAgICAgICAgIG5hbWU6ICdzZWxlY3QnLFxuICAgICAgICAgICAgdGFyZ2V0RWw6IGRyYWdFbCQxLFxuICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICAgICAgfSk7IC8vIE1vZGlmaWVyIGFjdGl2YXRlZCwgc2VsZWN0IGZyb20gbGFzdCB0byBkcmFnRWxcblxuICAgICAgICAgIGlmIChldnQuc2hpZnRLZXkgJiYgbGFzdE11bHRpRHJhZ1NlbGVjdCAmJiBzb3J0YWJsZS5lbC5jb250YWlucyhsYXN0TXVsdGlEcmFnU2VsZWN0KSkge1xuICAgICAgICAgICAgdmFyIGxhc3RJbmRleCA9IGluZGV4KGxhc3RNdWx0aURyYWdTZWxlY3QpLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRJbmRleCA9IGluZGV4KGRyYWdFbCQxKTtcblxuICAgICAgICAgICAgaWYgKH5sYXN0SW5kZXggJiYgfmN1cnJlbnRJbmRleCAmJiBsYXN0SW5kZXggIT09IGN1cnJlbnRJbmRleCkge1xuICAgICAgICAgICAgICAvLyBNdXN0IGluY2x1ZGUgbGFzdE11bHRpRHJhZ1NlbGVjdCAoc2VsZWN0IGl0KSwgaW4gY2FzZSBtb2RpZmllZCBzZWxlY3Rpb24gZnJvbSBubyBzZWxlY3Rpb25cbiAgICAgICAgICAgICAgLy8gKGJ1dCBwcmV2aW91cyBzZWxlY3Rpb24gZXhpc3RlZClcbiAgICAgICAgICAgICAgdmFyIG4sIGk7XG5cbiAgICAgICAgICAgICAgaWYgKGN1cnJlbnRJbmRleCA+IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgICAgIGkgPSBsYXN0SW5kZXg7XG4gICAgICAgICAgICAgICAgbiA9IGN1cnJlbnRJbmRleDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpID0gY3VycmVudEluZGV4O1xuICAgICAgICAgICAgICAgIG4gPSBsYXN0SW5kZXggKyAxO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgZm9yICg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAofm11bHRpRHJhZ0VsZW1lbnRzLmluZGV4T2YoY2hpbGRyZW5baV0pKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyhjaGlsZHJlbltpXSwgb3B0aW9ucy5zZWxlY3RlZENsYXNzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5wdXNoKGNoaWxkcmVuW2ldKTtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgICAgICAgIHNvcnRhYmxlOiBzb3J0YWJsZSxcbiAgICAgICAgICAgICAgICAgIHJvb3RFbDogcm9vdEVsLFxuICAgICAgICAgICAgICAgICAgbmFtZTogJ3NlbGVjdCcsXG4gICAgICAgICAgICAgICAgICB0YXJnZXRFbDogY2hpbGRyZW5baV0sXG4gICAgICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsYXN0TXVsdGlEcmFnU2VsZWN0ID0gZHJhZ0VsJDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbXVsdGlEcmFnU29ydGFibGUgPSB0b1NvcnRhYmxlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLnNwbGljZShtdWx0aURyYWdFbGVtZW50cy5pbmRleE9mKGRyYWdFbCQxKSwgMSk7XG4gICAgICAgICAgbGFzdE11bHRpRHJhZ1NlbGVjdCA9IG51bGw7XG4gICAgICAgICAgZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICBzb3J0YWJsZTogc29ydGFibGUsXG4gICAgICAgICAgICByb290RWw6IHJvb3RFbCxcbiAgICAgICAgICAgIG5hbWU6ICdkZXNlbGVjdCcsXG4gICAgICAgICAgICB0YXJnZXRFbDogZHJhZ0VsJDEsXG4gICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBNdWx0aS1kcmFnIGRyb3BcblxuXG4gICAgICBpZiAoZHJhZ1N0YXJ0ZWQgJiYgdGhpcy5pc011bHRpRHJhZykge1xuICAgICAgICBmb2xkaW5nID0gZmFsc2U7IC8vIERvIG5vdCBcInVuZm9sZFwiIGFmdGVyIGFyb3VuZCBkcmFnRWwgaWYgcmV2ZXJ0ZWRcblxuICAgICAgICBpZiAoKHBhcmVudEVsW2V4cGFuZG9dLm9wdGlvbnMuc29ydCB8fCBwYXJlbnRFbCAhPT0gcm9vdEVsKSAmJiBtdWx0aURyYWdFbGVtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgdmFyIGRyYWdSZWN0ID0gZ2V0UmVjdChkcmFnRWwkMSksXG4gICAgICAgICAgICAgIG11bHRpRHJhZ0luZGV4ID0gaW5kZXgoZHJhZ0VsJDEsICc6bm90KC4nICsgdGhpcy5vcHRpb25zLnNlbGVjdGVkQ2xhc3MgKyAnKScpO1xuICAgICAgICAgIGlmICghaW5pdGlhbEZvbGRpbmcgJiYgb3B0aW9ucy5hbmltYXRpb24pIGRyYWdFbCQxLnRoaXNBbmltYXRpb25EdXJhdGlvbiA9IG51bGw7XG4gICAgICAgICAgdG9Tb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcblxuICAgICAgICAgIGlmICghaW5pdGlhbEZvbGRpbmcpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmFuaW1hdGlvbikge1xuICAgICAgICAgICAgICBkcmFnRWwkMS5mcm9tUmVjdCA9IGRyYWdSZWN0O1xuICAgICAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgbXVsdGlEcmFnRWxlbWVudC50aGlzQW5pbWF0aW9uRHVyYXRpb24gPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgaWYgKG11bHRpRHJhZ0VsZW1lbnQgIT09IGRyYWdFbCQxKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgcmVjdCA9IGZvbGRpbmcgPyBnZXRSZWN0KG11bHRpRHJhZ0VsZW1lbnQpIDogZHJhZ1JlY3Q7XG4gICAgICAgICAgICAgICAgICBtdWx0aURyYWdFbGVtZW50LmZyb21SZWN0ID0gcmVjdDsgLy8gUHJlcGFyZSB1bmZvbGQgYW5pbWF0aW9uXG5cbiAgICAgICAgICAgICAgICAgIHRvU29ydGFibGUuYWRkQW5pbWF0aW9uU3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IG11bHRpRHJhZ0VsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIHJlY3Q6IHJlY3RcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IC8vIE11bHRpIGRyYWcgZWxlbWVudHMgYXJlIG5vdCBuZWNlc3NhcmlseSByZW1vdmVkIGZyb20gdGhlIERPTSBvbiBkcm9wLCBzbyB0byByZWluc2VydFxuICAgICAgICAgICAgLy8gcHJvcGVybHkgdGhleSBtdXN0IGFsbCBiZSByZW1vdmVkXG5cblxuICAgICAgICAgICAgcmVtb3ZlTXVsdGlEcmFnRWxlbWVudHMoKTtcbiAgICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgICAgaWYgKGNoaWxkcmVuW211bHRpRHJhZ0luZGV4XSkge1xuICAgICAgICAgICAgICAgIHBhcmVudEVsLmluc2VydEJlZm9yZShtdWx0aURyYWdFbGVtZW50LCBjaGlsZHJlblttdWx0aURyYWdJbmRleF0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcmVudEVsLmFwcGVuZENoaWxkKG11bHRpRHJhZ0VsZW1lbnQpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgbXVsdGlEcmFnSW5kZXgrKztcbiAgICAgICAgICAgIH0pOyAvLyBJZiBpbml0aWFsIGZvbGRpbmcgaXMgZG9uZSwgdGhlIGVsZW1lbnRzIG1heSBoYXZlIGNoYW5nZWQgcG9zaXRpb24gYmVjYXVzZSB0aGV5IGFyZSBub3dcbiAgICAgICAgICAgIC8vIHVuZm9sZGluZyBhcm91bmQgZHJhZ0VsLCBldmVuIHRob3VnaCBkcmFnRWwgbWF5IG5vdCBoYXZlIGhpcyBpbmRleCBjaGFuZ2VkLCBzbyB1cGRhdGUgZXZlbnRcbiAgICAgICAgICAgIC8vIG11c3QgYmUgZmlyZWQgaGVyZSBhcyBTb3J0YWJsZSB3aWxsIG5vdC5cblxuICAgICAgICAgICAgaWYgKG9sZEluZGV4ID09PSBpbmRleChkcmFnRWwkMSkpIHtcbiAgICAgICAgICAgICAgdmFyIHVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKG11bHRpRHJhZ0VsZW1lbnQuc29ydGFibGVJbmRleCAhPT0gaW5kZXgobXVsdGlEcmFnRWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgIHVwZGF0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBpZiAodXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2hTb3J0YWJsZUV2ZW50KCd1cGRhdGUnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gLy8gTXVzdCBiZSBkb25lIGFmdGVyIGNhcHR1cmluZyBpbmRpdmlkdWFsIHJlY3RzIChzY3JvbGwgYmFyKVxuXG5cbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgICAgICB1bnNldFJlY3QobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdG9Tb3J0YWJsZS5hbmltYXRlQWxsKCk7XG4gICAgICAgIH1cblxuICAgICAgICBtdWx0aURyYWdTb3J0YWJsZSA9IHRvU29ydGFibGU7XG4gICAgICB9IC8vIFJlbW92ZSBjbG9uZXMgaWYgbmVjZXNzYXJ5XG5cblxuICAgICAgaWYgKHJvb3RFbCA9PT0gcGFyZW50RWwgfHwgcHV0U29ydGFibGUgJiYgcHV0U29ydGFibGUubGFzdFB1dE1vZGUgIT09ICdjbG9uZScpIHtcbiAgICAgICAgbXVsdGlEcmFnQ2xvbmVzLmZvckVhY2goZnVuY3Rpb24gKGNsb25lKSB7XG4gICAgICAgICAgY2xvbmUucGFyZW50Tm9kZSAmJiBjbG9uZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNsb25lKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBudWxsaW5nR2xvYmFsOiBmdW5jdGlvbiBudWxsaW5nR2xvYmFsKCkge1xuICAgICAgdGhpcy5pc011bHRpRHJhZyA9IGRyYWdTdGFydGVkID0gZmFsc2U7XG4gICAgICBtdWx0aURyYWdDbG9uZXMubGVuZ3RoID0gMDtcbiAgICB9LFxuICAgIGRlc3Ryb3lHbG9iYWw6IGZ1bmN0aW9uIGRlc3Ryb3lHbG9iYWwoKSB7XG4gICAgICB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZygpO1xuXG4gICAgICBvZmYoZG9jdW1lbnQsICdwb2ludGVydXAnLCB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZyk7XG4gICAgICBvZmYoZG9jdW1lbnQsICdtb3VzZXVwJywgdGhpcy5fZGVzZWxlY3RNdWx0aURyYWcpO1xuICAgICAgb2ZmKGRvY3VtZW50LCAndG91Y2hlbmQnLCB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZyk7XG4gICAgICBvZmYoZG9jdW1lbnQsICdrZXlkb3duJywgdGhpcy5fY2hlY2tLZXlEb3duKTtcbiAgICAgIG9mZihkb2N1bWVudCwgJ2tleXVwJywgdGhpcy5fY2hlY2tLZXlVcCk7XG4gICAgfSxcbiAgICBfZGVzZWxlY3RNdWx0aURyYWc6IGZ1bmN0aW9uIF9kZXNlbGVjdE11bHRpRHJhZyhldnQpIHtcbiAgICAgIGlmICh0eXBlb2YgZHJhZ1N0YXJ0ZWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZHJhZ1N0YXJ0ZWQpIHJldHVybjsgLy8gT25seSBkZXNlbGVjdCBpZiBzZWxlY3Rpb24gaXMgaW4gdGhpcyBzb3J0YWJsZVxuXG4gICAgICBpZiAobXVsdGlEcmFnU29ydGFibGUgIT09IHRoaXMuc29ydGFibGUpIHJldHVybjsgLy8gT25seSBkZXNlbGVjdCBpZiB0YXJnZXQgaXMgbm90IGl0ZW0gaW4gdGhpcyBzb3J0YWJsZVxuXG4gICAgICBpZiAoZXZ0ICYmIGNsb3Nlc3QoZXZ0LnRhcmdldCwgdGhpcy5vcHRpb25zLmRyYWdnYWJsZSwgdGhpcy5zb3J0YWJsZS5lbCwgZmFsc2UpKSByZXR1cm47IC8vIE9ubHkgZGVzZWxlY3QgaWYgbGVmdCBjbGlja1xuXG4gICAgICBpZiAoZXZ0ICYmIGV2dC5idXR0b24gIT09IDApIHJldHVybjtcblxuICAgICAgd2hpbGUgKG11bHRpRHJhZ0VsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICB2YXIgZWwgPSBtdWx0aURyYWdFbGVtZW50c1swXTtcbiAgICAgICAgdG9nZ2xlQ2xhc3MoZWwsIHRoaXMub3B0aW9ucy5zZWxlY3RlZENsYXNzLCBmYWxzZSk7XG4gICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLnNoaWZ0KCk7XG4gICAgICAgIGRpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLnNvcnRhYmxlLFxuICAgICAgICAgIHJvb3RFbDogdGhpcy5zb3J0YWJsZS5lbCxcbiAgICAgICAgICBuYW1lOiAnZGVzZWxlY3QnLFxuICAgICAgICAgIHRhcmdldEVsOiBlbCxcbiAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBfY2hlY2tLZXlEb3duOiBmdW5jdGlvbiBfY2hlY2tLZXlEb3duKGV2dCkge1xuICAgICAgaWYgKGV2dC5rZXkgPT09IHRoaXMub3B0aW9ucy5tdWx0aURyYWdLZXkpIHtcbiAgICAgICAgdGhpcy5tdWx0aURyYWdLZXlEb3duID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIF9jaGVja0tleVVwOiBmdW5jdGlvbiBfY2hlY2tLZXlVcChldnQpIHtcbiAgICAgIGlmIChldnQua2V5ID09PSB0aGlzLm9wdGlvbnMubXVsdGlEcmFnS2V5KSB7XG4gICAgICAgIHRoaXMubXVsdGlEcmFnS2V5RG93biA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzKE11bHRpRHJhZywge1xuICAgIC8vIFN0YXRpYyBtZXRob2RzICYgcHJvcGVydGllc1xuICAgIHBsdWdpbk5hbWU6ICdtdWx0aURyYWcnLFxuICAgIHV0aWxzOiB7XG4gICAgICAvKipcclxuICAgICAgICogU2VsZWN0cyB0aGUgcHJvdmlkZWQgbXVsdGktZHJhZyBpdGVtXHJcbiAgICAgICAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbCAgICBUaGUgZWxlbWVudCB0byBiZSBzZWxlY3RlZFxyXG4gICAgICAgKi9cbiAgICAgIHNlbGVjdDogZnVuY3Rpb24gc2VsZWN0KGVsKSB7XG4gICAgICAgIHZhciBzb3J0YWJsZSA9IGVsLnBhcmVudE5vZGVbZXhwYW5kb107XG4gICAgICAgIGlmICghc29ydGFibGUgfHwgIXNvcnRhYmxlLm9wdGlvbnMubXVsdGlEcmFnIHx8IH5tdWx0aURyYWdFbGVtZW50cy5pbmRleE9mKGVsKSkgcmV0dXJuO1xuXG4gICAgICAgIGlmIChtdWx0aURyYWdTb3J0YWJsZSAmJiBtdWx0aURyYWdTb3J0YWJsZSAhPT0gc29ydGFibGUpIHtcbiAgICAgICAgICBtdWx0aURyYWdTb3J0YWJsZS5tdWx0aURyYWcuX2Rlc2VsZWN0TXVsdGlEcmFnKCk7XG5cbiAgICAgICAgICBtdWx0aURyYWdTb3J0YWJsZSA9IHNvcnRhYmxlO1xuICAgICAgICB9XG5cbiAgICAgICAgdG9nZ2xlQ2xhc3MoZWwsIHNvcnRhYmxlLm9wdGlvbnMuc2VsZWN0ZWRDbGFzcywgdHJ1ZSk7XG4gICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLnB1c2goZWwpO1xuICAgICAgfSxcblxuICAgICAgLyoqXHJcbiAgICAgICAqIERlc2VsZWN0cyB0aGUgcHJvdmlkZWQgbXVsdGktZHJhZyBpdGVtXHJcbiAgICAgICAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbCAgICBUaGUgZWxlbWVudCB0byBiZSBkZXNlbGVjdGVkXHJcbiAgICAgICAqL1xuICAgICAgZGVzZWxlY3Q6IGZ1bmN0aW9uIGRlc2VsZWN0KGVsKSB7XG4gICAgICAgIHZhciBzb3J0YWJsZSA9IGVsLnBhcmVudE5vZGVbZXhwYW5kb10sXG4gICAgICAgICAgICBpbmRleCA9IG11bHRpRHJhZ0VsZW1lbnRzLmluZGV4T2YoZWwpO1xuICAgICAgICBpZiAoIXNvcnRhYmxlIHx8ICFzb3J0YWJsZS5vcHRpb25zLm11bHRpRHJhZyB8fCAhfmluZGV4KSByZXR1cm47XG4gICAgICAgIHRvZ2dsZUNsYXNzKGVsLCBzb3J0YWJsZS5vcHRpb25zLnNlbGVjdGVkQ2xhc3MsIGZhbHNlKTtcbiAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGV2ZW50UHJvcGVydGllczogZnVuY3Rpb24gZXZlbnRQcm9wZXJ0aWVzKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBvbGRJbmRpY2llcyA9IFtdLFxuICAgICAgICAgIG5ld0luZGljaWVzID0gW107XG4gICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgIG9sZEluZGljaWVzLnB1c2goe1xuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnQ6IG11bHRpRHJhZ0VsZW1lbnQsXG4gICAgICAgICAgaW5kZXg6IG11bHRpRHJhZ0VsZW1lbnQuc29ydGFibGVJbmRleFxuICAgICAgICB9KTsgLy8gbXVsdGlEcmFnRWxlbWVudHMgd2lsbCBhbHJlYWR5IGJlIHNvcnRlZCBpZiBmb2xkaW5nXG5cbiAgICAgICAgdmFyIG5ld0luZGV4O1xuXG4gICAgICAgIGlmIChmb2xkaW5nICYmIG11bHRpRHJhZ0VsZW1lbnQgIT09IGRyYWdFbCQxKSB7XG4gICAgICAgICAgbmV3SW5kZXggPSAtMTtcbiAgICAgICAgfSBlbHNlIGlmIChmb2xkaW5nKSB7XG4gICAgICAgICAgbmV3SW5kZXggPSBpbmRleChtdWx0aURyYWdFbGVtZW50LCAnOm5vdCguJyArIF90aGlzMy5vcHRpb25zLnNlbGVjdGVkQ2xhc3MgKyAnKScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld0luZGV4ID0gaW5kZXgobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBuZXdJbmRpY2llcy5wdXNoKHtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50OiBtdWx0aURyYWdFbGVtZW50LFxuICAgICAgICAgIGluZGV4OiBuZXdJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaXRlbXM6IF90b0NvbnN1bWFibGVBcnJheShtdWx0aURyYWdFbGVtZW50cyksXG4gICAgICAgIGNsb25lczogW10uY29uY2F0KG11bHRpRHJhZ0Nsb25lcyksXG4gICAgICAgIG9sZEluZGljaWVzOiBvbGRJbmRpY2llcyxcbiAgICAgICAgbmV3SW5kaWNpZXM6IG5ld0luZGljaWVzXG4gICAgICB9O1xuICAgIH0sXG4gICAgb3B0aW9uTGlzdGVuZXJzOiB7XG4gICAgICBtdWx0aURyYWdLZXk6IGZ1bmN0aW9uIG11bHRpRHJhZ0tleShrZXkpIHtcbiAgICAgICAga2V5ID0ga2V5LnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgaWYgKGtleSA9PT0gJ2N0cmwnKSB7XG4gICAgICAgICAga2V5ID0gJ0NvbnRyb2wnO1xuICAgICAgICB9IGVsc2UgaWYgKGtleS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAga2V5ID0ga2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsga2V5LnN1YnN0cigxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gaW5zZXJ0TXVsdGlEcmFnRWxlbWVudHMoY2xvbmVzSW5zZXJ0ZWQsIHJvb3RFbCkge1xuICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50LCBpKSB7XG4gICAgdmFyIHRhcmdldCA9IHJvb3RFbC5jaGlsZHJlblttdWx0aURyYWdFbGVtZW50LnNvcnRhYmxlSW5kZXggKyAoY2xvbmVzSW5zZXJ0ZWQgPyBOdW1iZXIoaSkgOiAwKV07XG5cbiAgICBpZiAodGFyZ2V0KSB7XG4gICAgICByb290RWwuaW5zZXJ0QmVmb3JlKG11bHRpRHJhZ0VsZW1lbnQsIHRhcmdldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvb3RFbC5hcHBlbmRDaGlsZChtdWx0aURyYWdFbGVtZW50KTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXHJcbiAqIEluc2VydCBtdWx0aS1kcmFnIGNsb25lc1xyXG4gKiBAcGFyYW0gIHtbQm9vbGVhbl19IGVsZW1lbnRzSW5zZXJ0ZWQgIFdoZXRoZXIgdGhlIG11bHRpLWRyYWcgZWxlbWVudHMgYXJlIGluc2VydGVkXHJcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSByb290RWxcclxuICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0TXVsdGlEcmFnQ2xvbmVzKGVsZW1lbnRzSW5zZXJ0ZWQsIHJvb3RFbCkge1xuICBtdWx0aURyYWdDbG9uZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xvbmUsIGkpIHtcbiAgICB2YXIgdGFyZ2V0ID0gcm9vdEVsLmNoaWxkcmVuW2Nsb25lLnNvcnRhYmxlSW5kZXggKyAoZWxlbWVudHNJbnNlcnRlZCA/IE51bWJlcihpKSA6IDApXTtcblxuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgIHJvb3RFbC5pbnNlcnRCZWZvcmUoY2xvbmUsIHRhcmdldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvb3RFbC5hcHBlbmRDaGlsZChjbG9uZSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlTXVsdGlEcmFnRWxlbWVudHMoKSB7XG4gIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICBpZiAobXVsdGlEcmFnRWxlbWVudCA9PT0gZHJhZ0VsJDEpIHJldHVybjtcbiAgICBtdWx0aURyYWdFbGVtZW50LnBhcmVudE5vZGUgJiYgbXVsdGlEcmFnRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG11bHRpRHJhZ0VsZW1lbnQpO1xuICB9KTtcbn1cblxuU29ydGFibGUubW91bnQobmV3IEF1dG9TY3JvbGxQbHVnaW4oKSk7XG5Tb3J0YWJsZS5tb3VudChSZW1vdmUsIFJldmVydCk7XG5cbmV4cG9ydCBkZWZhdWx0IFNvcnRhYmxlO1xuZXhwb3J0IHsgTXVsdGlEcmFnUGx1Z2luIGFzIE11bHRpRHJhZywgU29ydGFibGUsIFN3YXBQbHVnaW4gYXMgU3dhcCB9O1xuIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsIkNLRWRpdG9yIiwid2luZG93IiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsImRlZmF1bHQiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJzdGRPbkVuZCIsInNjcmlwdCIsImNiIiwib25sb2FkIiwidGhpcyIsIm9uZXJyb3IiLCJFcnJvciIsInNyYyIsImllT25FbmQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicHJvbWlzZSIsImdldEVkaXRvck5hbWVzcGFjZSIsImVkaXRvclVSTCIsIm9uTmFtZXNwYWNlTG9hZGVkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJDS0VESVRPUiIsImxlbmd0aCIsInJlamVjdCIsIlR5cGVFcnJvciIsInNjcmlwdExvYWRlciIsInRoZW4iLCJyZXMiLCJzY3JpcHRSZXNvbHZlIiwic2NyaXB0UmVqZWN0Iiwib3B0cyIsImhlYWQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJjaGFyc2V0IiwiYXN5bmMiLCJhdHRycyIsImF0dHIiLCJzZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVzIiwidGV4dCIsIlN0cmluZyIsImFwcGVuZENoaWxkIiwibG9hZFNjcmlwdCIsImVyciIsInVuZGVmaW5lZCIsInJlbmRlciIsInRhZ05hbWUiLCJwcm9wcyIsInZhbGlkYXRvciIsImluY2x1ZGVzIiwiZWRpdG9yVXJsIiwiY29uZmlnIiwicmVhZE9ubHkiLCJCb29sZWFuIiwidGhyb3R0bGUiLCJOdW1iZXIiLCJtb3VudGVkIiwibmFtZXNwYWNlIiwiJGVtaXQiLCIkX2Rlc3Ryb3llZCIsInByZXBhcmVDb25maWciLCJtZXRob2QiLCJlbGVtZW50IiwiJGVsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJiZWZvcmVEZXN0cm95IiwiaW5zdGFuY2UiLCJkZXN0cm95Iiwid2F0Y2giLCJ2YWwiLCJnZXREYXRhIiwic2V0RGF0YSIsInNldFJlYWRPbmx5IiwibWV0aG9kcyIsIm9uIiwiZGVsYXlJZkRldGFjaGVkIiwidXNlckluc3RhbmNlUmVhZHlDYWxsYmFjayIsImluc3RhbmNlUmVhZHkiLCJldnQiLCJlZGl0b3IiLCIkbmV4dFRpY2siLCJwcmVwYXJlQ29tcG9uZW50RGF0YSIsImRhdGEiLCJmaXJlIiwiY2FsbGJhY2siLCIkX3NldFVwRWRpdG9yRXZlbnRzIiwibmV3RGF0YSIsIiRvbmNlIiwib25DaGFuZ2UiLCJmbiIsImRlbGF5IiwiY2FuY2VsIiwiY29udGV4dCIsImFyZ3VtZW50cyIsImNsZWFyVGltZW91dCIsIl9sZW4iLCJhcmdzIiwiQXJyYXkiLCJfa2V5Iiwic2V0VGltZW91dCIsImFwcGx5IiwiY29uY2F0IiwiZGVib3VuY2UiLCJpbnN0YWxsIiwiVnVlIiwiY29tcG9uZW50IiwiQ0tFZGl0b3JDb21wb25lbnQiLCJvd25LZXlzIiwiZW51bWVyYWJsZU9ubHkiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltYm9scyIsImZpbHRlciIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInB1c2giLCJfb2JqZWN0U3ByZWFkMiIsInRhcmdldCIsInNvdXJjZSIsImZvckVhY2giLCJfZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsIl90eXBlb2YiLCJvYmoiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfZXh0ZW5kcyIsImFzc2lnbiIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiaW5kZXhPZiIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsInNvdXJjZVN5bWJvbEtleXMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIl90b0NvbnN1bWFibGVBcnJheSIsImFyciIsIl9hcnJheVdpdGhvdXRIb2xlcyIsIl9pdGVyYWJsZVRvQXJyYXkiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVTcHJlYWQiLCJpc0FycmF5IiwiX2FycmF5TGlrZVRvQXJyYXkiLCJpdGVyIiwiZnJvbSIsIm1pbkxlbiIsInRvU3RyaW5nIiwic2xpY2UiLCJ0ZXN0IiwibGVuIiwiYXJyMiIsInZlcnNpb24iLCJ1c2VyQWdlbnQiLCJwYXR0ZXJuIiwibmF2aWdhdG9yIiwibWF0Y2giLCJJRTExT3JMZXNzIiwiRWRnZSIsIkZpcmVGb3giLCJTYWZhcmkiLCJJT1MiLCJDaHJvbWVGb3JBbmRyb2lkIiwiY2FwdHVyZU1vZGUiLCJjYXB0dXJlIiwicGFzc2l2ZSIsImVsIiwiZXZlbnQiLCJhZGRFdmVudExpc3RlbmVyIiwib2ZmIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm1hdGNoZXMiLCJzZWxlY3RvciIsInN1YnN0cmluZyIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwiXyIsImdldFBhcmVudE9ySG9zdCIsImhvc3QiLCJub2RlVHlwZSIsInBhcmVudE5vZGUiLCJjbG9zZXN0IiwiY3R4IiwiaW5jbHVkZUNUWCIsIlJfU1BBQ0UiLCJ0b2dnbGVDbGFzcyIsInN0YXRlIiwiY2xhc3NMaXN0IiwiY2xhc3NOYW1lIiwicmVwbGFjZSIsImNzcyIsInByb3AiLCJzdHlsZSIsImRlZmF1bHRWaWV3IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImN1cnJlbnRTdHlsZSIsIm1hdHJpeCIsInNlbGZPbmx5IiwiYXBwbGllZFRyYW5zZm9ybXMiLCJ0cmFuc2Zvcm0iLCJtYXRyaXhGbiIsIkRPTU1hdHJpeCIsIldlYktpdENTU01hdHJpeCIsIkNTU01hdHJpeCIsIk1TQ1NTTWF0cml4IiwiZmluZCIsImxpc3QiLCJnZXRXaW5kb3dTY3JvbGxpbmdFbGVtZW50Iiwic2Nyb2xsaW5nRWxlbWVudCIsImRvY3VtZW50RWxlbWVudCIsImdldFJlY3QiLCJyZWxhdGl2ZVRvQ29udGFpbmluZ0Jsb2NrIiwicmVsYXRpdmVUb05vblN0YXRpY1BhcmVudCIsInVuZG9TY2FsZSIsImNvbnRhaW5lciIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImVsUmVjdCIsInRvcCIsImxlZnQiLCJib3R0b20iLCJyaWdodCIsImhlaWdodCIsIndpZHRoIiwiaW5uZXJIZWlnaHQiLCJpbm5lcldpZHRoIiwiY29udGFpbmVyUmVjdCIsInBhcnNlSW50IiwiZWxNYXRyaXgiLCJzY2FsZVgiLCJhIiwic2NhbGVZIiwiaXNTY3JvbGxlZFBhc3QiLCJlbFNpZGUiLCJwYXJlbnRTaWRlIiwicGFyZW50IiwiZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQiLCJlbFNpZGVWYWwiLCJwYXJlbnRTaWRlVmFsIiwidmlzaWJsZSIsImdldENoaWxkIiwiY2hpbGROdW0iLCJvcHRpb25zIiwiaW5jbHVkZURyYWdFbCIsImN1cnJlbnRDaGlsZCIsImNoaWxkcmVuIiwiZGlzcGxheSIsIlNvcnRhYmxlIiwiZ2hvc3QiLCJkcmFnZ2VkIiwiZHJhZ2dhYmxlIiwibGFzdENoaWxkIiwibGFzdCIsImxhc3RFbGVtZW50Q2hpbGQiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwiaW5kZXgiLCJub2RlTmFtZSIsInRvVXBwZXJDYXNlIiwiY2xvbmUiLCJnZXRSZWxhdGl2ZVNjcm9sbE9mZnNldCIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJ3aW5TY3JvbGxlciIsInNjcm9sbExlZnQiLCJzY3JvbGxUb3AiLCJpbmRleE9mT2JqZWN0IiwiaW5jbHVkZVNlbGYiLCJlbGVtIiwiZ290U2VsZiIsImNsaWVudFdpZHRoIiwic2Nyb2xsV2lkdGgiLCJjbGllbnRIZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCJlbGVtQ1NTIiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwiYm9keSIsImV4dGVuZCIsImRzdCIsImlzUmVjdEVxdWFsIiwicmVjdDEiLCJyZWN0MiIsIk1hdGgiLCJyb3VuZCIsIl90aHJvdHRsZVRpbWVvdXQiLCJtcyIsIl90aGlzIiwiY2FuY2VsVGhyb3R0bGUiLCJzY3JvbGxCeSIsIngiLCJ5IiwiUG9seW1lciIsIiQiLCJqUXVlcnkiLCJaZXB0byIsImRvbSIsImNsb25lTm9kZSIsInNldFJlY3QiLCJyZWN0IiwidW5zZXRSZWN0IiwiZXhwYW5kbyIsIkRhdGUiLCJnZXRUaW1lIiwiQW5pbWF0aW9uU3RhdGVNYW5hZ2VyIiwiYW5pbWF0aW9uU3RhdGVzIiwiYW5pbWF0aW9uQ2FsbGJhY2tJZCIsImNhcHR1cmVBbmltYXRpb25TdGF0ZSIsImFuaW1hdGlvbiIsImNoaWxkIiwiZnJvbVJlY3QiLCJ0aGlzQW5pbWF0aW9uRHVyYXRpb24iLCJjaGlsZE1hdHJpeCIsImYiLCJlIiwiYWRkQW5pbWF0aW9uU3RhdGUiLCJyZW1vdmVBbmltYXRpb25TdGF0ZSIsInNwbGljZSIsImFuaW1hdGVBbGwiLCJhbmltYXRpbmciLCJhbmltYXRpb25UaW1lIiwidGltZSIsInRvUmVjdCIsInByZXZGcm9tUmVjdCIsInByZXZUb1JlY3QiLCJhbmltYXRpbmdSZWN0IiwidGFyZ2V0TWF0cml4IiwiY2FsY3VsYXRlUmVhbFRpbWUiLCJhbmltYXRlIiwibWF4IiwiYW5pbWF0aW9uUmVzZXRUaW1lciIsImN1cnJlbnRSZWN0IiwiZHVyYXRpb24iLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsImFuaW1hdGluZ1giLCJhbmltYXRpbmdZIiwiZm9yUmVwYWludER1bW15IiwicmVwYWludCIsImVhc2luZyIsImFuaW1hdGVkIiwib2Zmc2V0V2lkdGgiLCJzcXJ0IiwicG93IiwicGx1Z2lucyIsImRlZmF1bHRzIiwiaW5pdGlhbGl6ZUJ5RGVmYXVsdCIsIlBsdWdpbk1hbmFnZXIiLCJtb3VudCIsInBsdWdpbiIsIm9wdGlvbiIsInBsdWdpbk5hbWUiLCJwbHVnaW5FdmVudCIsImV2ZW50TmFtZSIsInNvcnRhYmxlIiwiZXZlbnRDYW5jZWxlZCIsImV2ZW50TmFtZUdsb2JhbCIsImluaXRpYWxpemVQbHVnaW5zIiwiaW5pdGlhbGl6ZWQiLCJtb2RpZmllZCIsIm1vZGlmeU9wdGlvbiIsImdldEV2ZW50UHJvcGVydGllcyIsImV2ZW50UHJvcGVydGllcyIsIm1vZGlmaWVkVmFsdWUiLCJvcHRpb25MaXN0ZW5lcnMiLCJkaXNwYXRjaEV2ZW50IiwiX3JlZiIsInJvb3RFbCIsInRhcmdldEVsIiwiY2xvbmVFbCIsInRvRWwiLCJmcm9tRWwiLCJvbGRJbmRleCIsIm5ld0luZGV4Iiwib2xkRHJhZ2dhYmxlSW5kZXgiLCJuZXdEcmFnZ2FibGVJbmRleCIsIm9yaWdpbmFsRXZlbnQiLCJwdXRTb3J0YWJsZSIsImV4dHJhRXZlbnRQcm9wZXJ0aWVzIiwib25OYW1lIiwiY2hhckF0Iiwic3Vic3RyIiwiQ3VzdG9tRXZlbnQiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwidG8iLCJpdGVtIiwicHVsbE1vZGUiLCJsYXN0UHV0TW9kZSIsImFsbEV2ZW50UHJvcGVydGllcyIsIl9leGNsdWRlZCIsImRyYWdFbCIsInBhcmVudEVsIiwiZ2hvc3RFbCIsIm5leHRFbCIsImxhc3REb3duRWwiLCJjbG9uZUhpZGRlbiIsImRyYWdTdGFydGVkIiwibW92ZWQiLCJhY3RpdmVTb3J0YWJsZSIsImFjdGl2ZSIsImhpZGVHaG9zdEZvclRhcmdldCIsIl9oaWRlR2hvc3RGb3JUYXJnZXQiLCJ1bmhpZGVHaG9zdEZvclRhcmdldCIsIl91bmhpZGVHaG9zdEZvclRhcmdldCIsImNsb25lTm93SGlkZGVuIiwiY2xvbmVOb3dTaG93biIsImRpc3BhdGNoU29ydGFibGVFdmVudCIsIl9kaXNwYXRjaEV2ZW50IiwiaW5mbyIsImFjdGl2ZUdyb3VwIiwiYXdhaXRpbmdEcmFnU3RhcnRlZCIsImlnbm9yZU5leHRDbGljayIsInNvcnRhYmxlcyIsInRhcEV2dCIsInRvdWNoRXZ0IiwibGFzdER4IiwibGFzdER5IiwidGFwRGlzdGFuY2VMZWZ0IiwidGFwRGlzdGFuY2VUb3AiLCJsYXN0VGFyZ2V0IiwibGFzdERpcmVjdGlvbiIsInBhc3RGaXJzdEludmVydFRocmVzaCIsImlzQ2lyY3Vtc3RhbnRpYWxJbnZlcnQiLCJ0YXJnZXRNb3ZlRGlzdGFuY2UiLCJnaG9zdFJlbGF0aXZlUGFyZW50IiwiZ2hvc3RSZWxhdGl2ZVBhcmVudEluaXRpYWxTY3JvbGwiLCJfc2lsZW50Iiwic2F2ZWRJbnB1dENoZWNrZWQiLCJkb2N1bWVudEV4aXN0cyIsIlBvc2l0aW9uR2hvc3RBYnNvbHV0ZWx5IiwiQ1NTRmxvYXRQcm9wZXJ0eSIsInN1cHBvcnREcmFnZ2FibGUiLCJzdXBwb3J0Q3NzUG9pbnRlckV2ZW50cyIsImNzc1RleHQiLCJwb2ludGVyRXZlbnRzIiwiX2RldGVjdERpcmVjdGlvbiIsImVsQ1NTIiwiZWxXaWR0aCIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwiYm9yZGVyTGVmdFdpZHRoIiwiYm9yZGVyUmlnaHRXaWR0aCIsImNoaWxkMSIsImNoaWxkMiIsImZpcnN0Q2hpbGRDU1MiLCJzZWNvbmRDaGlsZENTUyIsImZpcnN0Q2hpbGRXaWR0aCIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsInNlY29uZENoaWxkV2lkdGgiLCJmbGV4RGlyZWN0aW9uIiwiZ3JpZFRlbXBsYXRlQ29sdW1ucyIsInNwbGl0IiwidG91Y2hpbmdTaWRlQ2hpbGQyIiwiY2xlYXIiLCJfZHJhZ0VsSW5Sb3dDb2x1bW4iLCJkcmFnUmVjdCIsInRhcmdldFJlY3QiLCJ2ZXJ0aWNhbCIsImRyYWdFbFMxT3BwIiwiZHJhZ0VsUzJPcHAiLCJkcmFnRWxPcHBMZW5ndGgiLCJ0YXJnZXRTMU9wcCIsInRhcmdldFMyT3BwIiwidGFyZ2V0T3BwTGVuZ3RoIiwiX2RldGVjdE5lYXJlc3RFbXB0eVNvcnRhYmxlIiwicmV0Iiwic29tZSIsInRocmVzaG9sZCIsImVtcHR5SW5zZXJ0VGhyZXNob2xkIiwiaW5zaWRlSG9yaXpvbnRhbGx5IiwiaW5zaWRlVmVydGljYWxseSIsIl9wcmVwYXJlR3JvdXAiLCJ0b0ZuIiwicHVsbCIsInNhbWVHcm91cCIsImdyb3VwIiwib3RoZXJHcm91cCIsImpvaW4iLCJvcmlnaW5hbEdyb3VwIiwiY2hlY2tQdWxsIiwiY2hlY2tQdXQiLCJwdXQiLCJyZXZlcnRDbG9uZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwibmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQiLCJ0b3VjaGVzIiwibmVhcmVzdCIsImNsaWVudFgiLCJjbGllbnRZIiwiX29uRHJhZ092ZXIiLCJfY2hlY2tPdXRzaWRlVGFyZ2V0RWwiLCJfaXNPdXRzaWRlVGhpc0VsIiwic29ydCIsImRpc2FibGVkIiwic3RvcmUiLCJoYW5kbGUiLCJzd2FwVGhyZXNob2xkIiwiaW52ZXJ0U3dhcCIsImludmVydGVkU3dhcFRocmVzaG9sZCIsInJlbW92ZUNsb25lT25IaWRlIiwiZGlyZWN0aW9uIiwiZ2hvc3RDbGFzcyIsImNob3NlbkNsYXNzIiwiZHJhZ0NsYXNzIiwiaWdub3JlIiwicHJldmVudE9uRmlsdGVyIiwiZGF0YVRyYW5zZmVyIiwidGV4dENvbnRlbnQiLCJkcm9wQnViYmxlIiwiZHJhZ292ZXJCdWJibGUiLCJkYXRhSWRBdHRyIiwiZGVsYXlPblRvdWNoT25seSIsInRvdWNoU3RhcnRUaHJlc2hvbGQiLCJkZXZpY2VQaXhlbFJhdGlvIiwiZm9yY2VGYWxsYmFjayIsImZhbGxiYWNrQ2xhc3MiLCJmYWxsYmFja09uQm9keSIsImZhbGxiYWNrVG9sZXJhbmNlIiwiZmFsbGJhY2tPZmZzZXQiLCJzdXBwb3J0UG9pbnRlciIsIm5hdGl2ZURyYWdnYWJsZSIsIl9vblRhcFN0YXJ0IiwiY29udGFpbnMiLCJfZ2V0RGlyZWN0aW9uIiwidG91Y2giLCJwb2ludGVyVHlwZSIsIm9yaWdpbmFsVGFyZ2V0Iiwic2hhZG93Um9vdCIsInBhdGgiLCJjb21wb3NlZFBhdGgiLCJfc2F2ZUlucHV0Q2hlY2tlZFN0YXRlIiwiYnV0dG9uIiwiaXNDb250ZW50RWRpdGFibGUiLCJjcml0ZXJpYSIsInRyaW0iLCJfcHJlcGFyZURyYWdTdGFydCIsIm93bmVyRG9jdW1lbnQiLCJkcmFnU3RhcnRGbiIsIm5leHRTaWJsaW5nIiwiX2xhc3RYIiwiX2xhc3RZIiwiX29uRHJvcCIsIl9kaXNhYmxlRGVsYXllZERyYWdFdmVudHMiLCJfdHJpZ2dlckRyYWdTdGFydCIsIl9kaXNhYmxlRHJhZ2dhYmxlIiwiX2Rpc2FibGVEZWxheWVkRHJhZyIsIl9kZWxheWVkRHJhZ1RvdWNoTW92ZUhhbmRsZXIiLCJfZHJhZ1N0YXJ0VGltZXIiLCJhYnMiLCJmbG9vciIsIl9vblRvdWNoTW92ZSIsIl9vbkRyYWdTdGFydCIsInNlbGVjdGlvbiIsIl9uZXh0VGljayIsImVtcHR5IiwiZ2V0U2VsZWN0aW9uIiwicmVtb3ZlQWxsUmFuZ2VzIiwiX2RyYWdTdGFydGVkIiwiZmFsbGJhY2siLCJfYXBwZW5kR2hvc3QiLCJfbnVsbGluZyIsIl9lbXVsYXRlRHJhZ092ZXIiLCJlbGVtZW50RnJvbVBvaW50IiwiaW5zZXJ0ZWQiLCJnaG9zdE1hdHJpeCIsInJlbGF0aXZlU2Nyb2xsT2Zmc2V0IiwiZHgiLCJkeSIsImIiLCJjc3NNYXRyaXgiLCJyZW1vdmVBdHRyaWJ1dGUiLCJfaGlkZUNsb25lIiwiY2xvbmVJZCIsImluc2VydEJlZm9yZSIsIl9sb29wSWQiLCJzZXRJbnRlcnZhbCIsImVmZmVjdEFsbG93ZWQiLCJfZHJhZ1N0YXJ0SWQiLCJyZXZlcnQiLCJpc093bmVyIiwiY2FuU29ydCIsImZyb21Tb3J0YWJsZSIsImNvbXBsZXRlZEZpcmVkIiwiZHJhZ092ZXJFdmVudCIsImV4dHJhIiwiYXhpcyIsImNvbXBsZXRlZCIsIm9uTW92ZSIsImFmdGVyIiwiX29uTW92ZSIsImNoYW5nZWQiLCJpbnNlcnRpb24iLCJfc2hvd0Nsb25lIiwiX2lnbm9yZVdoaWxlQW5pbWF0aW5nIiwiZWxMYXN0Q2hpbGQiLCJfZ2hvc3RJc0xhc3QiLCJfZ2hvc3RJc0ZpcnN0IiwiZmlyc3RDaGlsZCIsInRhcmdldEJlZm9yZUZpcnN0U3dhcCIsImRpZmZlcmVudExldmVsIiwiZGlmZmVyZW50Um93Q29sIiwic2lkZTEiLCJzY3JvbGxlZFBhc3RUb3AiLCJzY3JvbGxCZWZvcmUiLCJfZ2V0U3dhcERpcmVjdGlvbiIsInNpYmxpbmciLCJkcmFnSW5kZXgiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJtb3ZlVmVjdG9yIiwiX3Vuc2lsZW50IiwiX29mZk1vdmVFdmVudHMiLCJfb2ZmVXBFdmVudHMiLCJjbGVhckludGVydmFsIiwiX2NhbmNlbE5leHRUaWNrIiwicmVtb3ZlQ2hpbGQiLCJzYXZlIiwiY2hlY2tlZCIsImhhbmRsZUV2ZW50IiwiX2dsb2JhbERyYWdPdmVyIiwidG9BcnJheSIsIm9yZGVyIiwiZ2V0QXR0cmlidXRlIiwiX2dlbmVyYXRlSWQiLCJ1c2VBbmltYXRpb24iLCJpdGVtcyIsImlkIiwic2V0IiwiY2xvc2VzdCQxIiwicXVlcnlTZWxlY3RvckFsbCIsImRyb3BFZmZlY3QiLCJ3aWxsSW5zZXJ0QWZ0ZXIiLCJvbk1vdmVGbiIsInJldFZhbCIsImRyYWdnZWRSZWN0IiwicmVsYXRlZCIsInJlbGF0ZWRSZWN0Iiwic3BhY2VyIiwiaXNMYXN0VGFyZ2V0IiwibW91c2VPbkF4aXMiLCJ0YXJnZXRMZW5ndGgiLCJ0YXJnZXRTMSIsInRhcmdldFMyIiwiaW52ZXJ0IiwiX2dldEluc2VydERpcmVjdGlvbiIsInN0ciIsImhyZWYiLCJzdW0iLCJjaGFyQ29kZUF0IiwiaW5wdXRzIiwiaWR4IiwidXRpbHMiLCJpcyIsIm5leHRUaWNrIiwiY2FuY2VsTmV4dFRpY2siLCJkZXRlY3REaXJlY3Rpb24iLCJhdXRvU2Nyb2xscyIsInNjcm9sbEVsIiwic2Nyb2xsUm9vdEVsIiwic2Nyb2xsaW5nIiwibGFzdEF1dG9TY3JvbGxYIiwibGFzdEF1dG9TY3JvbGxZIiwidG91Y2hFdnQkMSIsInBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsIiwiQXV0b1Njcm9sbFBsdWdpbiIsIkF1dG9TY3JvbGwiLCJzY3JvbGwiLCJmb3JjZUF1dG9TY3JvbGxGYWxsYmFjayIsInNjcm9sbFNlbnNpdGl2aXR5Iiwic2Nyb2xsU3BlZWQiLCJidWJibGVTY3JvbGwiLCJfaGFuZGxlQXV0b1Njcm9sbCIsIl9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGwiLCJkcmFnT3ZlckNvbXBsZXRlZCIsIl9yZWYyIiwiZHJhZ092ZXJCdWJibGUiLCJkcm9wIiwiY2xlYXJQb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCIsImNsZWFyQXV0b1Njcm9sbHMiLCJudWxsaW5nIiwiYXV0b1Njcm9sbCIsIm9nRWxlbVNjcm9sbGVyIiwibmV3RWxlbSIsInBpZCIsImlzRmFsbGJhY2siLCJzZW5zIiwic3BlZWQiLCJzY3JvbGxUaGlzSW5zdGFuY2UiLCJzY3JvbGxDdXN0b21GbiIsInNjcm9sbEZuIiwibGF5ZXJzT3V0IiwiY3VycmVudFBhcmVudCIsImNhblNjcm9sbFgiLCJjYW5TY3JvbGxZIiwic2Nyb2xsUG9zWCIsInNjcm9sbFBvc1kiLCJ2eCIsInZ5IiwibGF5ZXIiLCJzY3JvbGxPZmZzZXRZIiwic2Nyb2xsT2Zmc2V0WCIsInRvU29ydGFibGUiLCJjaGFuZ2VkVG91Y2hlcyIsIm9uU3BpbGwiLCJSZXZlcnQiLCJzdGFydEluZGV4IiwiZHJhZ1N0YXJ0IiwiX3JlZjMiLCJSZW1vdmUiLCJfcmVmNCIsInBhcmVudFNvcnRhYmxlIiwibGFzdFN3YXBFbCIsIlN3YXBQbHVnaW4iLCJTd2FwIiwic3dhcENsYXNzIiwiZHJhZ092ZXJWYWxpZCIsInN3YXAiLCJwcmV2U3dhcEVsIiwic3dhcE5vZGVzIiwic3dhcEl0ZW0iLCJuMSIsIm4yIiwicDEiLCJwMiIsImkxIiwiaTIiLCJpc0VxdWFsTm9kZSIsIm11bHRpRHJhZ0VsZW1lbnRzIiwibXVsdGlEcmFnQ2xvbmVzIiwibGFzdE11bHRpRHJhZ1NlbGVjdCIsIm11bHRpRHJhZ1NvcnRhYmxlIiwiaW5pdGlhbEZvbGRpbmciLCJmb2xkaW5nIiwiZHJhZ0VsJDEiLCJjbG9uZXNGcm9tUmVjdCIsImNsb25lc0hpZGRlbiIsIk11bHRpRHJhZ1BsdWdpbiIsIk11bHRpRHJhZyIsImF2b2lkSW1wbGljaXREZXNlbGVjdCIsIl9kZXNlbGVjdE11bHRpRHJhZyIsIl9jaGVja0tleURvd24iLCJfY2hlY2tLZXlVcCIsInNlbGVjdGVkQ2xhc3MiLCJtdWx0aURyYWdLZXkiLCJtdWx0aURyYWdFbGVtZW50IiwibXVsdGlEcmFnS2V5RG93biIsImlzTXVsdGlEcmFnIiwiZGVsYXlTdGFydEdsb2JhbCIsImRlbGF5RW5kZWQiLCJzZXR1cENsb25lIiwic29ydGFibGVJbmRleCIsImluc2VydE11bHRpRHJhZ0Nsb25lcyIsInNob3dDbG9uZSIsImhpZGVDbG9uZSIsIl9yZWY1IiwiZHJhZ1N0YXJ0R2xvYmFsIiwiX3JlZjYiLCJtdWx0aURyYWciLCJfcmVmNyIsIl90aGlzMiIsInJlbW92ZU11bHRpRHJhZ0VsZW1lbnRzIiwiZHJhZ092ZXIiLCJfcmVmOCIsIl9yZWY5IiwiaW5zZXJ0TXVsdGlEcmFnRWxlbWVudHMiLCJfcmVmMTAiLCJkcmFnUmVjdEFic29sdXRlIiwiY2xvbmVzSGlkZGVuQmVmb3JlIiwiZHJhZ092ZXJBbmltYXRpb25DYXB0dXJlIiwiX3JlZjExIiwiZHJhZ01hdHJpeCIsImRyYWdPdmVyQW5pbWF0aW9uQ29tcGxldGUiLCJfcmVmMTIiLCJzaGlmdEtleSIsImxhc3RJbmRleCIsImN1cnJlbnRJbmRleCIsIm11bHRpRHJhZ0luZGV4IiwidXBkYXRlIiwibnVsbGluZ0dsb2JhbCIsImRlc3Ryb3lHbG9iYWwiLCJzaGlmdCIsInNlbGVjdCIsImRlc2VsZWN0IiwiX3RoaXMzIiwib2xkSW5kaWNpZXMiLCJuZXdJbmRpY2llcyIsImNsb25lcyIsInRvTG93ZXJDYXNlIiwiY2xvbmVzSW5zZXJ0ZWQiLCJlbGVtZW50c0luc2VydGVkIl0sInNvdXJjZVJvb3QiOiIifQ==